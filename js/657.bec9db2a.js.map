{"version":3,"file":"js/657.bec9db2a.js","mappings":"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","sources":["webpack://vue_start_1/./src/views/Konva/KonvaVueTpl3.vue?7d51","webpack://vue_start_1/src/views/Konva/KonvaVueTpl3.vue","webpack://vue_start_1/./src/views/Konva/KonvaVueTpl3.vue?b728","webpack://vue_start_1/./src/views/Konva/KonvaVueTpl3.vue?020e","webpack://vue_start_1/./src/views/Konva/KonvaVueTpl3.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./KonvaVueTpl3.vue').default}}),_c('h1',[_vm._v(\"This is KonvaVue\")]),_c('b-row',[_c('b-col',{staticClass:\"border-right\",attrs:{\"sm\":\"3\"}},[_c('div',{staticClass:\"mb-1\"},[_c('button',{staticClass:\"mr-1\",attrs:{\"disabled\":(_vm.Sel.length==1) ? false : true},on:{\"click\":_vm.onDel}},[_vm._v(\"Del\")]),_c('button',{staticClass:\"mr-1\",attrs:{\"disabled\":(_vm.Sel.length==2) ? false : true},on:{\"click\":_vm.onLink}},[_vm._v(_vm._s((!_vm.unLink) ? 'Link' : 'UnLink'))]),_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onReset}},[_vm._v(\"Reset\")]),_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onLoad}},[_vm._v(\"Load\")]),_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onSave}},[_vm._v(\"Save\")])]),_c('div',{attrs:{\"id\":\"stage-parent\"}},[_c('div',{staticClass:\"border\",attrs:{\"id\":\"container\"}},[_c('v-stage',{ref:\"stage\",attrs:{\"config\":_vm.configKonva},on:{\"click\":_vm.onStageClick,\"mousemove\":_vm.onStageMouseMove,\"mouseenter\":_vm.onStageMouseenter,\"mouseleave\":_vm.onStageMouseleave}},[_c('v-layer',{ref:\"layer\"},[_c('v-circle',{ref:\"circle\",attrs:{\"config\":_vm.configCircle}}),_c('v-rect',{ref:\"rect\",attrs:{\"config\":{\n                              x: 100,\n                              y: 100,\n                              width: 150,\n                              height: 150,\n                              fill: 'yellow',\n                              stroke:'blue',\n                              strokeWidth:5,\n                              //shadowBlur: 10,\n                              draggable:true,\n                              visible:false\n                          }}}),_c('v-line',{ref:\"line\",attrs:{\"config\":{\n                        points: [100,100,400,200],\n                        stroke: 'gray',\n                        strokeWidth: 5,\n                        lineCap: 'round',\n                        lineJoin: 'round',\n                        draggable:true,\n                        visible: false\n                      }}}),_c('v-shape',{ref:\"nice\",attrs:{\"config\":{\n                          sceneFunc: function(context, shape) {\n                            var x=-20;\n                            var y=-50;\n                            context.beginPath();\n                            context.moveTo(x+20, y+50);\n                            context.lineTo(x+220, y+80);\n                            context.quadraticCurveTo(x+150, y+100, x+260, y+170);\n                            context.closePath();\n                            context.fillStrokeShape(shape);\n                          },\n                          fill: '#00D2FF',\n                          stroke: 'black',\n                          strokeWidth: 4,\n                          visible: true,\n                          draggable:true,\n                          visible:false,\n                        }}}),_c('v-shape',{ref:\"ball\",attrs:{\"config\":{\n                          x:150,\n                          y:150,\n                          r:90,\n                          text:'1',\n                          fontSize:50,\n                          fill: 'aqua',\n                          stroke: 'black',\n                          textcolor:'red',\n                          strokeWidth: 1,\n                          draggable:true,  \n                          sel:false,      \n                          visible:false,\n                          sceneFunc: function (context, shape) {\n                            var fontSize=shape.getAttr('fontSize');//40;\n                            context.beginPath();\n                            context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\n                            context.fillStrokeShape(shape);\n                            var textcolor=shape.getAttr('textcolor');\n                            context.fillStyle=textcolor;//'white';\n                            context.textBaseline = 'middle'; \n                            context.textAlign = 'center';\n                            context.font=fontSize + \"px verdana\";//verdana//Times New Roman\n                            context.fillText((\"\" + (shape.getAttr('text'))), 0,0);\n\n                          }\n                        }}}),_c('v-shape',{ref:\"board\",attrs:{\"config\":{\n                        x:50,\n                        y:50,\n                        width:300,\n                        height:100,\n                        text:'Thức 101',\n                        fontSize:60,\n                        fill: 'yellow',\n                        stroke: 'red',\n                        strokeWidth: 1,\n                        draggable:true, \n                        visible:false,       \n                        sceneFunc: function (context, shape) {\n                          var fontSize=shape.getAttr('fontSize');\n                          context.beginPath();\n                          context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\n                          context.fillStrokeShape(shape);\n                          context.fillStyle='red';\n                          context.textBaseline = 'middle'; \n                          context.textAlign = 'center';\n                          context.font=fontSize + \"px Times New Roman\";\n                          context.fillText((\"\" + (shape.getAttr('text'))), shape.getAttr('width')/2,shape.getAttr('height')/2);\n                        }\n                      }}})],1)],1)],1)])]),_c('b-col',{attrs:{\"sm\":\"9\"}},[_vm._v(\" \"+_vm._s(_vm.msg)),_c('br'),_vm._v(_vm._s(_vm.hover)+\" \"),_c('div',{staticClass:\"row no-gutters border-top p-1\"},_vm._l((_vm.listData),function(x,i){return _c('div',{key:i,staticClass:\"mb-1 mr-1 col-sm-2\"},[_c('div',{class:(i==_vm.hover) ? 'border border-primary' : '',staticStyle:{\"position\":\"relative\"},on:{\"mouseover\":function($event){_vm.hover=i},\"mouseout\":function($event){_vm.hover=-1}}},[_c('img',{staticClass:\"img-thumbnail\",attrs:{\"src\":x.src},on:{\"click\":function($event){return _vm.onView(x.data)}}}),_c('button',{staticClass:\"m-1\",staticStyle:{\"position\":\"absolute\",\"bottom\":\"0\",\"right\":\"0\"},on:{\"click\":function($event){return _vm.onDelData(i)}}},[_vm._v(\"Del\")])])])}),0)])],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <raw-loader :mytxt=\" require('!raw-loader!./KonvaVueTpl3.vue').default \"></raw-loader> \r\n    <h1>This is KonvaVue</h1>\r\n    <b-row>\r\n      <b-col sm=\"3\" class=\"border-right\">\r\n        <div class=\"mb-1\">\r\n          <button class=\"mr-1\" @click=\"onDel\" :disabled=\" (Sel.length==1) ? false : true \" >Del</button>\r\n          <button class=\"mr-1\" @click=\"onLink\" :disabled=\" (Sel.length==2) ? false : true \" >{{(!unLink) ? 'Link' : 'UnLink'}}</button>\r\n          <button class=\"mr-1\" @click=\"onReset\" >Reset</button>\r\n          <button class=\"mr-1\" @click=\"onLoad\" >Load</button>\r\n          <button class=\"mr-1\" @click=\"onSave\" >Save</button>\r\n        </div>\r\n          \r\n          <div id=\"stage-parent\">\r\n            <div id=\"container\" class=\"border\">\r\n                <v-stage ref=\"stage\"\r\n                    @click=\"onStageClick\"\r\n                    @mousemove=\"onStageMouseMove\" \r\n                    @mouseenter=\"onStageMouseenter\"\r\n                    @mouseleave=\"onStageMouseleave\"\r\n                    :config=\"configKonva\" >\r\n                    <v-layer ref=\"layer\">\r\n                        <v-circle ref=\"circle\" :config=\"configCircle\"></v-circle>\r\n                        <v-rect ref=\"rect\" \r\n                            :config=\"{\r\n                                x: 100,\r\n                                y: 100,\r\n                                width: 150,\r\n                                height: 150,\r\n                                fill: 'yellow',\r\n                                stroke:'blue',\r\n                                strokeWidth:5,\r\n                                //shadowBlur: 10,\r\n                                draggable:true,\r\n                                visible:false\r\n                            }\"\r\n                        />\r\n                        <v-line ref=\"line\" :config=\"{\r\n                          points: [100,100,400,200],\r\n                          stroke: 'gray',\r\n                          strokeWidth: 5,\r\n                          lineCap: 'round',\r\n                          lineJoin: 'round',\r\n                          draggable:true,\r\n                          visible: false\r\n                        }\"></v-line>\r\n                        <v-shape ref=\"nice\"\r\n                          :config=\"{\r\n                            sceneFunc: function(context, shape) {\r\n                              let x=-20;\r\n                              let y=-50;\r\n                              context.beginPath();\r\n                              context.moveTo(x+20, y+50);\r\n                              context.lineTo(x+220, y+80);\r\n                              context.quadraticCurveTo(x+150, y+100, x+260, y+170);\r\n                              context.closePath();\r\n                              context.fillStrokeShape(shape);\r\n                            },\r\n                            fill: '#00D2FF',\r\n                            stroke: 'black',\r\n                            strokeWidth: 4,\r\n                            visible: true,\r\n                            draggable:true,\r\n                            visible:false,\r\n                          }\"\r\n                        />\r\n                        <v-shape ref=\"ball\"\r\n                          :config=\"{\r\n                            x:150,\r\n                            y:150,\r\n                            r:90,\r\n                            text:'1',\r\n                            fontSize:50,\r\n                            fill: 'aqua',\r\n                            stroke: 'black',\r\n                            textcolor:'red',\r\n                            strokeWidth: 1,\r\n                            draggable:true,  \r\n                            sel:false,      \r\n                            visible:false,\r\n                            sceneFunc: function (context, shape) {\r\n                              let fontSize=shape.getAttr('fontSize');//40;\r\n                              context.beginPath();\r\n                              context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\r\n                              context.fillStrokeShape(shape);\r\n                              let textcolor=shape.getAttr('textcolor');\r\n                              context.fillStyle=textcolor;//'white';\r\n                              context.textBaseline = 'middle'; \r\n                              context.textAlign = 'center';\r\n                              context.font=`${fontSize}px verdana`;//verdana//Times New Roman\r\n                              context.fillText(`${shape.getAttr('text')}`, 0,0);\r\n\r\n                            }\r\n                          }\"\r\n                        />\r\n                        <v-shape ref=\"board\" :config=\"{\r\n                          x:50,\r\n                          y:50,\r\n                          width:300,\r\n                          height:100,\r\n                          text:'Thức 101',\r\n                          fontSize:60,\r\n                          fill: 'yellow',\r\n                          stroke: 'red',\r\n                          strokeWidth: 1,\r\n                          draggable:true, \r\n                          visible:false,       \r\n                          sceneFunc: function (context, shape) {\r\n                            let fontSize=shape.getAttr('fontSize');\r\n                            context.beginPath();\r\n                            context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\r\n                            context.fillStrokeShape(shape);\r\n                            context.fillStyle='red';\r\n                            context.textBaseline = 'middle'; \r\n                            context.textAlign = 'center';\r\n                            context.font=`${fontSize}px Times New Roman`;\r\n                            context.fillText(`${shape.getAttr('text')}`, shape.getAttr('width')/2,shape.getAttr('height')/2);\r\n                          }\r\n                        }\">\r\n                        </v-shape>\r\n                    </v-layer>\r\n                </v-stage>\r\n            </div>\r\n          </div>\r\n\r\n      </b-col>\r\n      <b-col sm=\"9\">\r\n        {{msg}}<br>{{hover}}\r\n        <div class=\"row no-gutters border-top p-1\">\r\n          <div v-for=\"(x,i) in listData\" :key=\"i\" class=\"mb-1 mr-1 col-sm-2\">\r\n            <div :class=\" (i==hover) ? 'border border-primary' : '' \" style=\"position:relative\" @mouseover=\" hover=i \" @mouseout=\" hover=-1 \" >\r\n              <img :src=\" x.src \" @click=\"onView(x.data)\" class=\"img-thumbnail\" >\r\n              <button @click=\"onDelData(i)\" class=\"m-1\" style=\"position:absolute; bottom:0; right: 0;\">Del</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage=null;\r\nvar layer=null;\r\nexport default {\r\n  name: 'Tpl',\r\n  components: {\r\n  },\r\n  computed: {\r\n  \ttest () {\r\n    \treturn 'hello'\r\n    },\r\n  },\r\n  data(){\r\n    return{\r\n        msg:\"hello\",\r\n        configKonva: {\r\n          width: sceneWidth,\r\n          height: sceneHeight\r\n        },\r\n        configCircle: {\r\n          x: sceneWidth/2,\r\n          y: sceneHeight/2,\r\n          radius: 90,\r\n          fill: \"yellow\",\r\n          stroke: \"black\",\r\n          strokeWidth: 5,\r\n          draggable:true,\r\n          visible:false,\r\n        },\r\n        count:0,\r\n        p:{},\r\n\r\n\r\n\r\n        \r\n        arPoint:[],\r\n        Sel:[],\r\n        arSel:[],\r\n        unLink:false,\r\n        listData:[],\r\n        hover:-1,\r\n    }\r\n  },\r\n  mounted(){\r\n    this.$nextTick(function(){\r\n      layer=this.$refs.layer.getNode();\r\n      stage=this.$refs.stage.getNode();\r\n      window.addEventListener(\"resize\", this.fitStageIntoParentContainer);\r\n      this.fitStageIntoParentContainer();\r\n    })\r\n  },\r\n  created(){\r\n  },\r\n  methods:{\r\n    onDelData(i){\r\n    },\r\n    onView(data){\r\n    },\r\n    onSave(){\r\n    },\r\n    load(data){\r\n    },\r\n    onLoad(){\r\n    },\r\n    reset(){\r\n    },\r\n    onReset(){\r\n    },\r\n    onDel(){\r\n    },\r\n    onUnlink(id1,id2){\r\n    },\r\n    chkPairExist(id1,id2){\r\n    },\r\n    onLink(){\r\n    },\r\n    drawLine(){\r\n    },\r\n    draw(){\r\n      this.getListBall().forEach((x,i)=>{\r\n        this.drawBall(x);\r\n      })\r\n      this.msg={\r\n        p:this.p,\r\n        getSel:this.getSel()\r\n      }\r\n    },\r\n    createLine(name){\r\n      let line=this.$refs.line.getNode().clone();\r\n      line.visible(true);\r\n      line.name(name);\r\n      return line;\r\n    },\r\n    createBall(x,y,r,name,id){\r\n      let that=this;\r\n      let ball=this.$refs.ball.getNode().clone();\r\n      ball.visible(true);\r\n      ball.x(x);\r\n      ball.y(y);\r\n      ball.setAttr('r',r);\r\n      ball.fill(\"yellow\");\r\n      ball.stroke('black');\r\n      ball.name(name);\r\n      ball.id(id);\r\n      ball.setAttr(\"text\",id);\r\n      ball.on(\"click\",function(e){\r\n      });\r\n      ball.on(\"mouseenter\",function(e){\r\n      });\r\n      ball.on(\"mouseleave\",function(e){\r\n      });\r\n      ball.on(\"dragend\",function(e){\r\n      });\r\n      ball.on(\"dragmove\",function(e){\r\n      });\r\n      return ball;\r\n    },\r\n    drawBall(ball){\r\n      let sel=ball.getAttr(\"sel\");\r\n      let colorFill;\r\n      let colorText;\r\n      if(sel==false){\r\n        colorFill='yellow';\r\n        colorText='blue';\r\n      }else{\r\n        colorFill='blue';\r\n        colorText='white';\r\n      }\r\n      ball.fill(colorFill);\r\n      ball.setAttr('textcolor',colorText);\r\n    },\r\n    clearSel(){\r\n      this.getListBall().forEach((x,i)=>{\r\n        x.setAttr(\"sel\",false);\r\n      })\r\n    },\r\n    getSel(){\r\n      let ar=[];\r\n      this.getListBall().forEach((x,i)=>{\r\n        if(x.getAttr(\"sel\")==true){\r\n          ar.push( parseInt(x.id()));\r\n        }\r\n      })\r\n      return ar;\r\n    },\r\n    onStageClick(e){\r\n      let chk=e.target.name();\r\n      if(chk=='myball'){\r\n        let sel=e.target.getAttr(\"sel\");\r\n        e.target.setAttr(\"sel\",!sel);\r\n        let lSel=this.getSel();\r\n        let line=this.getLinePointer();\r\n        if(lSel.length==1){\r\n          line.visible(true);\r\n        }else{\r\n          line.visible(false);\r\n        }\r\n      }else{\r\n        let p=this.myGetMouse();\r\n        let id=this.count;\r\n        let ball=this.createBall(p.x,p.y,60,\"myball\",this.count.toString());\r\n        this.count++;\r\n        layer.add(ball);\r\n      }\r\n      this.draw();\r\n    },\r\n    onStageMouseMove(e){\r\n      let chk=e.target.name();\r\n      if(chk=='myball'){\r\n        if(this.getSel().length==1){\r\n          let id=this.getSel()[0];\r\n          let x1=this.getBallById(id).x();\r\n          let y1=this.getBallById(id).y();\r\n          let p={\r\n            x:e.target.x(),\r\n            y:e.target.y()\r\n          }\r\n          this.drawLinePointer(x1,y1,p.x,p.y);\r\n        }\r\n      }else{\r\n        if(this.getSel().length==1){\r\n          let id=this.getSel()[0];\r\n          let x1=this.getBallById(id).x();\r\n          let y1=this.getBallById(id).y();\r\n          let p=this.myGetMouse();\r\n          this.drawLinePointer(x1,y1,p.x,p.y);\r\n        }\r\n      }\r\n      this.p=this.myGetMouse();\r\n      this.draw();\r\n    },\r\n    onStageMouseenter(e){\r\n    },\r\n    onStageMouseleave(e){\r\n    },\r\n    getPointer(){\r\n      let pointer;\r\n      if(layer.find('.mypointer').length==0){\r\n        pointer=this.$refs.circle.getNode().clone();\r\n        pointer.name('mypointer');\r\n        pointer.radius(60);\r\n        pointer.fill('white');\r\n        layer.add(pointer);\r\n      }else{\r\n        pointer=layer.find('.mypointer')[0];\r\n      }\r\n      pointer.moveToBottom();\r\n      return pointer;\r\n    },\r\n    getLinePointer(){\r\n      let pointer;\r\n      if(layer.find('.mylinepointer').length==0){\r\n        pointer=this.$refs.line.getNode().clone();\r\n        pointer.points([]);\r\n        pointer.name('mylinepointer');\r\n        layer.add(pointer);\r\n      }else{\r\n        pointer=layer.find('.mylinepointer')[0];\r\n      }\r\n      pointer.moveToBottom();\r\n      return pointer;\r\n    },\r\n    drawLinePointer(x1,y1,x2,y2){\r\n      this.getLinePointer().points([x1,y1,x2,y2]);\r\n    },\r\n    getListRect(){ return layer.find(\".myrect\") },\r\n    getListLine(){ return layer.find(\".myline\") },\r\n    getListBall(){ return layer.find(\".myball\") },\r\n    getBallById(id){ return layer.find(`#${id}`)[0] },\r\n    myGetMouse() {\r\n      let scale=stage.scale().x;\r\n      var mousePos = stage.getPointerPosition();\r\n      var x = mousePos.x;\r\n      var y = mousePos.y;\r\n      var xx = Math.round(x / scale);\r\n      var yy = Math.round(y / scale);\r\n      return { x: xx, y: yy };\r\n    },\r\n    fitStageIntoParentContainer() {\r\n      var container = document.querySelector('#stage-parent');\r\n      var containerWidth = container.offsetWidth;\r\n      var scale = containerWidth / sceneWidth;\r\n      stage.width(sceneWidth * scale);\r\n      stage.height(sceneHeight * scale);\r\n      stage.scale({ x: scale, y: scale });\r\n      this.configKonva.width = sceneWidth * scale;\r\n      this.configKonva.height = sceneHeight * scale;\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./KonvaVueTpl3.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./KonvaVueTpl3.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./KonvaVueTpl3.vue?vue&type=template&id=ab15b6e4&scoped=true&\"\nimport script from \"./KonvaVueTpl3.vue?vue&type=script&lang=js&\"\nexport * from \"./KonvaVueTpl3.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ab15b6e4\",\n  null\n  \n)\n\nexport default component.exports","export default \"<template>\\r\\n  <div>\\r\\n    <raw-loader :mytxt=\\\" require('!raw-loader!./KonvaVueTpl3.vue').default \\\"></raw-loader> \\r\\n    <h1>This is KonvaVue</h1>\\r\\n    <b-row>\\r\\n      <b-col sm=\\\"3\\\" class=\\\"border-right\\\">\\r\\n        <div class=\\\"mb-1\\\">\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onDel\\\" :disabled=\\\" (Sel.length==1) ? false : true \\\" >Del</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onLink\\\" :disabled=\\\" (Sel.length==2) ? false : true \\\" >{{(!unLink) ? 'Link' : 'UnLink'}}</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onReset\\\" >Reset</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onLoad\\\" >Load</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onSave\\\" >Save</button>\\r\\n        </div>\\r\\n          \\r\\n          <div id=\\\"stage-parent\\\">\\r\\n            <div id=\\\"container\\\" class=\\\"border\\\">\\r\\n                <v-stage ref=\\\"stage\\\"\\r\\n                    @click=\\\"onStageClick\\\"\\r\\n                    @mousemove=\\\"onStageMouseMove\\\" \\r\\n                    @mouseenter=\\\"onStageMouseenter\\\"\\r\\n                    @mouseleave=\\\"onStageMouseleave\\\"\\r\\n                    :config=\\\"configKonva\\\" >\\r\\n                    <v-layer ref=\\\"layer\\\">\\r\\n                        <v-circle ref=\\\"circle\\\" :config=\\\"configCircle\\\"></v-circle>\\r\\n                        <v-rect ref=\\\"rect\\\" \\r\\n                            :config=\\\"{\\r\\n                                x: 100,\\r\\n                                y: 100,\\r\\n                                width: 150,\\r\\n                                height: 150,\\r\\n                                fill: 'yellow',\\r\\n                                stroke:'blue',\\r\\n                                strokeWidth:5,\\r\\n                                //shadowBlur: 10,\\r\\n                                draggable:true,\\r\\n                                visible:false\\r\\n                            }\\\"\\r\\n                        />\\r\\n                        <v-line ref=\\\"line\\\" :config=\\\"{\\r\\n                          points: [100,100,400,200],\\r\\n                          stroke: 'gray',\\r\\n                          strokeWidth: 5,\\r\\n                          lineCap: 'round',\\r\\n                          lineJoin: 'round',\\r\\n                          draggable:true,\\r\\n                          visible: false\\r\\n                        }\\\"></v-line>\\r\\n                        <v-shape ref=\\\"nice\\\"\\r\\n                          :config=\\\"{\\r\\n                            sceneFunc: function(context, shape) {\\r\\n                              let x=-20;\\r\\n                              let y=-50;\\r\\n                              context.beginPath();\\r\\n                              context.moveTo(x+20, y+50);\\r\\n                              context.lineTo(x+220, y+80);\\r\\n                              context.quadraticCurveTo(x+150, y+100, x+260, y+170);\\r\\n                              context.closePath();\\r\\n                              context.fillStrokeShape(shape);\\r\\n                            },\\r\\n                            fill: '#00D2FF',\\r\\n                            stroke: 'black',\\r\\n                            strokeWidth: 4,\\r\\n                            visible: true,\\r\\n                            draggable:true,\\r\\n                            visible:false,\\r\\n                          }\\\"\\r\\n                        />\\r\\n                        <v-shape ref=\\\"ball\\\"\\r\\n                          :config=\\\"{\\r\\n                            x:150,\\r\\n                            y:150,\\r\\n                            r:90,\\r\\n                            text:'1',\\r\\n                            fontSize:50,\\r\\n                            fill: 'aqua',\\r\\n                            stroke: 'black',\\r\\n                            textcolor:'red',\\r\\n                            strokeWidth: 1,\\r\\n                            draggable:true,  \\r\\n                            sel:false,      \\r\\n                            visible:false,\\r\\n                            sceneFunc: function (context, shape) {\\r\\n                              let fontSize=shape.getAttr('fontSize');//40;\\r\\n                              context.beginPath();\\r\\n                              context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\\r\\n                              context.fillStrokeShape(shape);\\r\\n                              let textcolor=shape.getAttr('textcolor');\\r\\n                              context.fillStyle=textcolor;//'white';\\r\\n                              context.textBaseline = 'middle'; \\r\\n                              context.textAlign = 'center';\\r\\n                              context.font=`${fontSize}px verdana`;//verdana//Times New Roman\\r\\n                              context.fillText(`${shape.getAttr('text')}`, 0,0);\\r\\n\\r\\n                            }\\r\\n                          }\\\"\\r\\n                        />\\r\\n                        <v-shape ref=\\\"board\\\" :config=\\\"{\\r\\n                          x:50,\\r\\n                          y:50,\\r\\n                          width:300,\\r\\n                          height:100,\\r\\n                          text:'Thức 101',\\r\\n                          fontSize:60,\\r\\n                          fill: 'yellow',\\r\\n                          stroke: 'red',\\r\\n                          strokeWidth: 1,\\r\\n                          draggable:true, \\r\\n                          visible:false,       \\r\\n                          sceneFunc: function (context, shape) {\\r\\n                            let fontSize=shape.getAttr('fontSize');\\r\\n                            context.beginPath();\\r\\n                            context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\\r\\n                            context.fillStrokeShape(shape);\\r\\n                            context.fillStyle='red';\\r\\n                            context.textBaseline = 'middle'; \\r\\n                            context.textAlign = 'center';\\r\\n                            context.font=`${fontSize}px Times New Roman`;\\r\\n                            context.fillText(`${shape.getAttr('text')}`, shape.getAttr('width')/2,shape.getAttr('height')/2);\\r\\n                          }\\r\\n                        }\\\">\\r\\n                        </v-shape>\\r\\n                    </v-layer>\\r\\n                </v-stage>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n      </b-col>\\r\\n      <b-col sm=\\\"9\\\">\\r\\n        {{msg}}<br>{{hover}}\\r\\n        <div class=\\\"row no-gutters border-top p-1\\\">\\r\\n          <div v-for=\\\"(x,i) in listData\\\" :key=\\\"i\\\" class=\\\"mb-1 mr-1 col-sm-2\\\">\\r\\n            <div :class=\\\" (i==hover) ? 'border border-primary' : '' \\\" style=\\\"position:relative\\\" @mouseover=\\\" hover=i \\\" @mouseout=\\\" hover=-1 \\\" >\\r\\n              <img :src=\\\" x.src \\\" @click=\\\"onView(x.data)\\\" class=\\\"img-thumbnail\\\" >\\r\\n              <button @click=\\\"onDelData(i)\\\" class=\\\"m-1\\\" style=\\\"position:absolute; bottom:0; right: 0;\\\">Del</button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </b-col>\\r\\n    </b-row>\\r\\n  </div>\\r\\n</template>\\r\\n<script>\\r\\nvar sceneWidth = 1500;\\r\\nvar sceneHeight = 1000;\\r\\nvar stage=null;\\r\\nvar layer=null;\\r\\nexport default {\\r\\n  name: 'Tpl',\\r\\n  components: {\\r\\n  },\\r\\n  computed: {\\r\\n  \\ttest () {\\r\\n    \\treturn 'hello'\\r\\n    },\\r\\n  },\\r\\n  data(){\\r\\n    return{\\r\\n        msg:\\\"hello\\\",\\r\\n        configKonva: {\\r\\n          width: sceneWidth,\\r\\n          height: sceneHeight\\r\\n        },\\r\\n        configCircle: {\\r\\n          x: sceneWidth/2,\\r\\n          y: sceneHeight/2,\\r\\n          radius: 90,\\r\\n          fill: \\\"yellow\\\",\\r\\n          stroke: \\\"black\\\",\\r\\n          strokeWidth: 5,\\r\\n          draggable:true,\\r\\n          visible:false,\\r\\n        },\\r\\n        count:0,\\r\\n        p:{},\\r\\n\\r\\n\\r\\n\\r\\n        \\r\\n        arPoint:[],\\r\\n        Sel:[],\\r\\n        arSel:[],\\r\\n        unLink:false,\\r\\n        listData:[],\\r\\n        hover:-1,\\r\\n    }\\r\\n  },\\r\\n  mounted(){\\r\\n    this.$nextTick(function(){\\r\\n      layer=this.$refs.layer.getNode();\\r\\n      stage=this.$refs.stage.getNode();\\r\\n      window.addEventListener(\\\"resize\\\", this.fitStageIntoParentContainer);\\r\\n      this.fitStageIntoParentContainer();\\r\\n    })\\r\\n  },\\r\\n  created(){\\r\\n  },\\r\\n  methods:{\\r\\n    onDelData(i){\\r\\n    },\\r\\n    onView(data){\\r\\n    },\\r\\n    onSave(){\\r\\n    },\\r\\n    load(data){\\r\\n    },\\r\\n    onLoad(){\\r\\n    },\\r\\n    reset(){\\r\\n    },\\r\\n    onReset(){\\r\\n    },\\r\\n    onDel(){\\r\\n    },\\r\\n    onUnlink(id1,id2){\\r\\n    },\\r\\n    chkPairExist(id1,id2){\\r\\n    },\\r\\n    onLink(){\\r\\n    },\\r\\n    drawLine(){\\r\\n    },\\r\\n    draw(){\\r\\n      this.getListBall().forEach((x,i)=>{\\r\\n        this.drawBall(x);\\r\\n      })\\r\\n      this.msg={\\r\\n        p:this.p,\\r\\n        getSel:this.getSel()\\r\\n      }\\r\\n    },\\r\\n    createLine(name){\\r\\n      let line=this.$refs.line.getNode().clone();\\r\\n      line.visible(true);\\r\\n      line.name(name);\\r\\n      return line;\\r\\n    },\\r\\n    createBall(x,y,r,name,id){\\r\\n      let that=this;\\r\\n      let ball=this.$refs.ball.getNode().clone();\\r\\n      ball.visible(true);\\r\\n      ball.x(x);\\r\\n      ball.y(y);\\r\\n      ball.setAttr('r',r);\\r\\n      ball.fill(\\\"yellow\\\");\\r\\n      ball.stroke('black');\\r\\n      ball.name(name);\\r\\n      ball.id(id);\\r\\n      ball.setAttr(\\\"text\\\",id);\\r\\n      ball.on(\\\"click\\\",function(e){\\r\\n      });\\r\\n      ball.on(\\\"mouseenter\\\",function(e){\\r\\n      });\\r\\n      ball.on(\\\"mouseleave\\\",function(e){\\r\\n      });\\r\\n      ball.on(\\\"dragend\\\",function(e){\\r\\n      });\\r\\n      ball.on(\\\"dragmove\\\",function(e){\\r\\n      });\\r\\n      return ball;\\r\\n    },\\r\\n    drawBall(ball){\\r\\n      let sel=ball.getAttr(\\\"sel\\\");\\r\\n      let colorFill;\\r\\n      let colorText;\\r\\n      if(sel==false){\\r\\n        colorFill='yellow';\\r\\n        colorText='blue';\\r\\n      }else{\\r\\n        colorFill='blue';\\r\\n        colorText='white';\\r\\n      }\\r\\n      ball.fill(colorFill);\\r\\n      ball.setAttr('textcolor',colorText);\\r\\n    },\\r\\n    clearSel(){\\r\\n      this.getListBall().forEach((x,i)=>{\\r\\n        x.setAttr(\\\"sel\\\",false);\\r\\n      })\\r\\n    },\\r\\n    getSel(){\\r\\n      let ar=[];\\r\\n      this.getListBall().forEach((x,i)=>{\\r\\n        if(x.getAttr(\\\"sel\\\")==true){\\r\\n          ar.push( parseInt(x.id()));\\r\\n        }\\r\\n      })\\r\\n      return ar;\\r\\n    },\\r\\n    onStageClick(e){\\r\\n      let chk=e.target.name();\\r\\n      if(chk=='myball'){\\r\\n        let sel=e.target.getAttr(\\\"sel\\\");\\r\\n        e.target.setAttr(\\\"sel\\\",!sel);\\r\\n        let lSel=this.getSel();\\r\\n        let line=this.getLinePointer();\\r\\n        if(lSel.length==1){\\r\\n          line.visible(true);\\r\\n        }else{\\r\\n          line.visible(false);\\r\\n        }\\r\\n      }else{\\r\\n        let p=this.myGetMouse();\\r\\n        let id=this.count;\\r\\n        let ball=this.createBall(p.x,p.y,60,\\\"myball\\\",this.count.toString());\\r\\n        this.count++;\\r\\n        layer.add(ball);\\r\\n      }\\r\\n      this.draw();\\r\\n    },\\r\\n    onStageMouseMove(e){\\r\\n      let chk=e.target.name();\\r\\n      if(chk=='myball'){\\r\\n        if(this.getSel().length==1){\\r\\n          let id=this.getSel()[0];\\r\\n          let x1=this.getBallById(id).x();\\r\\n          let y1=this.getBallById(id).y();\\r\\n          let p={\\r\\n            x:e.target.x(),\\r\\n            y:e.target.y()\\r\\n          }\\r\\n          this.drawLinePointer(x1,y1,p.x,p.y);\\r\\n        }\\r\\n      }else{\\r\\n        if(this.getSel().length==1){\\r\\n          let id=this.getSel()[0];\\r\\n          let x1=this.getBallById(id).x();\\r\\n          let y1=this.getBallById(id).y();\\r\\n          let p=this.myGetMouse();\\r\\n          this.drawLinePointer(x1,y1,p.x,p.y);\\r\\n        }\\r\\n      }\\r\\n      this.p=this.myGetMouse();\\r\\n      this.draw();\\r\\n    },\\r\\n    onStageMouseenter(e){\\r\\n    },\\r\\n    onStageMouseleave(e){\\r\\n    },\\r\\n    getPointer(){\\r\\n      let pointer;\\r\\n      if(layer.find('.mypointer').length==0){\\r\\n        pointer=this.$refs.circle.getNode().clone();\\r\\n        pointer.name('mypointer');\\r\\n        pointer.radius(60);\\r\\n        pointer.fill('white');\\r\\n        layer.add(pointer);\\r\\n      }else{\\r\\n        pointer=layer.find('.mypointer')[0];\\r\\n      }\\r\\n      pointer.moveToBottom();\\r\\n      return pointer;\\r\\n    },\\r\\n    getLinePointer(){\\r\\n      let pointer;\\r\\n      if(layer.find('.mylinepointer').length==0){\\r\\n        pointer=this.$refs.line.getNode().clone();\\r\\n        pointer.points([]);\\r\\n        pointer.name('mylinepointer');\\r\\n        layer.add(pointer);\\r\\n      }else{\\r\\n        pointer=layer.find('.mylinepointer')[0];\\r\\n      }\\r\\n      pointer.moveToBottom();\\r\\n      return pointer;\\r\\n    },\\r\\n    drawLinePointer(x1,y1,x2,y2){\\r\\n      this.getLinePointer().points([x1,y1,x2,y2]);\\r\\n    },\\r\\n    getListRect(){ return layer.find(\\\".myrect\\\") },\\r\\n    getListLine(){ return layer.find(\\\".myline\\\") },\\r\\n    getListBall(){ return layer.find(\\\".myball\\\") },\\r\\n    getBallById(id){ return layer.find(`#${id}`)[0] },\\r\\n    myGetMouse() {\\r\\n      let scale=stage.scale().x;\\r\\n      var mousePos = stage.getPointerPosition();\\r\\n      var x = mousePos.x;\\r\\n      var y = mousePos.y;\\r\\n      var xx = Math.round(x / scale);\\r\\n      var yy = Math.round(y / scale);\\r\\n      return { x: xx, y: yy };\\r\\n    },\\r\\n    fitStageIntoParentContainer() {\\r\\n      var container = document.querySelector('#stage-parent');\\r\\n      var containerWidth = container.offsetWidth;\\r\\n      var scale = containerWidth / sceneWidth;\\r\\n      stage.width(sceneWidth * scale);\\r\\n      stage.height(sceneHeight * scale);\\r\\n      stage.scale({ x: scale, y: scale });\\r\\n      this.configKonva.width = sceneWidth * scale;\\r\\n      this.configKonva.height = sceneHeight * scale;\\r\\n    },\\r\\n  }\\r\\n}\\r\\n</script>\\r\\n<style scoped>\\r\\n</style>\\r\\n\";"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","_v","staticClass","Sel","length","on","onDel","onLink","_s","unLink","onReset","onLoad","onSave","ref","configKonva","onStageClick","onStageMouseMove","onStageMouseenter","onStageMouseleave","configCircle","x","y","width","height","fill","stroke","strokeWidth","draggable","visible","points","lineCap","lineJoin","sceneFunc","context","shape","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fillStrokeShape","r","text","fontSize","textcolor","sel","getAttr","arc","Math","PI","fillStyle","textBaseline","textAlign","font","fillText","rect","msg","hover","_l","i","key","class","staticStyle","$event","src","onView","data","onDelData","staticRenderFns","sceneWidth","sceneHeight","stage","name","components","computed","test","radius","count","p","arPoint","arSel","listData","mounted","layer","window","created","methods","load","reset","onUnlink","chkPairExist","drawLine","draw","getSel","createLine","line","createBall","ball","drawBall","colorFill","colorText","clearSel","ar","e","getPointer","pointer","getLinePointer","drawLinePointer","getListRect","getListLine","getListBall","getBallById","myGetMouse","fitStageIntoParentContainer","component"],"sourceRoot":""}