{"version":3,"file":"js/2468.d42efa12.js","mappings":"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","sources":["webpack://vue_start_1/./src/views/Konva/KonvaVueRotate.vue?58d0","webpack://vue_start_1/src/views/Konva/KonvaVueRotate.vue","webpack://vue_start_1/./src/views/Konva/KonvaVueRotate.vue?bc26","webpack://vue_start_1/./src/views/Konva/KonvaVueRotate.vue?fc09","webpack://vue_start_1/./src/views/Konva/KonvaVueRotate.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./KonvaVueRotate.vue').default}}),_c('h1',[_vm._v(\"This is KonvaVue\")]),_c('b-row',[_c('b-col',{staticClass:\"border-right\",attrs:{\"sm\":\"3\"}},[_c('div',{staticClass:\"mb-1\"}),_c('div',{attrs:{\"id\":\"stage-parent\"}},[_c('div',{staticClass:\"border\",attrs:{\"id\":\"container\"}},[_c('v-stage',{ref:\"stage\",attrs:{\"config\":_vm.configKonva},on:{\"click\":_vm.onStageClick,\"mousemove\":_vm.onStageMouseMove,\"mouseenter\":_vm.onStageMouseenter,\"mouseleave\":_vm.onStageMouseleave}},[_c('v-layer',{ref:\"layer\"},[_c('v-circle',{ref:\"circle\",attrs:{\"config\":_vm.configCircle}}),_c('v-rect',{ref:\"rect\",attrs:{\"config\":{\n                              x: 100,\n                              y: 100,\n                              width: 100,\n                              height: 100,\n                              fill: 'yellow',\n                              stroke:'blue',\n                              strokeWidth:5,\n                              //shadowBlur: 10,\n                              draggable:true,\n                              visible:false\n                          }}}),_c('v-line',{ref:\"line\",attrs:{\"config\":{\n                        points: [100,100,400,200],\n                        stroke: 'gray',\n                        strokeWidth: 5,\n                        lineCap: 'round',\n                        lineJoin: 'round',\n                        draggable:true,\n                        visible: false\n                      }}}),_c('v-shape',{ref:\"nice\",attrs:{\"config\":{\n                          sceneFunc: function(context, shape) {\n                            var x=-20;\n                            var y=-50;\n                            context.beginPath();\n                            context.moveTo(x+20, y+50);\n                            context.lineTo(x+220, y+80);\n                            context.quadraticCurveTo(x+150, y+100, x+260, y+170);\n                            context.closePath();\n                            context.fillStrokeShape(shape);\n                          },\n                          fill: '#00D2FF',\n                          stroke: 'black',\n                          strokeWidth: 4,\n                          visible: true,\n                          draggable:true,\n                          visible:false,\n                        }}}),_c('v-shape',{ref:\"ball\",attrs:{\"config\":{\n                          x:150,\n                          y:150,\n                          r:90,\n                          text:'1',\n                          fontSize:50,\n                          fill: 'aqua',\n                          stroke: 'black',\n                          textcolor:'red',\n                          strokeWidth: 1,\n                          draggable:true,  \n                          sel:false,      \n                          visible:false,\n                          sceneFunc: function (context, shape) {\n                            var fontSize=shape.getAttr('fontSize');//40;\n                            context.beginPath();\n                            context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\n                            context.fillStrokeShape(shape);\n                            var textcolor=shape.getAttr('textcolor');\n                            context.fillStyle=textcolor;//'white';\n                            context.textBaseline = 'middle'; \n                            context.textAlign = 'center';\n                            context.font=fontSize + \"px verdana\";//verdana//Times New Roman\n                            context.fillText((\"\" + (shape.getAttr('text'))), 0,0);\n\n                          }\n                        }}}),_c('v-shape',{ref:\"board\",attrs:{\"config\":{\n                        x:50,\n                        y:50,\n                        width:300,\n                        height:100,\n                        text:'Thá»©c 101',\n                        fontSize:60,\n                        fill: 'yellow',\n                        stroke: 'red',\n                        strokeWidth: 1,\n                        draggable:true, \n                        visible:false,       \n                        sceneFunc: function (context, shape) {\n                          var fontSize=shape.getAttr('fontSize');\n                          context.beginPath();\n                          context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\n                          context.fillStrokeShape(shape);\n                          context.fillStyle='red';\n                          context.textBaseline = 'middle'; \n                          context.textAlign = 'center';\n                          context.font=fontSize + \"px Times New Roman\";\n                          context.fillText((\"\" + (shape.getAttr('text'))), shape.getAttr('width')/2,shape.getAttr('height')/2);\n                        }\n                      }}})],1)],1)],1)])]),_c('b-col',{attrs:{\"sm\":\"9\"}},[_vm._v(\" \"+_vm._s(_vm.msg)),_c('br')])],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <raw-loader :mytxt=\" require('!raw-loader!./KonvaVueRotate.vue').default \"></raw-loader> \r\n    <h1>This is KonvaVue</h1>\r\n    <b-row>\r\n      <b-col sm=\"3\" class=\"border-right\">\r\n          <div class=\"mb-1\">\r\n          </div>\r\n          <div id=\"stage-parent\">\r\n            <div id=\"container\" class=\"border\">\r\n                <v-stage ref=\"stage\"\r\n                    @click=\"onStageClick\"\r\n                    @mousemove=\"onStageMouseMove\" \r\n                    @mouseenter=\"onStageMouseenter\"\r\n                    @mouseleave=\"onStageMouseleave\"\r\n                    :config=\"configKonva\" >\r\n                    <v-layer ref=\"layer\">\r\n                        <v-circle ref=\"circle\" :config=\"configCircle\"></v-circle>\r\n                        <v-rect ref=\"rect\" \r\n                            :config=\"{\r\n                                x: 100,\r\n                                y: 100,\r\n                                width: 100,\r\n                                height: 100,\r\n                                fill: 'yellow',\r\n                                stroke:'blue',\r\n                                strokeWidth:5,\r\n                                //shadowBlur: 10,\r\n                                draggable:true,\r\n                                visible:false\r\n                            }\"\r\n                        />\r\n                        <v-line ref=\"line\" :config=\"{\r\n                          points: [100,100,400,200],\r\n                          stroke: 'gray',\r\n                          strokeWidth: 5,\r\n                          lineCap: 'round',\r\n                          lineJoin: 'round',\r\n                          draggable:true,\r\n                          visible: false\r\n                        }\"></v-line>\r\n                        <v-shape ref=\"nice\"\r\n                          :config=\"{\r\n                            sceneFunc: function(context, shape) {\r\n                              let x=-20;\r\n                              let y=-50;\r\n                              context.beginPath();\r\n                              context.moveTo(x+20, y+50);\r\n                              context.lineTo(x+220, y+80);\r\n                              context.quadraticCurveTo(x+150, y+100, x+260, y+170);\r\n                              context.closePath();\r\n                              context.fillStrokeShape(shape);\r\n                            },\r\n                            fill: '#00D2FF',\r\n                            stroke: 'black',\r\n                            strokeWidth: 4,\r\n                            visible: true,\r\n                            draggable:true,\r\n                            visible:false,\r\n                          }\"\r\n                        />\r\n                        <v-shape ref=\"ball\"\r\n                          :config=\"{\r\n                            x:150,\r\n                            y:150,\r\n                            r:90,\r\n                            text:'1',\r\n                            fontSize:50,\r\n                            fill: 'aqua',\r\n                            stroke: 'black',\r\n                            textcolor:'red',\r\n                            strokeWidth: 1,\r\n                            draggable:true,  \r\n                            sel:false,      \r\n                            visible:false,\r\n                            sceneFunc: function (context, shape) {\r\n                              let fontSize=shape.getAttr('fontSize');//40;\r\n                              context.beginPath();\r\n                              context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\r\n                              context.fillStrokeShape(shape);\r\n                              let textcolor=shape.getAttr('textcolor');\r\n                              context.fillStyle=textcolor;//'white';\r\n                              context.textBaseline = 'middle'; \r\n                              context.textAlign = 'center';\r\n                              context.font=`${fontSize}px verdana`;//verdana//Times New Roman\r\n                              context.fillText(`${shape.getAttr('text')}`, 0,0);\r\n\r\n                            }\r\n                          }\"\r\n                        />\r\n                        <v-shape ref=\"board\" :config=\"{\r\n                          x:50,\r\n                          y:50,\r\n                          width:300,\r\n                          height:100,\r\n                          text:'Thá»©c 101',\r\n                          fontSize:60,\r\n                          fill: 'yellow',\r\n                          stroke: 'red',\r\n                          strokeWidth: 1,\r\n                          draggable:true, \r\n                          visible:false,       \r\n                          sceneFunc: function (context, shape) {\r\n                            let fontSize=shape.getAttr('fontSize');\r\n                            context.beginPath();\r\n                            context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\r\n                            context.fillStrokeShape(shape);\r\n                            context.fillStyle='red';\r\n                            context.textBaseline = 'middle'; \r\n                            context.textAlign = 'center';\r\n                            context.font=`${fontSize}px Times New Roman`;\r\n                            context.fillText(`${shape.getAttr('text')}`, shape.getAttr('width')/2,shape.getAttr('height')/2);\r\n                          }\r\n                        }\">\r\n                        </v-shape>\r\n                    </v-layer>\r\n                </v-stage>\r\n            </div>\r\n          </div>\r\n\r\n      </b-col>\r\n      <b-col sm=\"9\">\r\n        {{msg}}<br>\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage=null;\r\nvar layer=null;\r\nexport default {\r\n  name: 'Tpl',\r\n  components: {\r\n  },\r\n  computed: {\r\n  \ttest () {\r\n    \treturn 'hello'\r\n    },\r\n  },\r\n  data(){\r\n    return{\r\n        msg:\"hello\",\r\n        configKonva: {\r\n          width: sceneWidth,\r\n          height: sceneHeight\r\n        },\r\n        configCircle: {\r\n          x: sceneWidth/2,\r\n          y: sceneHeight/2,\r\n          radius: 90,\r\n          fill: \"yellow\",\r\n          stroke: \"black\",\r\n          strokeWidth: 5,\r\n          draggable:true,\r\n          visible:true,\r\n        },\r\n        count:0,\r\n        p:{},\r\n\r\n\r\n\r\n        \r\n        arPoint:[],\r\n        Sel:[],\r\n        arSel:[],\r\n        unLink:false,\r\n        listData:[],\r\n        hover:-1,\r\n    }\r\n  },\r\n  mounted(){\r\n    this.$nextTick(function(){\r\n      layer=this.$refs.layer.getNode();\r\n      stage=this.$refs.stage.getNode();\r\n      window.addEventListener(\"resize\", this.fitStageIntoParentContainer);\r\n      this.fitStageIntoParentContainer();\r\n      let ami=this.createAnimate();\r\n      ami.start();\r\n    })\r\n  },\r\n  created(){\r\n  },\r\n  methods:{\r\n    createRect(x,y){\r\n      let rect=this.$refs.rect.getNode().clone();\r\n      rect.visible(true);\r\n      rect.x(x-rect.width()/2);\r\n      rect.y(y-rect.height()/2);\r\n      rect.name(\"myrect\");\r\n      return rect;\r\n    },\r\n    createAnimate(){\r\n      let c=this.$refs.circle.getNode();\r\n      let that=this;\r\n      var anim = new Konva.Animation(function (frame) {\r\n        that.getListRect().forEach((x,i)=>{\r\n          let p={\r\n            x:x.x()+x.width()/2,\r\n            y:x.y()+x.height()/2\r\n          }\r\n          //that.rotateAroundPoint(x,2,p);\r\n          //x.rotation(3);\r\n          that.rotateAroundPoint(x,2,{x:c.x(),y:c.y()});\r\n          let p2=that.myGetClientRect(x);\r\n          let p3={x:p2.x+p2.width/2,y:p2.y+p2.height/2}\r\n          that.rotateAroundPoint(x,5,p3);\r\n\r\n        })\r\n      }, layer);\r\n      return anim;\r\n    },\r\n    onStageClick(e){\r\n      let p=this.myGetMouse();\r\n      let rect=this.createRect(p.x,p.y);\r\n      layer.add(rect);\r\n    },\r\n    onStageMouseMove(e){\r\n    },\r\n    onStageMouseenter(e){\r\n    },\r\n    onStageMouseleave(e){\r\n    },\r\n    getListRect(){ return layer.find(\".myrect\") },\r\n    getListLine(){ return layer.find(\".myline\") },\r\n    getListBall(){ return layer.find(\".myball\") },\r\n    getBallById(id){ return layer.find(`#${id}`)[0] },\r\n    rotateAroundPoint(shape, angleDegrees, point) {\r\n        let angleRadians = angleDegrees * Math.PI / 180; // sin + cos require radians\r\n        const x =\r\n          point.x +\r\n          (shape.x() - point.x) * Math.cos(angleRadians) -\r\n          (shape.y() - point.y) * Math.sin(angleRadians);\r\n        const y =\r\n          point.y +\r\n          (shape.x() - point.x) * Math.sin(angleRadians) +\r\n          (shape.y() - point.y) * Math.cos(angleRadians);\r\n        shape.position({x: x, y: y});  // move the rotated shape in relation to the rotation point.\r\n        shape.rotation(shape.rotation() + angleDegrees); // rotate the shape in place around its natural rotation point\r\n    },\r\n    myGetClientRect(shape){\r\n        let scale2=stage.scale().x;\r\n        let r=shape.getClientRect();\r\n        r.x=r.x/scale2;\r\n        r.y=r.y/scale2;\r\n        r.width=r.width/scale2;\r\n        r.height=r.height/scale2;\r\n        return r;\r\n    },\r\n\r\n    myGetMouse() {\r\n      let scale=stage.scale().x;\r\n      var mousePos = stage.getPointerPosition();\r\n      var x = mousePos.x;\r\n      var y = mousePos.y;\r\n      var xx = Math.round(x / scale);\r\n      var yy = Math.round(y / scale);\r\n      return { x: xx, y: yy };\r\n    },\r\n    fitStageIntoParentContainer() {\r\n      var container = document.querySelector('#stage-parent');\r\n      var containerWidth = container.offsetWidth;\r\n      var scale = containerWidth / sceneWidth;\r\n      stage.width(sceneWidth * scale);\r\n      stage.height(sceneHeight * scale);\r\n      stage.scale({ x: scale, y: scale });\r\n      this.configKonva.width = sceneWidth * scale;\r\n      this.configKonva.height = sceneHeight * scale;\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./KonvaVueRotate.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./KonvaVueRotate.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./KonvaVueRotate.vue?vue&type=template&id=79757733&scoped=true&\"\nimport script from \"./KonvaVueRotate.vue?vue&type=script&lang=js&\"\nexport * from \"./KonvaVueRotate.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"79757733\",\n  null\n  \n)\n\nexport default component.exports","export default \"<template>\\r\\n  <div>\\r\\n    <raw-loader :mytxt=\\\" require('!raw-loader!./KonvaVueRotate.vue').default \\\"></raw-loader> \\r\\n    <h1>This is KonvaVue</h1>\\r\\n    <b-row>\\r\\n      <b-col sm=\\\"3\\\" class=\\\"border-right\\\">\\r\\n          <div class=\\\"mb-1\\\">\\r\\n          </div>\\r\\n          <div id=\\\"stage-parent\\\">\\r\\n            <div id=\\\"container\\\" class=\\\"border\\\">\\r\\n                <v-stage ref=\\\"stage\\\"\\r\\n                    @click=\\\"onStageClick\\\"\\r\\n                    @mousemove=\\\"onStageMouseMove\\\" \\r\\n                    @mouseenter=\\\"onStageMouseenter\\\"\\r\\n                    @mouseleave=\\\"onStageMouseleave\\\"\\r\\n                    :config=\\\"configKonva\\\" >\\r\\n                    <v-layer ref=\\\"layer\\\">\\r\\n                        <v-circle ref=\\\"circle\\\" :config=\\\"configCircle\\\"></v-circle>\\r\\n                        <v-rect ref=\\\"rect\\\" \\r\\n                            :config=\\\"{\\r\\n                                x: 100,\\r\\n                                y: 100,\\r\\n                                width: 100,\\r\\n                                height: 100,\\r\\n                                fill: 'yellow',\\r\\n                                stroke:'blue',\\r\\n                                strokeWidth:5,\\r\\n                                //shadowBlur: 10,\\r\\n                                draggable:true,\\r\\n                                visible:false\\r\\n                            }\\\"\\r\\n                        />\\r\\n                        <v-line ref=\\\"line\\\" :config=\\\"{\\r\\n                          points: [100,100,400,200],\\r\\n                          stroke: 'gray',\\r\\n                          strokeWidth: 5,\\r\\n                          lineCap: 'round',\\r\\n                          lineJoin: 'round',\\r\\n                          draggable:true,\\r\\n                          visible: false\\r\\n                        }\\\"></v-line>\\r\\n                        <v-shape ref=\\\"nice\\\"\\r\\n                          :config=\\\"{\\r\\n                            sceneFunc: function(context, shape) {\\r\\n                              let x=-20;\\r\\n                              let y=-50;\\r\\n                              context.beginPath();\\r\\n                              context.moveTo(x+20, y+50);\\r\\n                              context.lineTo(x+220, y+80);\\r\\n                              context.quadraticCurveTo(x+150, y+100, x+260, y+170);\\r\\n                              context.closePath();\\r\\n                              context.fillStrokeShape(shape);\\r\\n                            },\\r\\n                            fill: '#00D2FF',\\r\\n                            stroke: 'black',\\r\\n                            strokeWidth: 4,\\r\\n                            visible: true,\\r\\n                            draggable:true,\\r\\n                            visible:false,\\r\\n                          }\\\"\\r\\n                        />\\r\\n                        <v-shape ref=\\\"ball\\\"\\r\\n                          :config=\\\"{\\r\\n                            x:150,\\r\\n                            y:150,\\r\\n                            r:90,\\r\\n                            text:'1',\\r\\n                            fontSize:50,\\r\\n                            fill: 'aqua',\\r\\n                            stroke: 'black',\\r\\n                            textcolor:'red',\\r\\n                            strokeWidth: 1,\\r\\n                            draggable:true,  \\r\\n                            sel:false,      \\r\\n                            visible:false,\\r\\n                            sceneFunc: function (context, shape) {\\r\\n                              let fontSize=shape.getAttr('fontSize');//40;\\r\\n                              context.beginPath();\\r\\n                              context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\\r\\n                              context.fillStrokeShape(shape);\\r\\n                              let textcolor=shape.getAttr('textcolor');\\r\\n                              context.fillStyle=textcolor;//'white';\\r\\n                              context.textBaseline = 'middle'; \\r\\n                              context.textAlign = 'center';\\r\\n                              context.font=`${fontSize}px verdana`;//verdana//Times New Roman\\r\\n                              context.fillText(`${shape.getAttr('text')}`, 0,0);\\r\\n\\r\\n                            }\\r\\n                          }\\\"\\r\\n                        />\\r\\n                        <v-shape ref=\\\"board\\\" :config=\\\"{\\r\\n                          x:50,\\r\\n                          y:50,\\r\\n                          width:300,\\r\\n                          height:100,\\r\\n                          text:'Thá»©c 101',\\r\\n                          fontSize:60,\\r\\n                          fill: 'yellow',\\r\\n                          stroke: 'red',\\r\\n                          strokeWidth: 1,\\r\\n                          draggable:true, \\r\\n                          visible:false,       \\r\\n                          sceneFunc: function (context, shape) {\\r\\n                            let fontSize=shape.getAttr('fontSize');\\r\\n                            context.beginPath();\\r\\n                            context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\\r\\n                            context.fillStrokeShape(shape);\\r\\n                            context.fillStyle='red';\\r\\n                            context.textBaseline = 'middle'; \\r\\n                            context.textAlign = 'center';\\r\\n                            context.font=`${fontSize}px Times New Roman`;\\r\\n                            context.fillText(`${shape.getAttr('text')}`, shape.getAttr('width')/2,shape.getAttr('height')/2);\\r\\n                          }\\r\\n                        }\\\">\\r\\n                        </v-shape>\\r\\n                    </v-layer>\\r\\n                </v-stage>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n      </b-col>\\r\\n      <b-col sm=\\\"9\\\">\\r\\n        {{msg}}<br>\\r\\n      </b-col>\\r\\n    </b-row>\\r\\n  </div>\\r\\n</template>\\r\\n<script>\\r\\nvar sceneWidth = 1500;\\r\\nvar sceneHeight = 1000;\\r\\nvar stage=null;\\r\\nvar layer=null;\\r\\nexport default {\\r\\n  name: 'Tpl',\\r\\n  components: {\\r\\n  },\\r\\n  computed: {\\r\\n  \\ttest () {\\r\\n    \\treturn 'hello'\\r\\n    },\\r\\n  },\\r\\n  data(){\\r\\n    return{\\r\\n        msg:\\\"hello\\\",\\r\\n        configKonva: {\\r\\n          width: sceneWidth,\\r\\n          height: sceneHeight\\r\\n        },\\r\\n        configCircle: {\\r\\n          x: sceneWidth/2,\\r\\n          y: sceneHeight/2,\\r\\n          radius: 90,\\r\\n          fill: \\\"yellow\\\",\\r\\n          stroke: \\\"black\\\",\\r\\n          strokeWidth: 5,\\r\\n          draggable:true,\\r\\n          visible:true,\\r\\n        },\\r\\n        count:0,\\r\\n        p:{},\\r\\n\\r\\n\\r\\n\\r\\n        \\r\\n        arPoint:[],\\r\\n        Sel:[],\\r\\n        arSel:[],\\r\\n        unLink:false,\\r\\n        listData:[],\\r\\n        hover:-1,\\r\\n    }\\r\\n  },\\r\\n  mounted(){\\r\\n    this.$nextTick(function(){\\r\\n      layer=this.$refs.layer.getNode();\\r\\n      stage=this.$refs.stage.getNode();\\r\\n      window.addEventListener(\\\"resize\\\", this.fitStageIntoParentContainer);\\r\\n      this.fitStageIntoParentContainer();\\r\\n      let ami=this.createAnimate();\\r\\n      ami.start();\\r\\n    })\\r\\n  },\\r\\n  created(){\\r\\n  },\\r\\n  methods:{\\r\\n    createRect(x,y){\\r\\n      let rect=this.$refs.rect.getNode().clone();\\r\\n      rect.visible(true);\\r\\n      rect.x(x-rect.width()/2);\\r\\n      rect.y(y-rect.height()/2);\\r\\n      rect.name(\\\"myrect\\\");\\r\\n      return rect;\\r\\n    },\\r\\n    createAnimate(){\\r\\n      let c=this.$refs.circle.getNode();\\r\\n      let that=this;\\r\\n      var anim = new Konva.Animation(function (frame) {\\r\\n        that.getListRect().forEach((x,i)=>{\\r\\n          let p={\\r\\n            x:x.x()+x.width()/2,\\r\\n            y:x.y()+x.height()/2\\r\\n          }\\r\\n          //that.rotateAroundPoint(x,2,p);\\r\\n          //x.rotation(3);\\r\\n          that.rotateAroundPoint(x,2,{x:c.x(),y:c.y()});\\r\\n          let p2=that.myGetClientRect(x);\\r\\n          let p3={x:p2.x+p2.width/2,y:p2.y+p2.height/2}\\r\\n          that.rotateAroundPoint(x,5,p3);\\r\\n\\r\\n        })\\r\\n      }, layer);\\r\\n      return anim;\\r\\n    },\\r\\n    onStageClick(e){\\r\\n      let p=this.myGetMouse();\\r\\n      let rect=this.createRect(p.x,p.y);\\r\\n      layer.add(rect);\\r\\n    },\\r\\n    onStageMouseMove(e){\\r\\n    },\\r\\n    onStageMouseenter(e){\\r\\n    },\\r\\n    onStageMouseleave(e){\\r\\n    },\\r\\n    getListRect(){ return layer.find(\\\".myrect\\\") },\\r\\n    getListLine(){ return layer.find(\\\".myline\\\") },\\r\\n    getListBall(){ return layer.find(\\\".myball\\\") },\\r\\n    getBallById(id){ return layer.find(`#${id}`)[0] },\\r\\n    rotateAroundPoint(shape, angleDegrees, point) {\\r\\n        let angleRadians = angleDegrees * Math.PI / 180; // sin + cos require radians\\r\\n        const x =\\r\\n          point.x +\\r\\n          (shape.x() - point.x) * Math.cos(angleRadians) -\\r\\n          (shape.y() - point.y) * Math.sin(angleRadians);\\r\\n        const y =\\r\\n          point.y +\\r\\n          (shape.x() - point.x) * Math.sin(angleRadians) +\\r\\n          (shape.y() - point.y) * Math.cos(angleRadians);\\r\\n        shape.position({x: x, y: y});  // move the rotated shape in relation to the rotation point.\\r\\n        shape.rotation(shape.rotation() + angleDegrees); // rotate the shape in place around its natural rotation point\\r\\n    },\\r\\n    myGetClientRect(shape){\\r\\n        let scale2=stage.scale().x;\\r\\n        let r=shape.getClientRect();\\r\\n        r.x=r.x/scale2;\\r\\n        r.y=r.y/scale2;\\r\\n        r.width=r.width/scale2;\\r\\n        r.height=r.height/scale2;\\r\\n        return r;\\r\\n    },\\r\\n\\r\\n    myGetMouse() {\\r\\n      let scale=stage.scale().x;\\r\\n      var mousePos = stage.getPointerPosition();\\r\\n      var x = mousePos.x;\\r\\n      var y = mousePos.y;\\r\\n      var xx = Math.round(x / scale);\\r\\n      var yy = Math.round(y / scale);\\r\\n      return { x: xx, y: yy };\\r\\n    },\\r\\n    fitStageIntoParentContainer() {\\r\\n      var container = document.querySelector('#stage-parent');\\r\\n      var containerWidth = container.offsetWidth;\\r\\n      var scale = containerWidth / sceneWidth;\\r\\n      stage.width(sceneWidth * scale);\\r\\n      stage.height(sceneHeight * scale);\\r\\n      stage.scale({ x: scale, y: scale });\\r\\n      this.configKonva.width = sceneWidth * scale;\\r\\n      this.configKonva.height = sceneHeight * scale;\\r\\n    },\\r\\n  }\\r\\n}\\r\\n</script>\\r\\n<style scoped>\\r\\n</style>\\r\\n\";"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","_v","staticClass","ref","configKonva","on","onStageClick","onStageMouseMove","onStageMouseenter","onStageMouseleave","configCircle","x","y","width","height","fill","stroke","strokeWidth","draggable","visible","points","lineCap","lineJoin","sceneFunc","context","shape","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fillStrokeShape","r","text","fontSize","textcolor","sel","getAttr","arc","Math","PI","fillStyle","textBaseline","textAlign","font","fillText","rect","_s","msg","staticRenderFns","sceneWidth","sceneHeight","stage","name","components","computed","test","data","radius","count","p","arPoint","Sel","arSel","unLink","listData","hover","mounted","layer","window","ami","created","methods","createRect","createAnimate","that","getListRect","getListLine","getListBall","getBallById","rotateAroundPoint","point","myGetClientRect","myGetMouse","fitStageIntoParentContainer","component"],"sourceRoot":""}