"use strict";(self["webpackChunkvue_start_1"]=self["webpackChunkvue_start_1"]||[]).push([[5481],{25481:function(t,e,r){r.r(e),r.d(e,{default:function(){return v}});var a=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"home"},[a("raw-loader",{attrs:{mytxt:r(95888).Z}}),a("h1",[t._v("This is TestNDClaim")]),a("b-row",[a("b-col",{attrs:{md:"4"}},[a("b-img",{attrs:{src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQdVTcxFVJTxqNW7ujs-W2XHHaryQ6_w-OBWw&usqp=CAU",fluid:"",alt:"Responsive image"}})],1),a("b-col",{attrs:{md:"8"}},t._l(t.claimNames,(function(e){return a("div",{key:e.Id},[a("h3",{staticClass:"bg-light p-2"},[t._v("Claim Name : ["+t._s(e)+"]")]),a("NDClaimCom",{attrs:{claimname:e}})],1)})),0)],1)],1)},n=[],i=r(70790),s=r(53009),l=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",[r("button",{on:{click:t.OnAdd}},[t._v("Add")]),r("form",{on:{submit:function(e){return e.stopPropagation(),e.preventDefault(),t.onSave.apply(null,arguments)}}},[r("b-table",{ref:"mytable",attrs:{small:"",items:t.myProvider,fields:t.fields},scopedSlots:t._u([{key:"cell()",fn:function(e){var a=e.value,n=e.item,i=e.field.key;return[t.sel[t.pri]!=n[t.pri]?[0!=n[t.pri]?[i==t.pri?[t._v(" "+t._s(a)+" ")]:t._e(),"UId"==i?[t._v(" "+t._s(a)+" ")]:t._e(),"ClaimType"==i?[t._v(" "+t._s(a)+" ")]:t._e(),"Act"==i?[r("b-form-checkbox",{staticClass:"my-checkbox",attrs:{disabled:!0,name:i,value:"true","unchecked-value":"false"},model:{value:n[i],callback:function(e){t.$set(n,i,e)},expression:"item[key]"}})]:t._e()]:t._e()]:t._e(),t.sel[t.pri]==n[t.pri]||0==n[t.pri]?[i==t.pri?[r("span",[t._v(t._s(a))])]:t._e(),"UId"==i?[r("v-select",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{danger:t.errors.has(i)},attrs:{name:i,reduce:function(t){return t.id},options:t.NDcombos,"has-error":t.errors.has(i)},model:{value:n[i],callback:function(e){t.$set(n,i,e)},expression:"item[key]"}})]:t._e(),"ClaimType"==i?[r("v-select",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{danger:t.errors.has(i)},attrs:{name:i,reduce:function(t){return t.id},options:t.ClaimTypes,"has-error":t.errors.has(i)},model:{value:n[i],callback:function(e){t.$set(n,i,e)},expression:"item[key]"}})]:t._e(),"Act"==i?[r("b-form-checkbox",{staticClass:"my-checkbox",attrs:{name:i,value:"true","unchecked-value":"false"},model:{value:n[i],callback:function(e){t.$set(n,i,e)},expression:"item[key]"}})]:t._e()]:t._e()]}},{key:"cell(cmd)",fn:function(e){return[0==e.item[t.pri]?[r("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(r){return t.OnSave(e.item)}}},[r("b-icon-hand-thumbs-up")],1),r("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(r){return t.OnCancel(e.item)}}},[r("b-icon-file-x")],1)]:[t.sel[t.pri]!=e.item[t.pri]?r("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(r){return t.OnEdit(e.item)}}},[r("b-icon-pencil-square")],1):t._e(),t.sel[t.pri]!=e.item[t.pri]?r("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(r){return t.OnDel(e.item)}}},[r("b-icon-trash")],1):t._e(),t.sel[t.pri]==e.item[t.pri]?r("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(r){return t.OnSave(e.item)}}},[r("b-icon-hand-thumbs-up")],1):t._e(),t.sel[t.pri]==e.item[t.pri]?r("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(r){return t.OnCancel(e.item)}}},[r("b-icon-file-x")],1):t._e()]]}}])})],1)])},m=[],u=r(12954),c=r(20144),o=r(19938),h=r.n(o);c["default"].use(u.ZP,{classes:!0,fieldsBagName:"veeFields"}),c["default"].component("v-select",h());var d={props:["claimname"],components:{},mounted(){},data(){return{pri:"Id",sel:{},adding:!1,ClaimTypes:[],ClaimNames:[],NDcombos:[],url:"/api/NguoiDungClaim4",items:[{Id:1,Ten:"thuc 101"},{Id:2,Ten:"thuc 102"},{Id:3,Ten:"thuc 103"},{Id:4,Ten:"thuc 104"}],fields:[{key:"Id",sortable:!0,thClass:"text-center",tdClass:"align-middle",thStyle:{width:"8%"}},{key:"UId",formatter:(t,e,r)=>{let a="",n=this.NDcombos,i=n.findIndex((e=>e.id==t));return i>=0&&(a=n[i].label),a},sortable:!0,thClass:"text-left",tdClass:"align-middle",thStyle:{width:"30%"}},{key:"ClaimType",sortable:!0,thClass:"text-left",tdClass:"align-middle",thStyle:{width:"30%"}},{key:"Act",sortable:!0,thClass:"text-center",tdClass:"align-middle text-center",thStyle:{width:"10%"}},{key:"Cmd",sortable:!0,thClass:"text-center",tdClass:"align-middle text-center",thStyle:{width:"22%"}}]}},mounted(){},methods:{myProvider(){let t=`/api/NguoiDungClaim4/GetListByClaimName?ClaimName=${this.claimname}`;return i.Z.get(t).then((t=>{if(this.GetComboClaimName(),this.GetComboClaimType(),this.GetComboNguoiDung(),1==this.adding){let e={};e[this.pri]=0,e["UId"]=null,e["ClaimType"]=null,e["ClaimName"]=this.claimname,e["Act"]=!1,t.data.unshift(e)}return t.data}))},OnAdd(){this.adding=!0,this.$refs.mytable.refresh()},doCancel(t){for(let e in t)t[e]!=this.sel[e]&&(t[e]=this.sel[e])},OnCancel(t){if(0==t[this.pri]){let e=this.items.findIndex((e=>e[this.pri]==t[this.pri]));this.items.splice(e,1),this.adding=!1,this.$refs.mytable.refresh()}else this.doCancel(t),this.sel={}},OnEdit(t){this.sel=JSON.parse(JSON.stringify(t))},OnDel(t){this.Del(t[this.pri])},OnSave(t){this.$validator.validateAll().then((e=>{if(!e)return void this.toast("Không hợp lệ");let r=JSON.parse(JSON.stringify(t));0==r[this.pri]?this.Add(r):this.Update(r)}))},toast(t,e=null){this.$bvToast.toast(t,{title:"Information",variant:e,solid:!0})},async Add(t){return await i.Z.post(`${this.url}/Add`,t).then((t=>{this.toast(`${t.data.msg}`),this.adding=!1,this.$refs.mytable.refresh()})).catch((t=>{s.Z.XuLyErr(t)}))},async Update(t){return await i.Z.post(`${this.url}/Update`,t).then((t=>{this.toast(`${t.data.msg}`),this.sel={},this.$refs.mytable.refresh()})).catch((t=>{s.Z.XuLyErr(t)}))},async Del(t){return await i.Z.get(`${this.url}/Delete?id=${t}`).then((t=>{this.$refs.mytable.refresh()})).catch((t=>{s.Z.XuLyErr(t)}))},async getById(t){return await i.Z.get(`${this.url}/GetById?id=${t}`).then((t=>{alert(JSON.stringify(t))})).catch((t=>{s.Z.XuLyErr(t)}))},async GetComboClaimType(){return await i.Z.get("/api/NguoiDung4/GetComboClaimType").then((t=>{this.ClaimTypes=t.data})).catch((t=>{s.Z.XuLyErr(t)}))},async GetComboClaimName(){return await i.Z.get("/api/NguoiDung4/GetComboClaimName").then((t=>{this.ClaimNames=t.data})).catch((t=>{s.Z.XuLyErr(t)}))},async GetComboNguoiDung(){return await i.Z.get("/api/NguoiDung4/GetComboNguoiDung").then((t=>{this.NDcombos=t.data})).catch((t=>{}))}}},y=d,p=r(1001),C=(0,p.Z)(y,l,m,!1,null,null,null),g=C.exports,f={components:{NDClaimCom:g},data(){return{ds:[],url:"/api/NguoiDungClaim4",claimNames:[]}},mounted(){this.getClaimNames()},methods:{async GetListClaimName(){return await i.Z.get(`${this.url}/GetAll`).then((t=>{alert(JSON.stringify(t))})).catch((t=>{s.Z.XuLyErr(t)}))},async GetAll(){return await i.Z.get(`${this.url}/GetAll`).then((t=>{this.ds=t.data.list})).catch((t=>{s.Z.XuLyErr(t)}))},async Add(t){return await i.Z.post(`${this.url}/Add`,t).then((t=>{this.GetAll()})).catch((t=>{s.Z.XuLyErr(t)}))},async Update(t){return await i.Z.post(`${this.url}/Update`,t).then((t=>{this.GetAll()})).catch((t=>{s.Z.XuLyErr(t)}))},async Del(t){return await i.Z.get(`${this.url}/Delete?id=${t}`).then((t=>{alert(JSON.stringify(t)),this.GetAll()})).catch((t=>{s.Z.XuLyErr(t)}))},async getById(t){return await i.Z.get(`${this.url}/GetById?id=${t}`).then((t=>{})).catch((t=>{s.Z.XuLyErr(t)}))},async getClaimTypes(){return await i.Z.get("/api/NguoiDung4/GetClaimTypes").then((t=>{})).catch((t=>{s.Z.XuLyErr(t)}))},async getClaimNames(){return await i.Z.get("/api/NguoiDung4/GetClaimNames").then((t=>{this.claimNames=t.data})).catch((t=>{s.Z.XuLyErr(t)}))},async GetListByClaimName(t){return await i.Z.get(`/api/NguoiDungClaim4/GetListByClaimName?ClaimName=${t}`).then((t=>{})).catch((t=>{s.Z.XuLyErr(t)}))}}},N=f,b=(0,p.Z)(N,a,n,!1,null,null,null),v=b.exports},95888:function(t,e){e["Z"]='<template>\r\n    <div class="home">\r\n        <raw-loader :mytxt="require(\'!raw-loader!./UserClaims.vue\').default"></raw-loader>\r\n        <h1>This is TestNDClaim</h1>\r\n        <b-row>\r\n            <b-col md="4">\r\n                <b-img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQdVTcxFVJTxqNW7ujs-W2XHHaryQ6_w-OBWw&usqp=CAU" fluid alt="Responsive image"></b-img>   \r\n            </b-col>\r\n            <b-col md="8">\r\n                <div v-for="claimName in claimNames" :key="claimName.Id">\r\n                    <h3 class="bg-light p-2">Claim Name : [{{ claimName }}]</h3>\r\n                    <NDClaimCom :claimname="claimName"></NDClaimCom>\r\n                </div>\r\n            </b-col>\r\n        </b-row>\r\n    </div>\r\n</template>\r\n<script>\r\nimport fetchClient from \'@/fetchClient\';\r\nimport TumLum from \'@/TumLum\';\r\nimport NDClaimCom from "@/views/NguoiDung/UserClaimsCom.vue";\r\nexport default {\r\n    components: {\r\n        NDClaimCom\r\n    },\r\n    data(){\r\n        return{\r\n            ds:[],\r\n            url:`/api/NguoiDungClaim4`,\r\n            claimNames:[]\r\n        }\r\n    },\r\n    mounted(){\r\n        /*\r\n        let r= { \r\n            "Id": 0, \r\n            "UId": 1, \r\n            "ClaimType": "Them", \r\n            "ClaimName": "Ban" \r\n        }\r\n        { "Id": 1, "UId": 1, "ClaimType": "Them", "ClaimName": "Ban" }         \r\n        this.Add(r);\r\n        let r= { \r\n            "Id": 1, \r\n            "UId": 1, \r\n            "ClaimType": "Themsfsf", \r\n            "ClaimName": "Bansfsf" \r\n        }\r\n         this.Update(r);     \r\n        */\r\n        //this.Del(1);\r\n        //this.GetAll();\r\n        this.getClaimNames();\r\n        //this.GetListByClaimName(\'Ban\');\r\n    },\r\n    methods: {\r\n        async GetListClaimName() {\r\n            return await fetchClient.get(`${this.url}/GetAll`)\r\n                .then(res => {\r\n                    alert(JSON.stringify(res));\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async GetAll() {\r\n            return await fetchClient.get(`${this.url}/GetAll`)\r\n                .then(res => {\r\n                    this.ds=res.data.list;\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async Add(r) {\r\n            return await fetchClient.post(`${this.url}/Add`, r)\r\n                .then(res => {\r\n                    this.GetAll();\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async Update(r) {\r\n            return await fetchClient.post(`${this.url}/Update`, r)\r\n                .then(res => {\r\n                    this.GetAll();\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async Del(id) {\r\n            return await fetchClient.get(`${this.url}/Delete?id=${id}`)\r\n                .then(res => {\r\n                    alert(JSON.stringify(res));\r\n                    this.GetAll();\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async getById(id) {\r\n            return await fetchClient.get(`${this.url}/GetById?id=${id}`)\r\n                .then(res => {\r\n                    //alert(JSON.stringify(res));\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async getClaimTypes() {\r\n            return await fetchClient.get(`/api/NguoiDung4/GetClaimTypes`)\r\n                .then(res => {\r\n                    //alert(JSON.stringify(res));\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async getClaimNames() {\r\n            return await fetchClient.get(`/api/NguoiDung4/GetClaimNames`)\r\n                .then(res => {\r\n                    this.claimNames=res.data;\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n        async GetListByClaimName(claimName) {\r\n            return await fetchClient.get(`/api/NguoiDungClaim4/GetListByClaimName?ClaimName=${claimName}`)\r\n                .then(res => {\r\n                    //alert(JSON.stringify(res));\r\n                })\r\n                .catch((err) => {\r\n                    TumLum.XuLyErr(err);\r\n                });\r\n        },\r\n    }\r\n}\r\n<\/script>\r\n  '},53009:function(t,e){e["Z"]={XuLyErr(t){let e=JSON.parse(JSON.stringify(t)).status;if(400==e){let e=JSON.parse(JSON.stringify(t.response)).data.message;alert(e)}else t.response?401==t.response.status?alert("Chưa đăng nhập hoặc token hết hạn"):403==t.response.status&&alert("Bạn ko có quyền"):t.request?alert(JSON.stringify(t.request)):t.message&&alert(JSON.stringify(t.message))}}},70790:function(t,e,r){var a=r(9669),n=r.n(a);const i=()=>{const t={baseURL:"",method:"get",headers:{"Content-Type":"application/json;charset=utf-8"}};let e=n().create(t);return e.interceptors.request.use((function(t){const e=localStorage.getItem("token");return t.headers.Authorization=e?`Bearer ${e}`:"",t})),e};e["Z"]=i()}}]);
//# sourceMappingURL=5481.5a0a1540.js.map