{"version":3,"file":"js/3999-legacy.32237f32.js","mappings":"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","sources":["webpack://vue_start_1/./src/views/Tabulator2/Ban2Ajax.vue?92b2","webpack://vue_start_1/src/views/Tabulator2/Ban2Ajax.vue","webpack://vue_start_1/./src/views/Tabulator2/Ban2Ajax.vue?6a81","webpack://vue_start_1/./src/views/Tabulator2/Ban2Ajax.vue?207e","webpack://vue_start_1/./node_modules/core-js/modules/es.array.find.js","webpack://vue_start_1/./node_modules/core-js/modules/es.array.splice.js","webpack://vue_start_1/./node_modules/core-js/modules/es.object.keys.js","webpack://vue_start_1/./src/views/Tabulator2/Ban2Ajax.vue","webpack://vue_start_1/./src/func/MyLoad.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./Ban2Ajax.vue').default}}),_vm._v(\" \"+_vm._s(_vm.msg)),_c('br'),_vm._v(\" sel : \"+_vm._s(_vm.sel)),_c('br'),_vm._v(\" \"+_vm._s(_vm.tableData)+\" \"),_c('div',{staticClass:\"mb-1\"},[_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onAdd}},[_vm._v(\"Add\")]),_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onTest}},[_vm._v(\"Test\")])]),_c('div',{ref:\"table\"}),_c('b-modal',{ref:\"my-modal2\",attrs:{\"id\":\"modal-1\",\"size\":\"sm\",\"no-close-on-backdrop\":true,\"hide-footer\":\"\",\"title\":\"BootstrapVue\"}},[_c('form',{on:{\"submit\":function($event){$event.stopPropagation();$event.preventDefault();return _vm.onSaveModal.apply(null, arguments)}}},[_c('div',[_c('div',{staticClass:\"form-group row\"},[_c('label',{staticClass:\"col-sm-4 col-form-label\"},[_vm._v(\"Id\")]),_c('div',{staticClass:\"col-sm-8\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.r.id),expression:\"r.id\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\",\"disabled\":\"\"},domProps:{\"value\":(_vm.r.id)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.r, \"id\", $event.target.value)}}})])]),_c('div',{staticClass:\"form-group row\"},[_c('label',{staticClass:\"col-sm-4 col-form-label\"},[_vm._v(\" Name \")]),_c('div',{staticClass:\"col-sm-8\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.r.name),expression:\"r.name\"},{name:\"validate\",rawName:\"v-validate\",value:('required'),expression:\"'required'\"}],class:{\n                            'form-control': true,\n                            'ko-hop-le': _vm.errors.has('name'),\n                        },attrs:{\"type\":\"text\",\"name\":\"name\",\"autocomplete\":\"off\"},domProps:{\"value\":(_vm.r.name)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.r, \"name\", $event.target.value)}}})])]),_c('div',{staticClass:\"form-group row\"},[_c('label',{staticClass:\"col-sm-4 col-form-label\"},[_vm._v(\" Ngay \")]),_c('div',{staticClass:\"col-sm-8\"},[_c('b-form-datepicker',{directives:[{name:\"validate\",rawName:\"v-validate\",value:('required'),expression:\"'required'\"}],staticClass:\"mb-2\",attrs:{\"name\":\"ngay\",\"date-format-options\":{ year: 'numeric', month: 'numeric', day: 'numeric' },\"locale\":\"vi\"},model:{value:(_vm.r.ngay),callback:function ($$v) {_vm.$set(_vm.r, \"ngay\", $$v)},expression:\"r.ngay\"}})],1)]),_c('div',{staticClass:\"form-group row\"},[_c('label',{staticClass:\"col-sm-4 col-form-label\"},[_vm._v(\" Act \")]),_c('div',{staticClass:\"col-sm-8\"},[_c('b-form-checkbox',{attrs:{\"name\":\"checkbox-1\",\"value\":\"true\",\"unchecked-value\":\"false\"},on:{\"change\":_vm.ChangeAct},model:{value:(_vm.r.act),callback:function ($$v) {_vm.$set(_vm.r, \"act\", $$v)},expression:\"r.act\"}},[_vm._v(\" Active \")])],1)]),_c('div',{staticClass:\"form-group row\"},[_c('label',{staticClass:\"col-sm-4 col-form-label\"},[_vm._v(\" Thành phố \"+_vm._s(_vm.errors.has('tp'))+\" \")]),_c('div',{staticClass:\"col-sm-8\"},[_c('v-select',{directives:[{name:\"validate\",rawName:\"v-validate\",value:('required'),expression:\"'required'\"}],class:{ danger: _vm.errors.has('tp') },attrs:{\"name\":\"tp\",\"reduce\":function (option) { return option.id; },\"options\":_vm.tps,\"has-error\":_vm.errors.has('tp')},model:{value:(_vm.r.tp),callback:function ($$v) {_vm.$set(_vm.r, \"tp\", $$v)},expression:\"r.tp\"}})],1)]),_c('div',{staticClass:\"form-group row\"},[_c('label',{staticClass:\"col-sm-4 col-form-label\"},[_vm._v(\" Quyền \")]),_c('div',{staticClass:\"col-sm-8\"},[_c('v-select',{directives:[{name:\"validate\",rawName:\"v-validate\",value:('required'),expression:\"'required'\"}],class:{ danger: _vm.errors.has('quyen') },attrs:{\"multiple\":\"\",\"name\":\"quyen\",\"options\":['Admin', 'User', 'Editor']},model:{value:(_vm.r.quyen),callback:function ($$v) {_vm.$set(_vm.r, \"quyen\", $$v)},expression:\"r.quyen\"}})],1)])]),_c('div',{staticClass:\"float-right\"},[_c('button',{staticClass:\"btn btn-primary mr-1 btn-sm\",attrs:{\"type\":\"submit\"}},[_vm._v(\"Save\")]),_c('button',{staticClass:\"btn btn-sm\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.hideModal()}}},[_vm._v(\"Cancel\")])])])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <raw-loader :mytxt=\"require('!raw-loader!./Ban2Ajax.vue').default\"></raw-loader>\r\n        {{ msg }}<br>\r\n        <!-- {{myvalid}}<br> -->\r\n        <!-- rowedit : {{rowedit}}<br>   -->\r\n        sel : {{ sel }}<br>\r\n        {{ tableData }}\r\n        <div class=\"mb-1\">\r\n            <button class=\"mr-1\" @click=\"onAdd\">Add</button>\r\n            <button class=\"mr-1\" @click=\"onTest\">Test</button>\r\n        </div>\r\n        <!-- {{tableData}} -->\r\n        <div ref=\"table\"></div>\r\n        <b-modal ref=\"my-modal2\" id=\"modal-1\" size=\"sm\" :no-close-on-backdrop=\"true\" hide-footer title=\"BootstrapVue\">\r\n            <form @submit.stop.prevent=\"onSaveModal\">\r\n                <div>\r\n                    <!-- <pre>{{r}}</pre> -->\r\n                    <div class=\"form-group row\">\r\n                        <label class=\"col-sm-4 col-form-label\">Id</label>\r\n                        <div class=\"col-sm-8\">\r\n                            <input type=\"text\" class=\"form-control\" disabled v-model=\"r.id\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group row\">\r\n                        <label class=\"col-sm-4 col-form-label\">\r\n                            Name\r\n                        </label>\r\n                        <div class=\"col-sm-8\">\r\n                            <input type=\"text\" v-model=\"r.name\" name=\"name\" v-validate=\"'required'\" :class=\"{\r\n                                'form-control': true,\r\n                                'ko-hop-le': errors.has('name'),\r\n                            }\" autocomplete=\"off\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group row\">\r\n                        <label class=\"col-sm-4 col-form-label\">\r\n                            Ngay\r\n                        </label>\r\n                        <div class=\"col-sm-8\">\r\n                            <b-form-datepicker v-model=\"r.ngay\" name=\"ngay\" v-validate=\"'required'\"\r\n                                :date-format-options=\"{ year: 'numeric', month: 'numeric', day: 'numeric' }\" locale=\"vi\"\r\n                                class=\"mb-2\">\r\n                            </b-form-datepicker>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group row\">\r\n                        <label class=\"col-sm-4 col-form-label\">\r\n                            Act\r\n                        </label>\r\n                        <div class=\"col-sm-8\">\r\n                            <b-form-checkbox v-model=\"r.act\" name=\"checkbox-1\" value=true unchecked-value=false\r\n                                @change=\"ChangeAct\">\r\n                                Active\r\n                            </b-form-checkbox>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group row\">\r\n                        <label class=\"col-sm-4 col-form-label\">\r\n                            Thành phố {{ errors.has('tp') }}\r\n                        </label>\r\n                        <div class=\"col-sm-8\">\r\n                            <v-select v-model=\"r.tp\" name=\"tp\" v-validate=\"'required'\" :reduce=\"(option) => option.id\"\r\n                                :options=\"tps\" :has-error=\"errors.has('tp')\" :class=\"{ danger: errors.has('tp') }\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group row\">\r\n                        <label class=\"col-sm-4 col-form-label\">\r\n                            Quyền\r\n                        </label>\r\n                        <div class=\"col-sm-8\">\r\n                            <v-select multiple name=\"quyen\" v-model=\"r.quyen\" :options=\"['Admin', 'User', 'Editor']\"\r\n                                v-validate=\"'required'\" :class=\"{ danger: errors.has('quyen') }\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"float-right\">\r\n                    <button type=\"submit\" class=\"btn btn-primary mr-1 btn-sm\">Save</button>\r\n                    <button type=\"button\" class=\"btn btn-sm\" @click=\"hideModal()\">Cancel</button>\r\n                </div>\r\n            </form>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { TabulatorFull as Tabulator } from 'tabulator-tables'; //import Tabulator library\r\n//import $ from \"jquery\"\r\nimport MyLoader from \"@/func/MyLoad.js\";\r\n\r\n\r\nimport VeeValidate from \"vee-validate\";\r\nimport Vue from \"vue\";\r\nVue.use(VeeValidate, {\r\n    classes: true,\r\n});\r\n\r\nimport vSelect from \"vue-select\";\r\nVue.component(\"v-select\", vSelect);\r\nimport \"vue-select/dist/vue-select.css\";\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nexport default {\r\n    data: function () {\r\n        return {\r\n            tabulator: null, //variable to hold your table\r\n            tableData: [], //data for table to display\r\n\r\n            msg: \"hello world\",\r\n            sel: {},//lưu giá trị cũ\r\n            rowCount:0,\r\n            rec: {\r\n                Id: 0,\r\n                Name: \"xyzt\",\r\n            },\r\n\r\n            count: 1,\r\n            r: {\r\n                id: 0,\r\n                ten: 'thuc 101',\r\n                ngay: new Date\r\n            },\r\n            tps: [\r\n                { label: 'Huế', id: 'HUE' },\r\n                { label: 'Sài gòn', id: 'SG' },\r\n                { label: 'Đà nẵng', id: 'DN' },\r\n                { label: 'Quảng ngãi', id: 'QN' },\r\n            ],\r\n            //valid: '',//dữ liệu không hợp lệ\r\n            mons: [\r\n                { id: 1, name: 'Gạo' },\r\n                { id: 2, name: 'Đường' },\r\n                { id: 3, name: 'Muối' },\r\n                { id: 4, name: 'Bột ngọt' },\r\n                { id: 5, name: 'Nước ngọt' },\r\n                { id: 6, name: 'Cà phê' },\r\n                { id: 7, name: 'Bia' },\r\n                { id: 8, name: 'Nước mía' }\r\n            ]\r\n        }\r\n    },\r\n    mounted() {\r\n        if (!document.getElementById(\"myScript\")) {\r\n            MyLoader.loadScript(\"myScript\", \"/js/jquery.min.js\").then(() => {\r\n                MyLoader.loadScript(\"\", \"/js/bootstrap.js\").then(() => {\r\n                    MyLoader.loadScript(\"\", \"/js/select2.min.js\").then(() => {\r\n                        MyLoader.loadScript(\"\", \"/js/bootstrap-datepicker.js\").then(() => {\r\n                            MyLoader.loadScript(\"\", \"/js/moment.js\").then(() => {\r\n                                MyLoader.loadCss(\"/css/select2.min.css\").then(() => {\r\n                                    MyLoader.loadCss(\"/css/bootstrap-datepicker.css\").then(() => {\r\n                                        this.onReady();\r\n                                    })\r\n                                })\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        } else {\r\n            this.onReady();\r\n        }\r\n    },\r\n    methods: {\r\n        onReady() {\r\n            this.loadTabulator();\r\n        },\r\n        loadTabulator() {\r\n            var that = this;\r\n\r\n            var tplFormatter = function (cell, formatterParams, onRendered) {\r\n                onRendered(function () {\r\n                    /*\r\n                    let $input = $(cell.getElement()).find(\"input\");\r\n                    $input.css({\r\n                        \"padding\": \"4px\",\r\n                        \"width\": \"100%\",\r\n                        \"box-sizing\": \"border-box\",\r\n                        \"font-family\": \"verdana\",\r\n                        \"font-size\": \"9px\"\r\n                    })\r\n                    */\r\n                });\r\n                var $el = $(\"<input class='form-control form-control-sm' />\");\r\n                $el.css({\r\n                    \"padding\": \"4px\",\r\n                    \"width\": \"100%\",\r\n                    \"box-sizing\": \"border-box\",\r\n                    \"font-family\": \"verdana\",\r\n                    \"font-size\": \"9px\"\r\n                })\r\n                $el.val(cell.getValue());\r\n                let editable = (that.sel.id == cell.getRow().getData().id);\r\n                if (editable == false) {\r\n                    $el.attr('disabled', 'disabled');\r\n                }\r\n                $el.on(\"change\", function (e) {\r\n                    cell.setValue($(this).val());\r\n                });\r\n                $el.on(\"blur\", function (e) {\r\n                    cell.setValue($(this).val());\r\n                });\r\n                return $el[0];\r\n            };\r\n            var datePickerFormatter = function (cell, formatterParams, onRendered) {\r\n                onRendered(function () {\r\n                    let $cell = $(cell.getElement()).find(\"input\");\r\n                    let editable = (that.sel.id == cell.getRow().getData().id);\r\n                    if (editable == false) {\r\n                        $(cell.getElement()).find(\"input:first\").prop(\"disabled\", true);\r\n                        $(cell.getElement()).find(\"input:first\").css(\"background-color\", \"#e9ecef\");\r\n                    } else {\r\n                        $(cell.getElement()).find(\"input:first\").css(\"background-color\", \"white\");\r\n                    }\r\n                    $cell.css({\r\n                        \"padding\": \"4px\",\r\n                        \"width\": \"100%\",\r\n                        \"box-sizing\": \"border-box\",\r\n                        \"height\": \"100%\",\r\n                        //\"border\":\"1px solid blue\",\r\n                        //\"background-color\":\"yellow\",\r\n                        //text-align: center;\r\n                        \"text-align\": \"center\"\r\n                    })\r\n                    $cell.prop(\"readonly\", true);\r\n                    $cell.datepicker({\r\n                        format: \"dd/mm/yyyy\",\r\n                        todayBtn: true,\r\n                        autoclose: true,\r\n                        todayHighlight: true,\r\n                    });\r\n                    let value = moment(cell.getValue(), \"DD/MM/YYYY\").format(\"DD/MM/YYYY\");\r\n                    $cell.datepicker(\"setDate\", value);\r\n                    $cell.datepicker().on(\"changeDate\", function () {\r\n                        let d = $(this).datepicker(\"getDate\");\r\n                        cell.setValue(moment(d).format(\"DD/MM/YYYY\"));\r\n                    });\r\n                });\r\n                var $el = $(\"<input class='form-control' />\");\r\n                return $el[0];\r\n            };\r\n\r\n            var select2Formatter = function (cell, formatterParams, onRendered) {\r\n                onRendered(function () {\r\n                    let $myCell = $(cell.getElement());\r\n                    let $cell = $(cell.getElement()).find(\"select\");\r\n                    $cell.css({\r\n                        \"padding\": \"4px\",\r\n                        \"width\": \"100%\",\r\n                        \"box-sizing\": \"border-box\",\r\n                        \"font-family\": \"\",\r\n                    })\r\n                    $cell.select2({\r\n                        placeholder: '',\r\n                        width: \"100%\",\r\n                        allowClear: true,\r\n                    });\r\n                    $cell.focus();\r\n                    $cell.val(cell.getValue()).trigger(\"change.select2\");\r\n                    $(cell.getElement())\r\n                        .find(\"select\")\r\n                        .on(\"change\", function () {\r\n                            cell.setValue($(this).val());\r\n                        });\r\n                    $myCell\r\n                        .find(\".select2-container--default\")\r\n                        .css(\"border\", \"0px solid blue\");\r\n                    $myCell\r\n                        .find(\".select2-selection--single\")\r\n                        .css(\"border\", \"0px solid blue\");\r\n                });\r\n                var $el = $(\"<select class='tabu' >\");\r\n                let editable = (that.sel.id == cell.getRow().getData().id);\r\n                if (editable == false) {\r\n                    $el.attr('disabled', 'disabled');\r\n                } else {\r\n                }\r\n                formatterParams.forEach((el) => {\r\n                    let $option = $(\"<option>\").attr(\"value\", el.id).text(el.text);\r\n                    $el.append($option);\r\n                });\r\n                return $el[0];\r\n            };\r\n            var roweditCheck = function (cell) {\r\n                let row = cell.getRow();\r\n                let id = row.getIndex();\r\n                let $cell = row.getElement();\r\n                if (that.sel.id == cell.getRow().getData().id) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            this.tabulator = new Tabulator(this.$refs.table, {\r\n\r\n                pagination: true, //enable pagination\r\n                paginationMode: \"remote\", //enable remote pagination\r\n                ajaxSorting: true,\r\n                ajaxURL: \"/api/Ban/GetPage\", //set url for ajax request\r\n                ajaxFiltering: true,\r\n                filterMode: \"remote\", //send filter data to the server instead of processing locally\r\n                sortMode: \"remote\",\r\n                ajaxParams: { token: \"ABC123\" }, //set any standard parameters to pass with the request\r\n                paginationSize: 2, //optional parameter to request a certain number of rows per page\r\n                paginationInitialPage: 1, //optional parameter to set the initial page to load    \r\n                paginationSizeSelector: [5, 10, 20, 30, 50],\r\n                height: $(window).innerHeight() - 400,//'200px',//$(window).innerHeight()\r\n                layout: \"fitData\",//layout:\"fitDataFill\",//layout:\"fitColumns\",\r\n                debugInvalidOptions: false,                \r\n\r\n\r\n                ajaxRequesting: function (url, params) {\r\n                    that.msg = `${url} - ` + JSON.stringify(params);\r\n                },\r\n                ajaxResponse: function (url, params, response) {\r\n                    // alert(JSON.stringify(response));\r\n                    //{\"last_page\":3,\"rowCount\":5,\"data\":[{\"Id\":1284,\"Name\":\"Thức\"},{\"Id\":1286,\"Name\":\"Trí\"}]}    \r\n                    that.rowCount=response.rowCount;                  \r\n                    let data = [];\r\n                    response.data.forEach(x => {\r\n                        data.push({\r\n                            id: x.Id,\r\n                            Name: x.Name\r\n                        })\r\n                    })\r\n                    let ar = {};\r\n                    ar.last_page = response.last_page;\r\n                    ar.rowCount = response.rowCount;\r\n                    ar.data = data;\r\n                    return ar;//.data; //pass the data array into Tabulator\r\n                },\r\n\r\n                rowFormatter: function (row) {\r\n                    let chk = that.sel.id == row.getData().id;\r\n                },\r\n                index: \"id\",\r\n                //autoColumns:true,\r\n                columns: [\r\n                    {\r\n                        title: \"STT\",\r\n                        formatter: \"rownum\",\r\n                        headerHozAlign: \"center\",\r\n                        hozAlign: \"center\",\r\n                        vertAlign: \"middle\",//\"bottom\",\r\n                    },\r\n                    {\r\n                        title: \"Cmd\",\r\n                        headerHozAlign: \"center\",\r\n                        hozAlign: \"center\",\r\n                        vertAlign: \"middle\",//\"bottom\",\r\n                        headerSort: false,\r\n                        width: 100,\r\n                        formatter: function (cell, formatterParams, onRendered) {\r\n                            onRendered(function () {\r\n                                $(cell.getElement()).find(\"#testedit\").on(\"click\", cell, that.onTestEdit);\r\n                                $(cell.getElement()).find(\"#save\").on(\"click\", cell.getRow(), that.onSave);\r\n                                $(cell.getElement()).find(\"#cancel\").on(\"click\", cell.getRow(), that.onCancel);\r\n                                $(cell.getElement()).find(\"#edit\").on(\"click\", cell.getRow(), that.onEdit);\r\n                                $(cell.getElement()).find(\"#del\").on(\"click\", cell.getRow(), that.onDel);\r\n                            });\r\n                            let $div = $(\"<div>\");\r\n                            let $btnSave = $(\"<button>\", { text: \"Save\", class: \"mr-1\" }).attr(\"id\", \"save\").hide();\r\n                            let $btnCancel = $(\"<button>\", { text: \"Cancel\", class: \"mr-1\" }).attr(\"id\", \"cancel\").hide();\r\n                            let $btnEdit = $(\"<button>\", { text: \"Edit\", class: \"mr-1\" }).attr(\"id\", \"edit\");\r\n                            let $btnDel = $(\"<button>\", { text: \"Del\", class: \"mr-1\" }).attr(\"id\", \"del\");\r\n                            $div.append($btnSave);\r\n                            $div.append($btnCancel);\r\n                            $div.append($btnEdit);\r\n                            $div.append($btnDel);\r\n                            if (that.sel.id == cell.getRow().getData().id) {\r\n                                $btnSave.show();\r\n                                $btnCancel.show();\r\n                                $btnEdit.hide();\r\n                                $btnDel.hide();\r\n                            } else {\r\n                                if ($.isEmptyObject(that.sel) == true) {\r\n                                    $btnSave.hide();\r\n                                    $btnCancel.hide();\r\n                                    $btnEdit.show();\r\n                                } else {\r\n                                    $btnEdit.attr('disabled', 'disabled');//.hide();\r\n                                    $btnDel.attr('disabled', 'disabled');//.hide();\r\n                                }\r\n                            }\r\n                            return $div[0];\r\n                        },\r\n                    },\r\n                    {\r\n                        title: \"Id\",\r\n                        field: \"id\",\r\n                        width: 50,\r\n                        vertAlign: \"middle\",//\"bottom\",\r\n                        //headerFilter: true,\r\n                        hozAlign: \"center\",\r\n                    },\r\n                    {\r\n                        title: \"Name\",\r\n                        field: \"Name\",\r\n                        width: 80,\r\n                        vertAlign: \"middle\",//\"bottom\",\r\n                        editor: \"input\",\r\n                        validator: [\"required\"], //\"required\"  \r\n                        editable: roweditCheck,//editCheck,\r\n                    },\r\n\r\n                ], //define table columns\r\n            });\r\n            this.tabulator.on(\"dataLoaded\", function (data) {\r\n                //that.onLoad();\r\n            });\r\n            this.tabulator.on(\"pageLoaded\", function (pageno) {\r\n            });\r\n            this.tabulator.on(\"dataChanged\", function (data) {\r\n            });\r\n            this.tabulator.on(\"rowClick\", function (e, row) {\r\n            });\r\n            this.tabulator.on(\"rowSelectionChanged\", function (data, rows) {\r\n            });\r\n            this.tabulator.on(\"rowSelected\", function (row) {\r\n                let index = row.getIndex();\r\n                //that.msg = index;\r\n                //console.log('rowSelected');\r\n            });\r\n            this.tabulator.on(\"cellEditing\", function (cell) {\r\n                let row = cell.getRow();\r\n                let data = row.getData();\r\n                let index = row.getIndex();\r\n            });\r\n            this.tabulator.on(\"cellEditCancelled\", function (cell) {\r\n                //that.valid = \"\";\r\n            });\r\n            this.tabulator.on(\"cellEdited\", function (cell) {\r\n                //that.valid = \"\";\r\n                if (cell.getField() != \"solg\") {\r\n                    return;\r\n                }\r\n                let row = cell.getRow();\r\n                let data = row.getData();\r\n                let solg = row.getCell(\"solg\").getValue();\r\n                let tien = solg * 1000;\r\n                let id = row.getIndex();\r\n                row.getCell(\"tien\").setValue(tien);\r\n            });\r\n            this.tabulator.on(\"validationFailed\", function (cell, value, validators) {\r\n                let field = cell.getField();\r\n                //that.valid = field;\r\n            });\r\n        },\r\n        onTest(){\r\n            this.tabulator.addRow({id:0,Name:\"xxxxx\"},true,0);\r\n            //table.addRow({name:\"Billy Bob\", age:\"12\"}, true, 3); //add new row above existing row with index of 3            \r\n        },\r\n        ReLoadData() {\r\n            this.tabulatorClear();\r\n            let r = JSON.parse(JSON.stringify(this.rec));\r\n            r.id = this.count++;\r\n            this.tableData.push(r);\r\n            this.count++;\r\n            this.setPage(1);\r\n        },\r\n        onLoad() {\r\n            for (var i = 0; i < 3; i++) {\r\n                let r = JSON.parse(JSON.stringify(this.rec));\r\n                r.id = this.count;\r\n                r.tien = r.solg * 1000;\r\n                this.tableData.push(r);\r\n                this.count++;\r\n            }\r\n            this.setPage(1);\r\n        },\r\n        ChangeAct() {\r\n            let act = (this.r.act == 'true') ? true : false;\r\n            this.r.act = act;\r\n        },\r\n        rowValidate(row) {\r\n            let kq = true;\r\n            var cells = row.getCells();\r\n            for (var i = 0; i < cells.length; i++) {\r\n                //console.log(cells[i].getField()+\"--\"+ JSON.stringify (cells[i].isValid()));\r\n                if (cells[i].isValid() != true) {\r\n                    kq = false;\r\n                }\r\n            }\r\n            return kq;\r\n        },\r\n        onSave(e) {\r\n            e.preventDefault();\r\n            let row = e.data;\r\n            var cells = row.getCells();\r\n            let id = row.getIndex();\r\n            let index = this.tableData.findIndex(x => x.id == id);\r\n            if (\r\n                this.rowValidate(e.data) == false\r\n                //|| row.getData().tpl == \"\"\r\n                //|| row.getData().monid == null\r\n            ) {\r\n                this.toast(\"không hợp lệ!!!\")\r\n                return;\r\n            }\r\n            let r = row.getData();\r\n            let r2={}\r\n            Object.keys(r).forEach(x=>{\r\n                if(x!=\"id\"){\r\n                    r2[x]=r[x];\r\n                }else{\r\n                    r2[\"Id\"]=r[x];\r\n                }\r\n            })\r\n            this.Save(r2).then(res=>{\r\n                this.tabulator.deselectRow(this.sel.id);\r\n                this.sel = {};\r\n                this.toast(res.data.msg);\r\n                this.setPage(this.getPage());\r\n            })\r\n        },\r\n        onSaveModal() {\r\n            this.$validator.validateAll().then((result) => {\r\n                if (!result) {\r\n                    this.toast(\"Không hợp lệ\");\r\n                    return;\r\n                }\r\n                let r = JSON.parse(JSON.stringify(this.r));\r\n                if (r.id == 0) {\r\n                    r.id = this.count;\r\n                    this.tabulatorAdd(r);\r\n                    this.count++;\r\n                    this.setPage(1);\r\n                } else {\r\n                    this.tabulatorUpdate(r);\r\n                }\r\n                this.hideModal();\r\n            });\r\n        },\r\n        onAdd() {\r\n            let r = JSON.parse(JSON.stringify(this.rec));\r\n            this.Save(r).then(res=>{\r\n                if(res.data.kq==\"addok\"){\r\n                    this.toast(res.data.msg);\r\n                    let nowPageLast=this.getLastPage(this.rowCount+1);\r\n                    this.setPage(nowPageLast);\r\n                }              \r\n            })\r\n        },\r\n        onCancel(e) {\r\n            e.preventDefault();\r\n            let row = e.data;\r\n            var cells = row.getCells();\r\n            let id = row.getIndex();\r\n            let index = this.tableData.findIndex(x => x.id == id);\r\n            let r = JSON.parse(JSON.stringify(this.sel));\r\n            this.tabulatorUpdate(r);\r\n            this.sel = {};\r\n            //this.valid = \"\";\r\n            let $row = $(row.getElement());\r\n            this.tabulator.deselectRow(this.sel.id);\r\n            this.tabulator.redraw(true);\r\n        },\r\n        onEdit(e) {\r\n            e.preventDefault();\r\n            let row = e.data;\r\n            var cells = row.getCells();\r\n            let id = row.getIndex();\r\n            let index = this.tableData.findIndex(x => x.id == id);\r\n            this.sel = JSON.parse(JSON.stringify(row.getData()));\r\n            let $row = $(row.getElement());\r\n            this.tabulator.selectRow(id);\r\n            this.tabulator.redraw(true)\r\n        },\r\n        onDel(e) {\r\n            e.preventDefault();\r\n            let row = e.data;\r\n            let id = row.getIndex();\r\n            this.Del(id).then(res=>{\r\n                let nowPageLast;\r\n                if(res.data.kq==\"ok\"){\r\n                    let nowRowCount=this.rowCount-1;\r\n                    if(nowRowCount%this.getPageSize()==0){\r\n                        this.setPage(this.getPage()-1);\r\n                    }else{\r\n                        this.setPage(this.getPage());\r\n                    }\r\n                }else{\r\n                    this.setPage(this.getPage());\r\n                }\r\n            })\r\n            return;\r\n        },\r\n        getPageMax() {\r\n            return this.tabulator.getPageMax();\r\n        },\r\n        getLastPage(count) {\r\n            let pageSize = this.tabulator.getPageSize();\r\n            let du = count % pageSize;\r\n            return du == 0 ? count / pageSize : (count - du) / pageSize + 1;\r\n        },\r\n        getPageSize() {\r\n            return this.tabulator.getPageSize();\r\n        },\r\n        getPage() {\r\n            return this.tabulator.getPage();\r\n        },\r\n        setPage(_page) {\r\n            this.tabulator.setPage(_page);\r\n        },\r\n        getData() {\r\n            return this.tabulator.getData();\r\n        },\r\n        tabulatorLoadData(ar) {\r\n            ar.forEach(x => {\r\n                this.tableData.push(x);\r\n            })\r\n        },\r\n        tabulatorClear() {\r\n            let i = 0;\r\n            while (i < this.tableData.length) {\r\n                this.tableData.splice(i, 1);\r\n            }\r\n        },\r\n        tabulatorAdd(r) {\r\n            this.tableData.unshift(r);\r\n        },\r\n        tabulatorDel(id) {\r\n            let index = this.tableData.findIndex(x => x.id == id);\r\n            this.tableData.splice(index, 1);\r\n        },\r\n        tabulatorUpdate(r) {\r\n            let index = this.tableData.findIndex(x => x.id == r.id);\r\n            this.tableData.splice(index, 1, r);\r\n        },\r\n        tabulatorGetRow(id) {\r\n            //let index=this.tabulator.getData().findIndex(x=>x.id==id);\r\n            //let r=this.tabulator.getData()[index];\r\n            //return r;\r\n        },\r\n        toast(msg, variant = null) {\r\n            this.$bvToast.toast(msg, {\r\n                title: `Information`,\r\n                variant: variant,\r\n                solid: true,\r\n            });\r\n        },\r\n        showModal() {\r\n            this.$refs['my-modal2'].show()\r\n        },\r\n        hideModal() {\r\n            this.$refs['my-modal2'].hide()\r\n        },\r\n        async Save(r) {\r\n            return await axios.post(`/api/Ban/Save`, r).catch((err) => {\r\n                console.log(err);\r\n            });\r\n        },\r\n        async Del(id) {\r\n            return await axios\r\n                .get(`/api/Ban/Delete?id=${id}`)\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        },\r\n        async getById(id) {\r\n            return await axios.get(`/api/Ban/GetById?id=${id}`).catch((err) => {\r\n                console.log(err);\r\n            });\r\n        },\r\n\r\n\r\n\r\n    }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n.select2-container--default .select2-selection--single .select2-selection__arrow {\r\n    height: 15px;\r\n    position: absolute;\r\n    top: 4px;\r\n    right: 1px;\r\n    width: 20px;\r\n}\r\n\r\n.select2-container--default .select2-selection--single .select2-selection__rendered {\r\n    color: #444;\r\n    line-height: 24px;\r\n}\r\n\r\n.select2-container .select2-selection--single {\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n    display: block;\r\n    height: 24px;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n}\r\n\r\n.xyz {\r\n    border: 1px solid red;\r\n}\r\n\r\n.danger,\r\n.danger .dropdown-toggle,\r\n.danger .selected-tag {\r\n    background-color: aqua;\r\n    border-radius: 4px;\r\n}\r\n\r\n.ko-hop-le {\r\n    border-radius: 4px;\r\n    background-color: aqua;\r\n}\r\n\r\n$textSize: 8.5px; //14px !default; //table text size\r\n@import \"~tabulator-tables/src/scss/tabulator.scss\";\r\n\r\n.tabulator-col-title {\r\n    text-align: center;\r\n}\r\n\r\n.tabulator .tabulator-footer .tabulator-page.active {\r\n    background-color: greenyellow !important;\r\n    color: blue !important;\r\n}\r\n\r\n.tabulator-row .tabulator-cell {\r\n    padding: 2px 4px;\r\n}\r\n\r\n.b-calendar .b-calendar-grid-body .col[data-date] .btn {\r\n    width: 24px;\r\n    height: 24px;\r\n    font-size: 10px;\r\n    line-height: 1;\r\n    margin: 0px auto;\r\n    padding: 6px 0;\r\n}\r\n\r\n.custom-control.custom-checkbox {\r\n    position: relative;\r\n    z-index: 1;\r\n    display: block;\r\n    min-height: 0.9rem;\r\n    padding-left: 1.5rem;\r\n    padding-top: 0.3rem;\r\n}\r\n\r\n.col-4 input {\r\n    margin-bottom: 1px;\r\n}\r\n\r\n.form-group {\r\n    margin-bottom: 0.3rem;\r\n}\r\n</style>\r\n  \r\n  ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Ban2Ajax.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Ban2Ajax.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Ban2Ajax.vue?vue&type=template&id=05634a66&\"\nimport script from \"./Ban2Ajax.vue?vue&type=script&lang=js&\"\nexport * from \"./Ban2Ajax.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Ban2Ajax.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","'use strict';\nvar $ = require('../internals/export');\nvar $find = require('../internals/array-iteration').find;\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\nvar FIND = 'find';\nvar SKIPS_HOLES = true;\n\n// Shouldn't skip holes\nif (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.find` method\n// https://tc39.es/ecma262/#sec-array.prototype.find\n$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables(FIND);\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\n\nvar TypeError = global.TypeError;\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.es/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar nativeKeys = require('../internals/object-keys');\nvar fails = require('../internals/fails');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {\n  keys: function keys(it) {\n    return nativeKeys(toObject(it));\n  }\n});\n","export default \"<template>\\r\\n    <div>\\r\\n        <raw-loader :mytxt=\\\"require('!raw-loader!./Ban2Ajax.vue').default\\\"></raw-loader>\\r\\n        {{ msg }}<br>\\r\\n        <!-- {{myvalid}}<br> -->\\r\\n        <!-- rowedit : {{rowedit}}<br>   -->\\r\\n        sel : {{ sel }}<br>\\r\\n        {{ tableData }}\\r\\n        <div class=\\\"mb-1\\\">\\r\\n            <button class=\\\"mr-1\\\" @click=\\\"onAdd\\\">Add</button>\\r\\n            <button class=\\\"mr-1\\\" @click=\\\"onTest\\\">Test</button>\\r\\n        </div>\\r\\n        <!-- {{tableData}} -->\\r\\n        <div ref=\\\"table\\\"></div>\\r\\n        <b-modal ref=\\\"my-modal2\\\" id=\\\"modal-1\\\" size=\\\"sm\\\" :no-close-on-backdrop=\\\"true\\\" hide-footer title=\\\"BootstrapVue\\\">\\r\\n            <form @submit.stop.prevent=\\\"onSaveModal\\\">\\r\\n                <div>\\r\\n                    <!-- <pre>{{r}}</pre> -->\\r\\n                    <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-sm-4 col-form-label\\\">Id</label>\\r\\n                        <div class=\\\"col-sm-8\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" disabled v-model=\\\"r.id\\\" />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-sm-4 col-form-label\\\">\\r\\n                            Name\\r\\n                        </label>\\r\\n                        <div class=\\\"col-sm-8\\\">\\r\\n                            <input type=\\\"text\\\" v-model=\\\"r.name\\\" name=\\\"name\\\" v-validate=\\\"'required'\\\" :class=\\\"{\\r\\n                                'form-control': true,\\r\\n                                'ko-hop-le': errors.has('name'),\\r\\n                            }\\\" autocomplete=\\\"off\\\" />\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-sm-4 col-form-label\\\">\\r\\n                            Ngay\\r\\n                        </label>\\r\\n                        <div class=\\\"col-sm-8\\\">\\r\\n                            <b-form-datepicker v-model=\\\"r.ngay\\\" name=\\\"ngay\\\" v-validate=\\\"'required'\\\"\\r\\n                                :date-format-options=\\\"{ year: 'numeric', month: 'numeric', day: 'numeric' }\\\" locale=\\\"vi\\\"\\r\\n                                class=\\\"mb-2\\\">\\r\\n                            </b-form-datepicker>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-sm-4 col-form-label\\\">\\r\\n                            Act\\r\\n                        </label>\\r\\n                        <div class=\\\"col-sm-8\\\">\\r\\n                            <b-form-checkbox v-model=\\\"r.act\\\" name=\\\"checkbox-1\\\" value=true unchecked-value=false\\r\\n                                @change=\\\"ChangeAct\\\">\\r\\n                                Active\\r\\n                            </b-form-checkbox>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-sm-4 col-form-label\\\">\\r\\n                            Thành phố {{ errors.has('tp') }}\\r\\n                        </label>\\r\\n                        <div class=\\\"col-sm-8\\\">\\r\\n                            <v-select v-model=\\\"r.tp\\\" name=\\\"tp\\\" v-validate=\\\"'required'\\\" :reduce=\\\"(option) => option.id\\\"\\r\\n                                :options=\\\"tps\\\" :has-error=\\\"errors.has('tp')\\\" :class=\\\"{ danger: errors.has('tp') }\\\" />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-sm-4 col-form-label\\\">\\r\\n                            Quyền\\r\\n                        </label>\\r\\n                        <div class=\\\"col-sm-8\\\">\\r\\n                            <v-select multiple name=\\\"quyen\\\" v-model=\\\"r.quyen\\\" :options=\\\"['Admin', 'User', 'Editor']\\\"\\r\\n                                v-validate=\\\"'required'\\\" :class=\\\"{ danger: errors.has('quyen') }\\\" />\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n                <div class=\\\"float-right\\\">\\r\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary mr-1 btn-sm\\\">Save</button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm\\\" @click=\\\"hideModal()\\\">Cancel</button>\\r\\n                </div>\\r\\n            </form>\\r\\n        </b-modal>\\r\\n    </div>\\r\\n</template>\\r\\n<script>\\r\\nimport { TabulatorFull as Tabulator } from 'tabulator-tables'; //import Tabulator library\\r\\n//import $ from \\\"jquery\\\"\\r\\nimport MyLoader from \\\"@/func/MyLoad.js\\\";\\r\\n\\r\\n\\r\\nimport VeeValidate from \\\"vee-validate\\\";\\r\\nimport Vue from \\\"vue\\\";\\r\\nVue.use(VeeValidate, {\\r\\n    classes: true,\\r\\n});\\r\\n\\r\\nimport vSelect from \\\"vue-select\\\";\\r\\nVue.component(\\\"v-select\\\", vSelect);\\r\\nimport \\\"vue-select/dist/vue-select.css\\\";\\r\\nimport moment from 'moment';\\r\\nimport axios from 'axios';\\r\\nexport default {\\r\\n    data: function () {\\r\\n        return {\\r\\n            tabulator: null, //variable to hold your table\\r\\n            tableData: [], //data for table to display\\r\\n\\r\\n            msg: \\\"hello world\\\",\\r\\n            sel: {},//lưu giá trị cũ\\r\\n            rowCount:0,\\r\\n            rec: {\\r\\n                Id: 0,\\r\\n                Name: \\\"xyzt\\\",\\r\\n            },\\r\\n\\r\\n            count: 1,\\r\\n            r: {\\r\\n                id: 0,\\r\\n                ten: 'thuc 101',\\r\\n                ngay: new Date\\r\\n            },\\r\\n            tps: [\\r\\n                { label: 'Huế', id: 'HUE' },\\r\\n                { label: 'Sài gòn', id: 'SG' },\\r\\n                { label: 'Đà nẵng', id: 'DN' },\\r\\n                { label: 'Quảng ngãi', id: 'QN' },\\r\\n            ],\\r\\n            //valid: '',//dữ liệu không hợp lệ\\r\\n            mons: [\\r\\n                { id: 1, name: 'Gạo' },\\r\\n                { id: 2, name: 'Đường' },\\r\\n                { id: 3, name: 'Muối' },\\r\\n                { id: 4, name: 'Bột ngọt' },\\r\\n                { id: 5, name: 'Nước ngọt' },\\r\\n                { id: 6, name: 'Cà phê' },\\r\\n                { id: 7, name: 'Bia' },\\r\\n                { id: 8, name: 'Nước mía' }\\r\\n            ]\\r\\n        }\\r\\n    },\\r\\n    mounted() {\\r\\n        if (!document.getElementById(\\\"myScript\\\")) {\\r\\n            MyLoader.loadScript(\\\"myScript\\\", \\\"/js/jquery.min.js\\\").then(() => {\\r\\n                MyLoader.loadScript(\\\"\\\", \\\"/js/bootstrap.js\\\").then(() => {\\r\\n                    MyLoader.loadScript(\\\"\\\", \\\"/js/select2.min.js\\\").then(() => {\\r\\n                        MyLoader.loadScript(\\\"\\\", \\\"/js/bootstrap-datepicker.js\\\").then(() => {\\r\\n                            MyLoader.loadScript(\\\"\\\", \\\"/js/moment.js\\\").then(() => {\\r\\n                                MyLoader.loadCss(\\\"/css/select2.min.css\\\").then(() => {\\r\\n                                    MyLoader.loadCss(\\\"/css/bootstrap-datepicker.css\\\").then(() => {\\r\\n                                        this.onReady();\\r\\n                                    })\\r\\n                                })\\r\\n                            })\\r\\n                        })\\r\\n                    })\\r\\n                })\\r\\n            })\\r\\n        } else {\\r\\n            this.onReady();\\r\\n        }\\r\\n    },\\r\\n    methods: {\\r\\n        onReady() {\\r\\n            this.loadTabulator();\\r\\n        },\\r\\n        loadTabulator() {\\r\\n            var that = this;\\r\\n\\r\\n            var tplFormatter = function (cell, formatterParams, onRendered) {\\r\\n                onRendered(function () {\\r\\n                    /*\\r\\n                    let $input = $(cell.getElement()).find(\\\"input\\\");\\r\\n                    $input.css({\\r\\n                        \\\"padding\\\": \\\"4px\\\",\\r\\n                        \\\"width\\\": \\\"100%\\\",\\r\\n                        \\\"box-sizing\\\": \\\"border-box\\\",\\r\\n                        \\\"font-family\\\": \\\"verdana\\\",\\r\\n                        \\\"font-size\\\": \\\"9px\\\"\\r\\n                    })\\r\\n                    */\\r\\n                });\\r\\n                var $el = $(\\\"<input class='form-control form-control-sm' />\\\");\\r\\n                $el.css({\\r\\n                    \\\"padding\\\": \\\"4px\\\",\\r\\n                    \\\"width\\\": \\\"100%\\\",\\r\\n                    \\\"box-sizing\\\": \\\"border-box\\\",\\r\\n                    \\\"font-family\\\": \\\"verdana\\\",\\r\\n                    \\\"font-size\\\": \\\"9px\\\"\\r\\n                })\\r\\n                $el.val(cell.getValue());\\r\\n                let editable = (that.sel.id == cell.getRow().getData().id);\\r\\n                if (editable == false) {\\r\\n                    $el.attr('disabled', 'disabled');\\r\\n                }\\r\\n                $el.on(\\\"change\\\", function (e) {\\r\\n                    cell.setValue($(this).val());\\r\\n                });\\r\\n                $el.on(\\\"blur\\\", function (e) {\\r\\n                    cell.setValue($(this).val());\\r\\n                });\\r\\n                return $el[0];\\r\\n            };\\r\\n            var datePickerFormatter = function (cell, formatterParams, onRendered) {\\r\\n                onRendered(function () {\\r\\n                    let $cell = $(cell.getElement()).find(\\\"input\\\");\\r\\n                    let editable = (that.sel.id == cell.getRow().getData().id);\\r\\n                    if (editable == false) {\\r\\n                        $(cell.getElement()).find(\\\"input:first\\\").prop(\\\"disabled\\\", true);\\r\\n                        $(cell.getElement()).find(\\\"input:first\\\").css(\\\"background-color\\\", \\\"#e9ecef\\\");\\r\\n                    } else {\\r\\n                        $(cell.getElement()).find(\\\"input:first\\\").css(\\\"background-color\\\", \\\"white\\\");\\r\\n                    }\\r\\n                    $cell.css({\\r\\n                        \\\"padding\\\": \\\"4px\\\",\\r\\n                        \\\"width\\\": \\\"100%\\\",\\r\\n                        \\\"box-sizing\\\": \\\"border-box\\\",\\r\\n                        \\\"height\\\": \\\"100%\\\",\\r\\n                        //\\\"border\\\":\\\"1px solid blue\\\",\\r\\n                        //\\\"background-color\\\":\\\"yellow\\\",\\r\\n                        //text-align: center;\\r\\n                        \\\"text-align\\\": \\\"center\\\"\\r\\n                    })\\r\\n                    $cell.prop(\\\"readonly\\\", true);\\r\\n                    $cell.datepicker({\\r\\n                        format: \\\"dd/mm/yyyy\\\",\\r\\n                        todayBtn: true,\\r\\n                        autoclose: true,\\r\\n                        todayHighlight: true,\\r\\n                    });\\r\\n                    let value = moment(cell.getValue(), \\\"DD/MM/YYYY\\\").format(\\\"DD/MM/YYYY\\\");\\r\\n                    $cell.datepicker(\\\"setDate\\\", value);\\r\\n                    $cell.datepicker().on(\\\"changeDate\\\", function () {\\r\\n                        let d = $(this).datepicker(\\\"getDate\\\");\\r\\n                        cell.setValue(moment(d).format(\\\"DD/MM/YYYY\\\"));\\r\\n                    });\\r\\n                });\\r\\n                var $el = $(\\\"<input class='form-control' />\\\");\\r\\n                return $el[0];\\r\\n            };\\r\\n\\r\\n            var select2Formatter = function (cell, formatterParams, onRendered) {\\r\\n                onRendered(function () {\\r\\n                    let $myCell = $(cell.getElement());\\r\\n                    let $cell = $(cell.getElement()).find(\\\"select\\\");\\r\\n                    $cell.css({\\r\\n                        \\\"padding\\\": \\\"4px\\\",\\r\\n                        \\\"width\\\": \\\"100%\\\",\\r\\n                        \\\"box-sizing\\\": \\\"border-box\\\",\\r\\n                        \\\"font-family\\\": \\\"\\\",\\r\\n                    })\\r\\n                    $cell.select2({\\r\\n                        placeholder: '',\\r\\n                        width: \\\"100%\\\",\\r\\n                        allowClear: true,\\r\\n                    });\\r\\n                    $cell.focus();\\r\\n                    $cell.val(cell.getValue()).trigger(\\\"change.select2\\\");\\r\\n                    $(cell.getElement())\\r\\n                        .find(\\\"select\\\")\\r\\n                        .on(\\\"change\\\", function () {\\r\\n                            cell.setValue($(this).val());\\r\\n                        });\\r\\n                    $myCell\\r\\n                        .find(\\\".select2-container--default\\\")\\r\\n                        .css(\\\"border\\\", \\\"0px solid blue\\\");\\r\\n                    $myCell\\r\\n                        .find(\\\".select2-selection--single\\\")\\r\\n                        .css(\\\"border\\\", \\\"0px solid blue\\\");\\r\\n                });\\r\\n                var $el = $(\\\"<select class='tabu' >\\\");\\r\\n                let editable = (that.sel.id == cell.getRow().getData().id);\\r\\n                if (editable == false) {\\r\\n                    $el.attr('disabled', 'disabled');\\r\\n                } else {\\r\\n                }\\r\\n                formatterParams.forEach((el) => {\\r\\n                    let $option = $(\\\"<option>\\\").attr(\\\"value\\\", el.id).text(el.text);\\r\\n                    $el.append($option);\\r\\n                });\\r\\n                return $el[0];\\r\\n            };\\r\\n            var roweditCheck = function (cell) {\\r\\n                let row = cell.getRow();\\r\\n                let id = row.getIndex();\\r\\n                let $cell = row.getElement();\\r\\n                if (that.sel.id == cell.getRow().getData().id) {\\r\\n                    return true;\\r\\n                } else {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n            this.tabulator = new Tabulator(this.$refs.table, {\\r\\n\\r\\n                pagination: true, //enable pagination\\r\\n                paginationMode: \\\"remote\\\", //enable remote pagination\\r\\n                ajaxSorting: true,\\r\\n                ajaxURL: \\\"/api/Ban/GetPage\\\", //set url for ajax request\\r\\n                ajaxFiltering: true,\\r\\n                filterMode: \\\"remote\\\", //send filter data to the server instead of processing locally\\r\\n                sortMode: \\\"remote\\\",\\r\\n                ajaxParams: { token: \\\"ABC123\\\" }, //set any standard parameters to pass with the request\\r\\n                paginationSize: 2, //optional parameter to request a certain number of rows per page\\r\\n                paginationInitialPage: 1, //optional parameter to set the initial page to load    \\r\\n                paginationSizeSelector: [5, 10, 20, 30, 50],\\r\\n                height: $(window).innerHeight() - 400,//'200px',//$(window).innerHeight()\\r\\n                layout: \\\"fitData\\\",//layout:\\\"fitDataFill\\\",//layout:\\\"fitColumns\\\",\\r\\n                debugInvalidOptions: false,                \\r\\n\\r\\n\\r\\n                ajaxRequesting: function (url, params) {\\r\\n                    that.msg = `${url} - ` + JSON.stringify(params);\\r\\n                },\\r\\n                ajaxResponse: function (url, params, response) {\\r\\n                    // alert(JSON.stringify(response));\\r\\n                    //{\\\"last_page\\\":3,\\\"rowCount\\\":5,\\\"data\\\":[{\\\"Id\\\":1284,\\\"Name\\\":\\\"Thức\\\"},{\\\"Id\\\":1286,\\\"Name\\\":\\\"Trí\\\"}]}    \\r\\n                    that.rowCount=response.rowCount;                  \\r\\n                    let data = [];\\r\\n                    response.data.forEach(x => {\\r\\n                        data.push({\\r\\n                            id: x.Id,\\r\\n                            Name: x.Name\\r\\n                        })\\r\\n                    })\\r\\n                    let ar = {};\\r\\n                    ar.last_page = response.last_page;\\r\\n                    ar.rowCount = response.rowCount;\\r\\n                    ar.data = data;\\r\\n                    return ar;//.data; //pass the data array into Tabulator\\r\\n                },\\r\\n\\r\\n                rowFormatter: function (row) {\\r\\n                    let chk = that.sel.id == row.getData().id;\\r\\n                },\\r\\n                index: \\\"id\\\",\\r\\n                //autoColumns:true,\\r\\n                columns: [\\r\\n                    {\\r\\n                        title: \\\"STT\\\",\\r\\n                        formatter: \\\"rownum\\\",\\r\\n                        headerHozAlign: \\\"center\\\",\\r\\n                        hozAlign: \\\"center\\\",\\r\\n                        vertAlign: \\\"middle\\\",//\\\"bottom\\\",\\r\\n                    },\\r\\n                    {\\r\\n                        title: \\\"Cmd\\\",\\r\\n                        headerHozAlign: \\\"center\\\",\\r\\n                        hozAlign: \\\"center\\\",\\r\\n                        vertAlign: \\\"middle\\\",//\\\"bottom\\\",\\r\\n                        headerSort: false,\\r\\n                        width: 100,\\r\\n                        formatter: function (cell, formatterParams, onRendered) {\\r\\n                            onRendered(function () {\\r\\n                                $(cell.getElement()).find(\\\"#testedit\\\").on(\\\"click\\\", cell, that.onTestEdit);\\r\\n                                $(cell.getElement()).find(\\\"#save\\\").on(\\\"click\\\", cell.getRow(), that.onSave);\\r\\n                                $(cell.getElement()).find(\\\"#cancel\\\").on(\\\"click\\\", cell.getRow(), that.onCancel);\\r\\n                                $(cell.getElement()).find(\\\"#edit\\\").on(\\\"click\\\", cell.getRow(), that.onEdit);\\r\\n                                $(cell.getElement()).find(\\\"#del\\\").on(\\\"click\\\", cell.getRow(), that.onDel);\\r\\n                            });\\r\\n                            let $div = $(\\\"<div>\\\");\\r\\n                            let $btnSave = $(\\\"<button>\\\", { text: \\\"Save\\\", class: \\\"mr-1\\\" }).attr(\\\"id\\\", \\\"save\\\").hide();\\r\\n                            let $btnCancel = $(\\\"<button>\\\", { text: \\\"Cancel\\\", class: \\\"mr-1\\\" }).attr(\\\"id\\\", \\\"cancel\\\").hide();\\r\\n                            let $btnEdit = $(\\\"<button>\\\", { text: \\\"Edit\\\", class: \\\"mr-1\\\" }).attr(\\\"id\\\", \\\"edit\\\");\\r\\n                            let $btnDel = $(\\\"<button>\\\", { text: \\\"Del\\\", class: \\\"mr-1\\\" }).attr(\\\"id\\\", \\\"del\\\");\\r\\n                            $div.append($btnSave);\\r\\n                            $div.append($btnCancel);\\r\\n                            $div.append($btnEdit);\\r\\n                            $div.append($btnDel);\\r\\n                            if (that.sel.id == cell.getRow().getData().id) {\\r\\n                                $btnSave.show();\\r\\n                                $btnCancel.show();\\r\\n                                $btnEdit.hide();\\r\\n                                $btnDel.hide();\\r\\n                            } else {\\r\\n                                if ($.isEmptyObject(that.sel) == true) {\\r\\n                                    $btnSave.hide();\\r\\n                                    $btnCancel.hide();\\r\\n                                    $btnEdit.show();\\r\\n                                } else {\\r\\n                                    $btnEdit.attr('disabled', 'disabled');//.hide();\\r\\n                                    $btnDel.attr('disabled', 'disabled');//.hide();\\r\\n                                }\\r\\n                            }\\r\\n                            return $div[0];\\r\\n                        },\\r\\n                    },\\r\\n                    {\\r\\n                        title: \\\"Id\\\",\\r\\n                        field: \\\"id\\\",\\r\\n                        width: 50,\\r\\n                        vertAlign: \\\"middle\\\",//\\\"bottom\\\",\\r\\n                        //headerFilter: true,\\r\\n                        hozAlign: \\\"center\\\",\\r\\n                    },\\r\\n                    {\\r\\n                        title: \\\"Name\\\",\\r\\n                        field: \\\"Name\\\",\\r\\n                        width: 80,\\r\\n                        vertAlign: \\\"middle\\\",//\\\"bottom\\\",\\r\\n                        editor: \\\"input\\\",\\r\\n                        validator: [\\\"required\\\"], //\\\"required\\\"  \\r\\n                        editable: roweditCheck,//editCheck,\\r\\n                    },\\r\\n\\r\\n                ], //define table columns\\r\\n            });\\r\\n            this.tabulator.on(\\\"dataLoaded\\\", function (data) {\\r\\n                //that.onLoad();\\r\\n            });\\r\\n            this.tabulator.on(\\\"pageLoaded\\\", function (pageno) {\\r\\n            });\\r\\n            this.tabulator.on(\\\"dataChanged\\\", function (data) {\\r\\n            });\\r\\n            this.tabulator.on(\\\"rowClick\\\", function (e, row) {\\r\\n            });\\r\\n            this.tabulator.on(\\\"rowSelectionChanged\\\", function (data, rows) {\\r\\n            });\\r\\n            this.tabulator.on(\\\"rowSelected\\\", function (row) {\\r\\n                let index = row.getIndex();\\r\\n                //that.msg = index;\\r\\n                //console.log('rowSelected');\\r\\n            });\\r\\n            this.tabulator.on(\\\"cellEditing\\\", function (cell) {\\r\\n                let row = cell.getRow();\\r\\n                let data = row.getData();\\r\\n                let index = row.getIndex();\\r\\n            });\\r\\n            this.tabulator.on(\\\"cellEditCancelled\\\", function (cell) {\\r\\n                //that.valid = \\\"\\\";\\r\\n            });\\r\\n            this.tabulator.on(\\\"cellEdited\\\", function (cell) {\\r\\n                //that.valid = \\\"\\\";\\r\\n                if (cell.getField() != \\\"solg\\\") {\\r\\n                    return;\\r\\n                }\\r\\n                let row = cell.getRow();\\r\\n                let data = row.getData();\\r\\n                let solg = row.getCell(\\\"solg\\\").getValue();\\r\\n                let tien = solg * 1000;\\r\\n                let id = row.getIndex();\\r\\n                row.getCell(\\\"tien\\\").setValue(tien);\\r\\n            });\\r\\n            this.tabulator.on(\\\"validationFailed\\\", function (cell, value, validators) {\\r\\n                let field = cell.getField();\\r\\n                //that.valid = field;\\r\\n            });\\r\\n        },\\r\\n        onTest(){\\r\\n            this.tabulator.addRow({id:0,Name:\\\"xxxxx\\\"},true,0);\\r\\n            //table.addRow({name:\\\"Billy Bob\\\", age:\\\"12\\\"}, true, 3); //add new row above existing row with index of 3            \\r\\n        },\\r\\n        ReLoadData() {\\r\\n            this.tabulatorClear();\\r\\n            let r = JSON.parse(JSON.stringify(this.rec));\\r\\n            r.id = this.count++;\\r\\n            this.tableData.push(r);\\r\\n            this.count++;\\r\\n            this.setPage(1);\\r\\n        },\\r\\n        onLoad() {\\r\\n            for (var i = 0; i < 3; i++) {\\r\\n                let r = JSON.parse(JSON.stringify(this.rec));\\r\\n                r.id = this.count;\\r\\n                r.tien = r.solg * 1000;\\r\\n                this.tableData.push(r);\\r\\n                this.count++;\\r\\n            }\\r\\n            this.setPage(1);\\r\\n        },\\r\\n        ChangeAct() {\\r\\n            let act = (this.r.act == 'true') ? true : false;\\r\\n            this.r.act = act;\\r\\n        },\\r\\n        rowValidate(row) {\\r\\n            let kq = true;\\r\\n            var cells = row.getCells();\\r\\n            for (var i = 0; i < cells.length; i++) {\\r\\n                //console.log(cells[i].getField()+\\\"--\\\"+ JSON.stringify (cells[i].isValid()));\\r\\n                if (cells[i].isValid() != true) {\\r\\n                    kq = false;\\r\\n                }\\r\\n            }\\r\\n            return kq;\\r\\n        },\\r\\n        onSave(e) {\\r\\n            e.preventDefault();\\r\\n            let row = e.data;\\r\\n            var cells = row.getCells();\\r\\n            let id = row.getIndex();\\r\\n            let index = this.tableData.findIndex(x => x.id == id);\\r\\n            if (\\r\\n                this.rowValidate(e.data) == false\\r\\n                //|| row.getData().tpl == \\\"\\\"\\r\\n                //|| row.getData().monid == null\\r\\n            ) {\\r\\n                this.toast(\\\"không hợp lệ!!!\\\")\\r\\n                return;\\r\\n            }\\r\\n            let r = row.getData();\\r\\n            let r2={}\\r\\n            Object.keys(r).forEach(x=>{\\r\\n                if(x!=\\\"id\\\"){\\r\\n                    r2[x]=r[x];\\r\\n                }else{\\r\\n                    r2[\\\"Id\\\"]=r[x];\\r\\n                }\\r\\n            })\\r\\n            this.Save(r2).then(res=>{\\r\\n                this.tabulator.deselectRow(this.sel.id);\\r\\n                this.sel = {};\\r\\n                this.toast(res.data.msg);\\r\\n                this.setPage(this.getPage());\\r\\n            })\\r\\n        },\\r\\n        onSaveModal() {\\r\\n            this.$validator.validateAll().then((result) => {\\r\\n                if (!result) {\\r\\n                    this.toast(\\\"Không hợp lệ\\\");\\r\\n                    return;\\r\\n                }\\r\\n                let r = JSON.parse(JSON.stringify(this.r));\\r\\n                if (r.id == 0) {\\r\\n                    r.id = this.count;\\r\\n                    this.tabulatorAdd(r);\\r\\n                    this.count++;\\r\\n                    this.setPage(1);\\r\\n                } else {\\r\\n                    this.tabulatorUpdate(r);\\r\\n                }\\r\\n                this.hideModal();\\r\\n            });\\r\\n        },\\r\\n        onAdd() {\\r\\n            let r = JSON.parse(JSON.stringify(this.rec));\\r\\n            this.Save(r).then(res=>{\\r\\n                if(res.data.kq==\\\"addok\\\"){\\r\\n                    this.toast(res.data.msg);\\r\\n                    let nowPageLast=this.getLastPage(this.rowCount+1);\\r\\n                    this.setPage(nowPageLast);\\r\\n                }              \\r\\n            })\\r\\n        },\\r\\n        onCancel(e) {\\r\\n            e.preventDefault();\\r\\n            let row = e.data;\\r\\n            var cells = row.getCells();\\r\\n            let id = row.getIndex();\\r\\n            let index = this.tableData.findIndex(x => x.id == id);\\r\\n            let r = JSON.parse(JSON.stringify(this.sel));\\r\\n            this.tabulatorUpdate(r);\\r\\n            this.sel = {};\\r\\n            //this.valid = \\\"\\\";\\r\\n            let $row = $(row.getElement());\\r\\n            this.tabulator.deselectRow(this.sel.id);\\r\\n            this.tabulator.redraw(true);\\r\\n        },\\r\\n        onEdit(e) {\\r\\n            e.preventDefault();\\r\\n            let row = e.data;\\r\\n            var cells = row.getCells();\\r\\n            let id = row.getIndex();\\r\\n            let index = this.tableData.findIndex(x => x.id == id);\\r\\n            this.sel = JSON.parse(JSON.stringify(row.getData()));\\r\\n            let $row = $(row.getElement());\\r\\n            this.tabulator.selectRow(id);\\r\\n            this.tabulator.redraw(true)\\r\\n        },\\r\\n        onDel(e) {\\r\\n            e.preventDefault();\\r\\n            let row = e.data;\\r\\n            let id = row.getIndex();\\r\\n            this.Del(id).then(res=>{\\r\\n                let nowPageLast;\\r\\n                if(res.data.kq==\\\"ok\\\"){\\r\\n                    let nowRowCount=this.rowCount-1;\\r\\n                    if(nowRowCount%this.getPageSize()==0){\\r\\n                        this.setPage(this.getPage()-1);\\r\\n                    }else{\\r\\n                        this.setPage(this.getPage());\\r\\n                    }\\r\\n                }else{\\r\\n                    this.setPage(this.getPage());\\r\\n                }\\r\\n            })\\r\\n            return;\\r\\n        },\\r\\n        getPageMax() {\\r\\n            return this.tabulator.getPageMax();\\r\\n        },\\r\\n        getLastPage(count) {\\r\\n            let pageSize = this.tabulator.getPageSize();\\r\\n            let du = count % pageSize;\\r\\n            return du == 0 ? count / pageSize : (count - du) / pageSize + 1;\\r\\n        },\\r\\n        getPageSize() {\\r\\n            return this.tabulator.getPageSize();\\r\\n        },\\r\\n        getPage() {\\r\\n            return this.tabulator.getPage();\\r\\n        },\\r\\n        setPage(_page) {\\r\\n            this.tabulator.setPage(_page);\\r\\n        },\\r\\n        getData() {\\r\\n            return this.tabulator.getData();\\r\\n        },\\r\\n        tabulatorLoadData(ar) {\\r\\n            ar.forEach(x => {\\r\\n                this.tableData.push(x);\\r\\n            })\\r\\n        },\\r\\n        tabulatorClear() {\\r\\n            let i = 0;\\r\\n            while (i < this.tableData.length) {\\r\\n                this.tableData.splice(i, 1);\\r\\n            }\\r\\n        },\\r\\n        tabulatorAdd(r) {\\r\\n            this.tableData.unshift(r);\\r\\n        },\\r\\n        tabulatorDel(id) {\\r\\n            let index = this.tableData.findIndex(x => x.id == id);\\r\\n            this.tableData.splice(index, 1);\\r\\n        },\\r\\n        tabulatorUpdate(r) {\\r\\n            let index = this.tableData.findIndex(x => x.id == r.id);\\r\\n            this.tableData.splice(index, 1, r);\\r\\n        },\\r\\n        tabulatorGetRow(id) {\\r\\n            //let index=this.tabulator.getData().findIndex(x=>x.id==id);\\r\\n            //let r=this.tabulator.getData()[index];\\r\\n            //return r;\\r\\n        },\\r\\n        toast(msg, variant = null) {\\r\\n            this.$bvToast.toast(msg, {\\r\\n                title: `Information`,\\r\\n                variant: variant,\\r\\n                solid: true,\\r\\n            });\\r\\n        },\\r\\n        showModal() {\\r\\n            this.$refs['my-modal2'].show()\\r\\n        },\\r\\n        hideModal() {\\r\\n            this.$refs['my-modal2'].hide()\\r\\n        },\\r\\n        async Save(r) {\\r\\n            return await axios.post(`/api/Ban/Save`, r).catch((err) => {\\r\\n                console.log(err);\\r\\n            });\\r\\n        },\\r\\n        async Del(id) {\\r\\n            return await axios\\r\\n                .get(`/api/Ban/Delete?id=${id}`)\\r\\n                .catch((err) => {\\r\\n                    console.log(err);\\r\\n                });\\r\\n        },\\r\\n        async getById(id) {\\r\\n            return await axios.get(`/api/Ban/GetById?id=${id}`).catch((err) => {\\r\\n                console.log(err);\\r\\n            });\\r\\n        },\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n}\\r\\n</script>\\r\\n<style lang=\\\"scss\\\">\\r\\n.select2-container--default .select2-selection--single .select2-selection__arrow {\\r\\n    height: 15px;\\r\\n    position: absolute;\\r\\n    top: 4px;\\r\\n    right: 1px;\\r\\n    width: 20px;\\r\\n}\\r\\n\\r\\n.select2-container--default .select2-selection--single .select2-selection__rendered {\\r\\n    color: #444;\\r\\n    line-height: 24px;\\r\\n}\\r\\n\\r\\n.select2-container .select2-selection--single {\\r\\n    box-sizing: border-box;\\r\\n    cursor: pointer;\\r\\n    display: block;\\r\\n    height: 24px;\\r\\n    -moz-user-select: none;\\r\\n    -ms-user-select: none;\\r\\n    user-select: none;\\r\\n    -webkit-user-select: none;\\r\\n}\\r\\n\\r\\n.xyz {\\r\\n    border: 1px solid red;\\r\\n}\\r\\n\\r\\n.danger,\\r\\n.danger .dropdown-toggle,\\r\\n.danger .selected-tag {\\r\\n    background-color: aqua;\\r\\n    border-radius: 4px;\\r\\n}\\r\\n\\r\\n.ko-hop-le {\\r\\n    border-radius: 4px;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n$textSize: 8.5px; //14px !default; //table text size\\r\\n@import \\\"~tabulator-tables/src/scss/tabulator.scss\\\";\\r\\n\\r\\n.tabulator-col-title {\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.tabulator .tabulator-footer .tabulator-page.active {\\r\\n    background-color: greenyellow !important;\\r\\n    color: blue !important;\\r\\n}\\r\\n\\r\\n.tabulator-row .tabulator-cell {\\r\\n    padding: 2px 4px;\\r\\n}\\r\\n\\r\\n.b-calendar .b-calendar-grid-body .col[data-date] .btn {\\r\\n    width: 24px;\\r\\n    height: 24px;\\r\\n    font-size: 10px;\\r\\n    line-height: 1;\\r\\n    margin: 0px auto;\\r\\n    padding: 6px 0;\\r\\n}\\r\\n\\r\\n.custom-control.custom-checkbox {\\r\\n    position: relative;\\r\\n    z-index: 1;\\r\\n    display: block;\\r\\n    min-height: 0.9rem;\\r\\n    padding-left: 1.5rem;\\r\\n    padding-top: 0.3rem;\\r\\n}\\r\\n\\r\\n.col-4 input {\\r\\n    margin-bottom: 1px;\\r\\n}\\r\\n\\r\\n.form-group {\\r\\n    margin-bottom: 0.3rem;\\r\\n}\\r\\n</style>\\r\\n  \\r\\n  \";","var MyLoad = {\r\n    cong(a, b) {\r\n        return a + b;\r\n    },\r\n    nhan(a, b) {\r\n        return a * b;\r\n    },\r\n    list() {\r\n        return [\r\n            { id: 1, ten: \"thuc 101\" },\r\n            { id: 2, ten: \"thuc 102\" },\r\n            { id: 3, ten: \"thuc 103\" },\r\n        ]\r\n    },\r\n    loadCss(url) {\r\n        return new Promise((resolve, reject) => {\r\n            let link = document.createElement('link');\r\n            link.type = 'text/css';\r\n            link.rel = 'stylesheet';\r\n            link.onload = resolve;\r\n            link.href = url;\r\n            let headScript = document.querySelector('script');\r\n            headScript.parentNode.insertBefore(link, headScript);\r\n        });\r\n    },\r\n    loadScript(id, url) {\r\n        return new Promise(function (resolve, reject) {\r\n            var script = document.createElement(\"script\");\r\n            script.onload = resolve;\r\n            script.onerror = reject;\r\n            script.src = url;\r\n            script.type = \"text/javascript\";\r\n            script.setAttribute('id', id);\r\n            document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n        });\r\n    },\r\n    loadMyScript(that) {\r\n        if (!document.getElementById(\"myScript\")) {\r\n            this.loadScript(\"myScript\", \"js/jquery.min.js\").then(() => {\r\n                this.loadScript(\"\", \"js/bootstrap.js\").then(() => {\r\n                    this.loadScript(\"\", \"js/select2.min.js\").then(() => {\r\n                        this.loadScript(\"\", \"js/bootstrap-datepicker.js\").then(() => {\r\n                            //this.loadScript(\"\", \"js/moment.js\").then(()=>{\r\n                                this.loadCss(\"css/select2.min.css\").then(() => {\r\n                                    this.loadCss(\"css/bootstrap-datepicker.css\").then(() => {\r\n                                        that.onReady();\r\n                                    });\r\n                                });\r\n                            //});\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        } else {\r\n            that.onReady();\r\n        }\r\n    },\r\n    /*\r\n\r\n        \r\n\r\n    */\r\n   /*\r\n    datePickerFormatter(cell, formatterParams, onRendered) {\r\n        onRendered(function () {\r\n            let $cell = $(cell.getElement()).find(\"input\");\r\n            $cell.width(\"100%\");\r\n            $cell.height(\"100%\");\r\n            $cell.css(\"border\", \"0px solid blue\");\r\n            $cell.css(\"text-align\", \"center\");\r\n            $cell.prop(\"readonly\", true);\r\n            $cell.datepicker({\r\n                format: \"dd/mm/yyyy\",\r\n                //todayBtn: true,\r\n                autoclose: true,\r\n                todayHighlight: true,\r\n            });\r\n            let value = moment(cell.getValue(), \"DD/MM/YYYY\").format(\r\n                \"DD/MM/YYYY\"\r\n            );\r\n            $cell.datepicker(\"setDate\", value);\r\n\r\n            $cell.datepicker().on(\"changeDate\", function () {\r\n                let d = $(this).datepicker(\"getDate\");\r\n                cell.setValue(moment(d).format(\"DD/MM/YYYY\"));\r\n            });\r\n        });\r\n        var $el = $(\"<input />\");\r\n        return $el[0];\r\n    },\r\n    select2Formatter(cell, formatterParams, onRendered) {\r\n        onRendered(function () {\r\n            let $myCell = $(cell.getElement());\r\n            let $cell = $(cell.getElement()).find(\"select\");\r\n            $cell.select2({\r\n                //placeholder: '-- // --',\r\n                width: \"100%\",\r\n                //allowClear: true,\r\n            });\r\n            $cell.focus();\r\n            $cell.val(cell.getValue()).trigger(\"change.select2\");\r\n            $(cell.getElement())\r\n                .find(\"select\")\r\n                .on(\"change\", function () {\r\n                    cell.setValue($(this).val());\r\n                });\r\n            $myCell\r\n                .find(\".select2-container--default\")\r\n                .css(\"border\", \"0px solid blue\");\r\n            $myCell\r\n                .find(\".select2-selection--single\")\r\n                .css(\"border\", \"0px solid blue\");\r\n        });\r\n        var $el = $(\"<select class='tabu' >\");\r\n        formatterParams.forEach((el) => {\r\n            let $option = $(\"<option>\").val(el.id).text(el.text);\r\n            $el.append($option);\r\n        });\r\n        return $el[0];\r\n    },\r\n    */\r\n}\r\nexport default MyLoad\r\n//import MyLoader from \"@/func/MyLoad.js\";\r\n\r\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","_v","_s","msg","sel","tableData","staticClass","on","onAdd","onTest","ref","$event","stopPropagation","preventDefault","onSaveModal","apply","arguments","directives","name","rawName","value","r","expression","domProps","target","composing","$set","class","errors","has","year","month","day","model","callback","$$v","ChangeAct","danger","option","id","tps","hideModal","staticRenderFns","Vue","classes","data","tabulator","rowCount","rec","Id","Name","count","ten","ngay","label","mons","mounted","MyLoader","methods","onReady","loadTabulator","pagination","paginationMode","ajaxSorting","ajaxURL","ajaxFiltering","filterMode","sortMode","ajaxParams","token","paginationSize","paginationInitialPage","paginationSizeSelector","height","layout","debugInvalidOptions","ajaxRequesting","that","ajaxResponse","response","ar","rowFormatter","index","columns","title","formatter","headerHozAlign","hozAlign","vertAlign","headerSort","width","onRendered","$","text","$div","$btnSave","$btnCancel","$btnEdit","$btnDel","field","editor","validator","editable","row","ReLoadData","onLoad","rowValidate","kq","onSave","e","Object","r2","onCancel","onEdit","onDel","getPageMax","getLastPage","getPageSize","getPage","setPage","_page","getData","tabulatorLoadData","tabulatorClear","tabulatorAdd","tabulatorDel","tabulatorUpdate","tabulatorGetRow","toast","variant","solid","showModal","Save","axios","console","Del","catch","getById","component","$find","addToUnscopables","FIND","SKIPS_HOLES","Array","proto","forced","find","callbackfn","length","undefined","global","toAbsoluteIndex","toIntegerOrInfinity","lengthOfArrayLike","toObject","arraySpeciesCreate","createProperty","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","TypeError","max","Math","min","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_LENGTH_EXCEEDED","splice","start","deleteCount","insertCount","actualDeleteCount","A","k","from","to","O","len","actualStart","argumentsLength","nativeKeys","fails","FAILS_ON_PRIMITIVES","stat","keys","it","MyLoad","cong","a","b","nhan","list","loadCss","url","Promise","resolve","reject","link","document","createElement","type","rel","onload","href","headScript","querySelector","parentNode","insertBefore","loadScript","script","onerror","src","setAttribute","getElementsByTagName","appendChild","loadMyScript","getElementById","then"],"sourceRoot":""}