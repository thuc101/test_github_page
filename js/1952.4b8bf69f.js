"use strict";(self["webpackChunkvue_start_1"]=self["webpackChunkvue_start_1"]||[]).push([[1952],{31952:function(t,e,i){i.r(e),i.d(e,{default:function(){return u}});var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("b-container",{attrs:{fluid:""}},[n("raw-loader",{attrs:{mytxt:i(24805).Z}}),n("form",{on:{submit:function(e){return e.stopPropagation(),e.preventDefault(),t.onSave.apply(null,arguments)}}},[n("b-table",{ref:"mytable",attrs:{items:t.items,fields:t.fields,"current-page":t.currentPage,"per-page":t.perPage,filter:t.filter,"filter-included-fields":t.filterOn,"sort-by":t.sortBy,"sort-desc":t.sortDesc,"sort-direction":t.sortDirection,stacked:"md","show-empty":"",small:"",fixed:"",outlined:"",bordered:""},on:{"update:sortBy":function(e){t.sortBy=e},"update:sort-by":function(e){t.sortBy=e},"update:sortDesc":function(e){t.sortDesc=e},"update:sort-desc":function(e){t.sortDesc=e},filtered:t.onFiltered},scopedSlots:t._u([{key:"cell()",fn:function(e){var i=e.value,s=e.item,l=e.field.key;return[t.sel[t.pri]!=s[t.pri]?[0!=s[t.pri]?[l==t.pri?[t._v(" "+t._s(i)+" ")]:t._e(),"name"==l?[t._v(" "+t._s(i)+" ")]:t._e()]:t._e()]:t._e(),t.sel[t.pri]==s[t.pri]||0==s[t.pri]?[l==t.pri?[n("span",[t._v(t._s(i))])]:t._e(),"name"==l?[n("b-form-input",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"ko-hop-le":t.errors.has(l)},attrs:{autocomplete:"off",name:l,placeholder:""},model:{value:s[l],callback:function(e){t.$set(s,l,e)},expression:"item[key]"}})]:t._e()]:t._e()]}},{key:"cell(cmd)",fn:function(e){return[0==e.item[t.pri]?[n("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(i){return t.onSave(e.item)}}},[n("b-icon-hand-thumbs-up")],1),n("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(i){return t.OnCancel(e.item)}}},[n("b-icon-file-x")],1)]:[t.sel[t.pri]!=e.item[t.pri]?n("b-button",{staticClass:"mr-1",attrs:{variant:"outline",disabled:1==t.isAdded(),size:"sm"},on:{click:function(i){return t.OnEdit(e.item)}}},[n("b-icon-pencil-square")],1):t._e(),t.sel[t.pri]!=e.item[t.pri]?n("b-button",{staticClass:"mr-1",attrs:{variant:"outline",disabled:1==t.isAdded(),size:"sm"},on:{click:function(i){return t.OnDel(e.item)}}},[n("b-icon-trash")],1):t._e(),t.sel[t.pri]==e.item[t.pri]?n("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(i){return t.onSave(e.item)}}},[n("b-icon-hand-thumbs-up")],1):t._e(),t.sel[t.pri]==e.item[t.pri]?n("b-button",{staticClass:"mr-1",attrs:{variant:"outline",size:"sm"},on:{click:function(i){return t.OnCancel(e.item)}}},[n("b-icon-file-x")],1):t._e()]]}},{key:"bottom-row",fn:function(e){return[n("td",{attrs:{colspan:e.columns}},[n("b-row",[n("b-col",{staticClass:"my-1",attrs:{sm:"6"}},[n("b-form-group",{staticClass:"mb-0",attrs:{label:"Filter","label-for":"filter-input","label-cols-sm":"3","label-align-sm":"right","label-size":"sm"}},[n("b-input-group",{attrs:{size:"sm"}},[n("b-form-input",{attrs:{id:"filter-input",type:"search",placeholder:"Type to Search"},model:{value:t.filter,callback:function(e){t.filter=e},expression:"filter"}}),n("b-input-group-append",[n("b-button",{attrs:{disabled:!t.filter},on:{click:function(e){t.filter=""}}},[t._v("Clear")])],1)],1)],1)],1),n("b-col",{staticClass:"my-1",attrs:{sm:"6"}},[n("b-form-group",{staticClass:"mb-0",attrs:{label:"Per page","label-for":"per-page-select","label-cols-sm":"6","label-cols-md":"4","label-cols-lg":"3","label-align-sm":"right","label-size":"sm"}},[n("b-form-select",{attrs:{id:"per-page-select",options:t.pageOptions,size:"sm"},model:{value:t.perPage,callback:function(e){t.perPage=e},expression:"perPage"}})],1)],1),n("b-col",{staticClass:"my-1 text-right",attrs:{sm:"6"}},[t._v(" page :"+t._s(t.currentPage)+" / "+t._s(t.getLastPage(t.totalRows))+" of "+t._s(t.totalRows)+" "),n("b-button",{attrs:{disabled:1==t.adding||1==t.isEditing(),size:"sm"},on:{click:t.OnAdd}},[n("b",[t._v("Add")])])],1),n("b-col",{staticClass:"my-1",attrs:{sm:"6"}},[n("b-pagination",{staticClass:"my-0",attrs:{disabled:1==t.adding||1==t.isEditing(),"total-rows":t.totalRows,"per-page":t.perPage,align:"fill",size:"sm"},model:{value:t.currentPage,callback:function(e){t.currentPage=e},expression:"currentPage"}})],1)],1)],1)]}}])})],1),n("b-modal",{attrs:{id:t.infoModal.id,title:t.infoModal.title,"ok-only":""},on:{hide:t.resetInfoModal}},[n("pre",[t._v(t._s(t.infoModal.content))])])],1)},s=[],l=i(12954),a=i(20144),r=(i(30381),i(19938)),o=i.n(r);a["default"].use(l.ZP,{classes:!0,fieldsBagName:"veeFields"}),a["default"].component("v-select",o());var d={data(){return{items:[],fields:[{key:"id",formatter:(t,e,i)=>{let n=t.toString();return n.length<4?n:n.substring(0,4)+"..."},sortable:!0,thClass:"text-center",tdClass:"text-center align-middle",thStyle:{width:"10%"}},{key:"name",sortable:!0,thClass:"text-center",tdClass:"align-middle",thStyle:{width:"80%"}},{key:"cmd",class:"text-center",thClass:"text-center",tdClass:"align-middle",thStyle:{width:"10%"}}],totalRows:1,currentPage:1,perPage:3,pageOptions:[3,5,10,15,{value:100,text:"Show a lot"}],sortBy:"",sortDesc:!1,sortDirection:"asc",filter:null,filterOn:[],infoModal:{id:"info-modal",title:"",content:""},sel:{},pri:"id",adding:!1,lastPage:0}},computed:{sortOptions(){return this.fields.filter((t=>t.sortable)).map((t=>({text:t.label,value:t.key})))}},mounted(){let t=[];for(var e=1;e<6;e++)t.push({id:e,name:`thuc ${e}`});this.items=t,this.totalRows=this.items.length,this.lastPage=this.getLastPage(this.totalRows)},methods:{createId(){let t=0;return this.items.forEach((e=>{e[this.pri]>t&&(t=e[this.pri])})),t+1},onSave(t){this.$validator.validateAll().then((e=>{if(!e)return void this.toast("Không hợp lệ");let i=JSON.parse(JSON.stringify(t));if(0==i[this.pri]){let t=this.items.findIndex((t=>t[this.pri]==i[this.pri]));i[this.pri]=this.createId(),this.$set(this.items,t,i),this.adding=!1,this.$refs.mytable.refresh()}else{let t=this.items.findIndex((t=>t[this.pri]==i[this.pri]));this.$set(this.items,t,i),this.sel={}}}))},OnDel(t){this.delRow(t)},delRow(t){let e=t[this.pri],i=this.items.findIndex((t=>t[this.pri]==e));this.items.splice(i,1),this.totalRows=this.items.length,this.lastPage=this.getLastPage(this.totalRows)},doCancel(t){for(let e in t)t[e]!=this.sel[e]&&(t[e]=this.sel[e])},isAdded(){let t=!1;return this.items.forEach((e=>{0==e[this.pri]&&(t=!0)})),t},OnEdit(t){"{}"==JSON.stringify(this.sel)&&(this.sel=JSON.parse(JSON.stringify(t)))},OnCancel(t){if(0==t[this.pri]){let e=this.items.findIndex((e=>e[this.pri]==t[this.pri]));this.items.splice(e,1),this.adding=!1,this.$refs.mytable.refresh()}else this.doCancel(t),this.sel={}},OnAdd(){let t={id:0,name:"Thức"};this.items.unshift(t),this.adding=!0,this.currentPage=1,this.totalRows=this.items.length,this.$refs.mytable.refresh()},isEditing(){return"{}"!=JSON.stringify(this.sel)},getLastPage(t){let e=this.perPage,i=t%e;return 0==i?t/e:(t-i)/e+1},info(t,e,i){this.infoModal.title=`Row index: ${e}`,this.infoModal.content=JSON.stringify(t,null,2),this.$root.$emit("bv::show::modal",this.infoModal.id,i)},resetInfoModal(){this.infoModal.title="",this.infoModal.content=""},onFiltered(t){this.totalRows=t.length,this.currentPage=1},toast(t,e=null){this.$bvToast.toast(t,{title:"Information",variant:e,solid:!0})}}},m=d,c=i(1001),p=(0,c.Z)(m,n,s,!1,null,null,null),u=p.exports},24805:function(t,e){e["Z"]='<template>\n  <b-container fluid>\n    <raw-loader :mytxt="require(\'!raw-loader!./Basic.vue\').default"></raw-loader>\n    <form @submit.stop.prevent="onSave">\n      <b-table ref="mytable" :items="items" :fields="fields" :current-page="currentPage" :per-page="perPage"\n        :filter="filter" :filter-included-fields="filterOn" :sort-by.sync="sortBy" :sort-desc.sync="sortDesc"\n        :sort-direction="sortDirection" stacked="md" show-empty small fixed outlined bordered @filtered="onFiltered">\n\n        <template v-slot:cell()="{ value, item, field: { key } }">\n          <template v-if="sel[pri] != item[pri]">\n            <template v-if="item[pri] != 0">\n              <template v-if="key == pri">\n                {{ value }}\n              </template>\n              <template v-if="key == \'name\'">\n                {{ value }}\n              </template>\n            </template>\n          </template>\n          <template v-if="(sel[pri] == item[pri] || item[pri] == 0)">\n            <template v-if="key == pri">\n              <span>{{ value }}</span>\n            </template>\n            <template v-if="key == \'name\'">\n              <b-form-input autocomplete="off" v-model="item[key]" :name="key" v-validate="\'required\'" placeholder=""\n                :class="{ \'ko-hop-le\': errors.has(key) }">\n              </b-form-input>\n            </template>\n          </template>\n        </template>\n\n        <template #cell(cmd)="row">\n          <template v-if="row.item[pri] == 0">\n            <b-button variant="outline" class="mr-1" size="sm" @click="onSave(row.item)">\n              <b-icon-hand-thumbs-up></b-icon-hand-thumbs-up>\n            </b-button>\n            <b-button variant="outline" class="mr-1" size="sm" @click="OnCancel(row.item)">\n              <b-icon-file-x></b-icon-file-x>\n            </b-button>\n          </template>\n          <template v-else>\n            <b-button variant="outline" :disabled="isAdded() == true" class="mr-1" v-if="sel[pri] != row.item[pri]" size="sm"\n              @click="OnEdit(row.item)">\n              <b-icon-pencil-square></b-icon-pencil-square>\n            </b-button>\n            <b-button variant="outline" :disabled="isAdded() == true" class="mr-1" v-if="sel[pri] != row.item[pri]" size="sm"\n              @click="OnDel(row.item)">\n              <b-icon-trash></b-icon-trash>\n            </b-button>\n            <b-button variant="outline" class="mr-1" v-if="sel[pri] == row.item[pri]" size="sm" @click="onSave(row.item)">\n              <b-icon-hand-thumbs-up></b-icon-hand-thumbs-up>\n            </b-button>\n            <b-button variant="outline" class="mr-1" v-if="sel[pri] == row.item[pri]" size="sm" @click="OnCancel(row.item)">\n              <b-icon-file-x></b-icon-file-x>\n            </b-button>\n          </template>\n        </template>\n\n        <template #bottom-row="data">\n          <td :colspan="data.columns">\n            <b-row>\n              <b-col sm="6" class="my-1">\n                <b-form-group label="Filter" label-for="filter-input" label-cols-sm="3" label-align-sm="right"\n                  label-size="sm" class="mb-0">\n                  <b-input-group size="sm">\n                    <b-form-input id="filter-input" v-model="filter" type="search"\n                      placeholder="Type to Search"></b-form-input>\n                    <b-input-group-append>\n                      <b-button :disabled="!filter" @click="filter = \'\'">Clear</b-button>\n                    </b-input-group-append>\n                  </b-input-group>\n                </b-form-group>\n              </b-col>\n              <b-col sm="6" class="my-1">\n                <b-form-group label="Per page" label-for="per-page-select" label-cols-sm="6" label-cols-md="4"\n                  label-cols-lg="3" label-align-sm="right" label-size="sm" class="mb-0">\n                  <b-form-select id="per-page-select" v-model="perPage" :options="pageOptions"\n                    size="sm"></b-form-select>\n                </b-form-group>\n              </b-col>\n              <b-col sm="6" class="my-1 text-right">\n                page :{{ currentPage }} / {{ getLastPage(totalRows) }} of {{ totalRows }}\n                <b-button :disabled="adding == true || isEditing() == true" @click="OnAdd"\n                  size="sm"><b>Add</b></b-button>\n              </b-col>\n              <b-col sm="6" class="my-1">\n                <b-pagination :disabled=" adding == true || isEditing() == true " v-model="currentPage" :total-rows="totalRows" :per-page="perPage" align="fill" size="sm"\n                  class="my-0"></b-pagination>\n              </b-col>\n            </b-row>\n\n          </td>\n        </template>\n\n      </b-table>\n    </form>\n    \x3c!-- Info modal --\x3e\n    <b-modal :id="infoModal.id" :title="infoModal.title" ok-only @hide="resetInfoModal">\n      <pre>{{ infoModal.content }}</pre>\n    </b-modal>\n  </b-container>\n</template>\n\n<script>\n\nimport VeeValidate from "vee-validate";\nimport Vue from "vue";\nVue.use(VeeValidate, {\n  classes: true,\n  fieldsBagName: \'veeFields\'\n});\n\nimport moment from "moment";\n\nimport vSelect from "vue-select";\nVue.component("v-select", vSelect);\n//import "vue-select/dist/vue-select.css";\n\nexport default {\n  data() {\n    return {\n      items: [\n      ],\n      fields: [\n        {\n          key: \'id\',\n          formatter: (value, key, item) => {\n            let text = value.toString();\n            return (text.length < 4) ? text : text.substring(0, 4) + "...";\n          },\n          sortable: true,\n          thClass: \'text-center\',\n          tdClass: \'text-center align-middle\',\n          //tdClass: \'align-middle\'\n          thStyle: { width: "10%" },\n        },\n        { key: \'name\', sortable: true, thClass: \'text-center\', tdClass: \'align-middle\', thStyle: { width: "80%" }},\n        {\n          key: \'cmd\',\n          class: \'text-center\',\n          thClass: \'text-center\',\n          tdClass: \'align-middle\',\n          thStyle: { width: "10%" }\n        }\n      ],\n      totalRows: 1,\n      currentPage: 1,\n      perPage: 3,\n      pageOptions: [3,5, 10, 15, { value: 100, text: "Show a lot" }],\n      sortBy: \'\',\n      sortDesc: false,\n      sortDirection: \'asc\',\n      filter: null,\n      filterOn: [],\n      infoModal: {\n        id: \'info-modal\',\n        title: \'\',\n        content: \'\'\n      },\n\n      sel: {},\n      pri: \'id\',\n      adding: false,\n      lastPage:0,\n\n    }\n  },\n  computed: {\n    sortOptions() {\n      // Create an options list from our fields\n      return this.fields\n        .filter(f => f.sortable)\n        .map(f => {\n          return { text: f.label, value: f.key }\n        })\n    }\n  },\n  mounted() {\n    let items = [\n    ];\n    for(var i=1;i<6;i++){\n      items.push({\n        id:i,\n        name:`thuc ${i}`\n      })\n    }\n    this.items = items;\n    this.totalRows = this.items.length;\n    this.lastPage=this.getLastPage(this.totalRows);\n  },\n  methods: {\n    createId(){\n      let max=0;\n      this.items.forEach(x=>{\n        if(x[this.pri] > max){\n          max=x[this.pri];\n        }\n      })\n      return max+1;\n    },\n    onSave(item) {\n      this.$validator.validateAll().then((result) => {\n        if (!result) {\n          this.toast("Không hợp lệ");\n          return;\n        }\n        let r = JSON.parse(JSON.stringify(item));\n        //alert(JSON.stringify(r));\n        //return;\n        if(r[this.pri]==0){\n          let index = this.items.findIndex(x => x[this.pri] == r[this.pri]);\n          r[this.pri] = this.createId();//new Date().getTime();\n          this.$set(this.items, index, r);\n          this.adding=false;\n          this.$refs.mytable.refresh();\n        }else{\n          let index = this.items.findIndex(x => x[this.pri] == r[this.pri]);\n          this.$set(this.items, index, r);\n          this.sel={};\n        }\n      });\n    },\n    OnDel(item) {\n      this.delRow(item);\n    },\n    delRow(item) {\n      let id = item[this.pri];\n      let index = this.items.findIndex(x => x[this.pri] == id);\n      this.items.splice(index, 1);\n      this.totalRows = this.items.length;\n      this.lastPage = this.getLastPage(this.totalRows);\n    },\n    doCancel(item) {\n      for (let key in item) {\n        if (item[key] != this.sel[key]) {\n          item[key] = this.sel[key]\n        }\n      }\n    },\n    isAdded() {\n      let kq = false;\n      this.items.forEach(x => {\n        if (x[this.pri] == 0) kq = true;\n      })\n      return kq;\n    },\n    OnEdit(item) {\n      if (JSON.stringify(this.sel) != "{}") return;\n      this.sel = JSON.parse(JSON.stringify(item));\n    },\n    OnCancel(item) {\n      if (item[this.pri] == 0) {\n        let index = this.items.findIndex(x => x[this.pri] == item[this.pri]);\n        this.items.splice(index, 1);\n        this.adding = false;\n        this.$refs.mytable.refresh();\n      } else {\n        this.doCancel(item);\n        this.sel = {};\n      }\n    },\n    OnAdd() {\n      let r = {\n        id: 0,\n        name: \'Thức\',\n      }\n      this.items.unshift(r);\n      this.adding = true;\n      this.currentPage=1;\n      this.totalRows=this.items.length;\n      this.$refs.mytable.refresh();\n    },\n    isEditing() {\n      return JSON.stringify(this.sel) != "{}"\n    },\n    getLastPage(count) {\n      let pageSize = this.perPage;//this.tabulator.getPageSize();\n      let du = count % pageSize;\n      return du == 0 ? count / pageSize : (count - du) / pageSize + 1;\n    },\n    info(item, index, button) {\n      this.infoModal.title = `Row index: ${index}`\n      this.infoModal.content = JSON.stringify(item, null, 2)\n      this.$root.$emit(\'bv::show::modal\', this.infoModal.id, button)\n    },\n    resetInfoModal() {\n      this.infoModal.title = \'\'\n      this.infoModal.content = \'\'\n    },\n    onFiltered(filteredItems) {\n      this.totalRows = filteredItems.length\n      this.currentPage = 1\n    },\n    toast(msg, variant = null) {\n      this.$bvToast.toast(msg, {\n        title: `Information`,\n        variant: variant,\n        solid: true,\n      });\n    },\n\n  }\n}\n<\/script>\n'}}]);
//# sourceMappingURL=1952.4b8bf69f.js.map