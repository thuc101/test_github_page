"use strict";(self["webpackChunkvue_start_1"]=self["webpackChunkvue_start_1"]||[]).push([[4530],{34530:function(t,e,n){n.r(e),n.d(e,{default:function(){return g}});var r=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",[r("raw-loader",{attrs:{mytxt:n(48386).Z}}),r("h1",[t._v("This is KonvaVue")]),r("b-row",[r("b-col",{staticClass:"border-right",attrs:{sm:"3"}},[r("div",{staticClass:"mb-1"},[r("button",{staticClass:"mr-1",attrs:{disabled:1!=t.Sel.length},on:{click:t.onDel}},[t._v("Del")]),r("button",{staticClass:"mr-1",attrs:{disabled:2!=t.Sel.length},on:{click:t.onInsert}},[t._v("Insert")]),r("button",{staticClass:"mr-1",on:{click:t.onSave}},[t._v("Save")]),r("button",{staticClass:"mr-1",on:{click:t.onReset}},[t._v("Reset")])]),r("div",{attrs:{id:"stage-parent"}},[r("div",{staticClass:"border",attrs:{id:"container"}},[r("v-stage",{ref:"stage",attrs:{config:t.configKonva},on:{click:t.onStageClick,mousemove:t.onStageMouseMove}},[r("v-layer",{ref:"layer"},[r("v-circle",{attrs:{config:t.configCircle}}),r("v-rect",{ref:"rect",attrs:{config:{x:100,y:100,width:150,height:150,fill:"yellow",stroke:"blue",strokeWidth:5,draggable:!0,visible:!1}}}),r("v-line",{ref:"line",attrs:{config:{points:[100,100,400,200],stroke:"gray",strokeWidth:5,lineCap:"round",lineJoin:"round",draggable:!0,visible:!1}}}),r("v-shape",{ref:"nice",attrs:{config:{sceneFunc:function(t,e){var n=-20,r=-50;t.beginPath(),t.moveTo(n+20,r+50),t.lineTo(n+220,r+80),t.quadraticCurveTo(n+150,r+100,n+260,r+170),t.closePath(),t.fillStrokeShape(e)},fill:"#00D2FF",stroke:"black",strokeWidth:4,visible:!0,draggable:!0,visible:!1}}}),r("v-shape",{ref:"ball",attrs:{config:{x:150,y:150,r:90,text:"1",fontSize:50,fill:"aqua",stroke:"black",textcolor:"red",strokeWidth:5,draggable:!0,sel:!1,visible:!1,sceneFunc:function(t,e){var n=e.getAttr("fontSize");t.beginPath(),t.arc(0,0,e.getAttr("r"),0,2*Math.PI),t.fillStrokeShape(e);var r=e.getAttr("textcolor");t.fillStyle=r,t.textBaseline="middle",t.textAlign="center",t.font=n+"px verdana",t.fillText(""+e.getAttr("text"),0,0)}}}}),r("v-shape",{ref:"board",attrs:{config:{x:50,y:50,width:300,height:100,text:"Thá»©c 101",fontSize:60,fill:"yellow",stroke:"red",strokeWidth:1,draggable:!0,visible:!1,sceneFunc:function(t,e){var n=e.getAttr("fontSize");t.beginPath(),t.rect(0,0,e.getAttr("width"),e.getAttr("height")),t.fillStrokeShape(e),t.fillStyle="red",t.textBaseline="middle",t.textAlign="center",t.font=n+"px Times New Roman",t.fillText(""+e.getAttr("text"),e.getAttr("width")/2,e.getAttr("height")/2)}}}})],1)],1)],1)])]),r("b-col",{attrs:{sm:"9"}},[t._v(" "+t._s(t.msg)+t._s(t.hover)+" "),r("div",{staticClass:"row no-gutters border-top p-1"},t._l(t.listData,(function(e,n){return r("div",{key:n,staticClass:"mb-1 mr-1 col-sm-2"},[r("div",{class:n==t.hover?"border border-primary":"",staticStyle:{position:"relative"},on:{mouseover:function(e){t.hover=n},mouseout:function(e){t.hover=-1}}},[r("img",{staticClass:"img-thumbnail",attrs:{src:e.src},on:{click:function(n){return t.onView(e.data)}}}),r("button",{staticClass:"m-1",staticStyle:{position:"absolute",bottom:"0",right:"0"},on:{click:function(e){return t.onDelData(n)}}},[t._v("Del")])])])})),0)])],1)],1)},i=[],l=1500,a=1e3,o=null,s=null,d={name:"Tpl",components:{},computed:{test(){return"hello"}},data(){return{msg:"hello",configKonva:{width:l,height:a},configCircle:{x:l/2,y:a/2,radius:90,fill:"yellow",stroke:"black",strokeWidth:5,draggable:!0,visible:!1},count:0,Sel:[],arPoint:[],listData:[],hover:-1,selColor:"",p:{},arSel:[],unLink:!1}},mounted(){this.$nextTick((function(){s=this.$refs.layer.getNode(),o=this.$refs.stage.getNode(),window.addEventListener("resize",this.fitStageIntoParentContainer),this.fitStageIntoParentContainer()}))},created(){},methods:{onReset(){this.arPoint.forEach(((t,e)=>{s.find(`#${t.id}`)[0].destroy()})),this.arPoint=[],this.count=0,this.draw()},onView(t){this.arPoint.forEach(((t,e)=>{s.find(`#${t.id}`)[0].destroy()})),this.arPoint=JSON.parse(JSON.stringify(t.arPoint)),this.count=t.count,this.arPoint.forEach(((t,e)=>{let n=this.createBall(t.x,t.y,60,"myball",t.id.toString());s.add(n)})),this.draw()},onDelData(t){this.listData.splice(t,1)},onSave(){let t=o.toDataURL(),e={arPoint:this.arPoint,count:this.count};this.listData.push({src:t,data:JSON.parse(JSON.stringify(e))})},onDel(){let t=this.Sel[0];s.find(`#${t}`)[0].destroy();let e=this.arPoint.findIndex((e=>e.id==t));this.arPoint.splice(e,1),this.draw()},insert(t,e){let n=s.find(`#${t}`)[0],r=Math.floor(n.x()),i=Math.floor(n.y()),l=s.find(`#${e}`)[0],a=Math.floor(l.x()),o=Math.floor(l.y()),d=Math.floor((r+a)/2),c=Math.floor((i+o)/2),h=this.count;this.count++;let f=this.arPoint.findIndex((e=>e.id==t)),g=this.arPoint.findIndex((t=>t.id==e)),u=f<g?f:g;this.arPoint.splice(u+1,0,{id:h,x:d,y:c});let x=this.createBall(d,c,60,"myball",h.toString());s.add(x),this.draw()},onInsert(){let t=this.Sel[0],e=this.Sel[1],n=this.arPoint.findIndex((e=>e.id==t)),r=this.arPoint.findIndex((t=>t.id==e));1==Math.abs(n-r)?this.insert(t,e):alert("can not insert")},draw(){if(0==this.getListLine().length){let t=this.createLine("myline");s.add(t)}let t=this.getListLine()[0],e=(this.getListBall(),[]);this.arPoint.forEach(((t,n)=>{let r=t.x,i=t.y;e.push(r),e.push(i)})),t.points(e),t.moveToBottom(),this.msg={arPoint:this.arPoint,count:this.count}},createLine(t){let e=this.$refs.line.getNode().clone();return e.visible(!0),e.name(t),e},createBall(t,e,n,r,i){let l=this,a=this.$refs.ball.getNode().clone();return a.visible(!0),a.x(t),a.y(e),a.setAttr("r",n),a.fill("yellow"),a.stroke("black"),a.name(r),a.id(i),a.setAttr("text",i),a.on("click",(function(t){let e,n,r=t.target.fill();"blue"==r?(e="yellow",n="red"):(e="blue",n="white"),t.target.fill(e),t.target.setAttr("textcolor",n),l.Sel=l.getSel(),l.draw()})),a.on("mouseover",(function(t){})),a.on("mouseout",(function(t){})),a.on("dragend",(function(t){let e=t.target,n=e.id(),r=Math.floor(e.x()),i=Math.floor(e.y()),a=l.arPoint.findIndex((t=>t.id==n));l.arPoint[a]={id:n,x:r,y:i},l.draw()})),a.on("dragmove",(function(t){let e=t.target,n=e.id(),r=Math.floor(e.x()),i=Math.floor(e.y()),a=l.arPoint.findIndex((t=>t.id==n));l.arPoint[a]={id:n,x:r,y:i},l.draw()})),a},getSel(){let t=[],e=s.find(".myball");return e.forEach(((e,n)=>{"blue"==e.fill()&&t.push(parseInt(e.id()))})),t},onStageClick(t){let e=t.target.name();if("myball"==e)return;let n=this.myGetMouse(),r=this.createBall(n.x,n.y,60,"myball",this.count.toString());this.arPoint.push({id:this.count,x:n.x,y:n.y}),this.count++,s.add(r),this.draw()},onStageMouseMove(t){},getListRect(){return s.find(".myrect")},getListLine(){return s.find(".myline")},getListBall(){return s.find(".myball")},myGetMouse(){let t=o.scale().x;var e=o.getPointerPosition(),n=e.x,r=e.y,i=Math.round(n/t),l=Math.round(r/t);return{x:i,y:l}},fitStageIntoParentContainer(){var t=document.querySelector("#stage-parent"),e=t.offsetWidth,n=e/l;o.width(l*n),o.height(a*n),o.scale({x:n,y:n}),this.configKonva.width=l*n,this.configKonva.height=a*n}}},c=d,h=n(1001),f=(0,h.Z)(c,r,i,!1,null,"df77f50c",null),g=f.exports},48386:function(t,e){e["Z"]='<template>\r\n  <div>\r\n    <raw-loader :mytxt=" require(\'!raw-loader!./KonvaVueLine2.vue\').default "></raw-loader> \r\n    <h1>This is KonvaVue</h1>\r\n    <b-row>\r\n      <b-col sm="3" class="border-right">\r\n        <div class="mb-1">\r\n          <button class="mr-1" :disabled=" (Sel.length==1) ? false : true " @click="onDel">Del</button>\r\n          <button class="mr-1" :disabled=" (Sel.length==2) ? false : true " @click="onInsert">Insert</button>\r\n          <button class="mr-1" @click="onSave">Save</button>\r\n          <button class="mr-1" @click="onReset">Reset</button>\r\n        </div>\r\n          <div id="stage-parent">\r\n            <div id="container" class="border">\r\n                <v-stage ref="stage"\r\n                    @click="onStageClick"\r\n                    @mousemove="onStageMouseMove" \r\n                    :config="configKonva" >\r\n                    <v-layer ref="layer">\r\n                        <v-circle :config="configCircle"></v-circle>\r\n                        <v-rect ref="rect" \r\n                            :config="{\r\n                                x: 100,\r\n                                y: 100,\r\n                                width: 150,\r\n                                height: 150,\r\n                                fill: \'yellow\',\r\n                                stroke:\'blue\',\r\n                                strokeWidth:5,\r\n                                //shadowBlur: 10,\r\n                                draggable:true,\r\n                                visible:false\r\n                            }"\r\n                        />\r\n                        <v-line ref="line" :config="{\r\n                          points: [100,100,400,200],\r\n                          stroke: \'gray\',\r\n                          strokeWidth: 5,\r\n                          lineCap: \'round\',\r\n                          lineJoin: \'round\',\r\n                          draggable:true,\r\n                          visible: false\r\n                        }"></v-line>\r\n                        <v-shape ref="nice"\r\n                          :config="{\r\n                            sceneFunc: function(context, shape) {\r\n                              let x=-20;\r\n                              let y=-50;\r\n                              context.beginPath();\r\n                              context.moveTo(x+20, y+50);\r\n                              context.lineTo(x+220, y+80);\r\n                              context.quadraticCurveTo(x+150, y+100, x+260, y+170);\r\n                              context.closePath();\r\n                              context.fillStrokeShape(shape);\r\n                            },\r\n                            fill: \'#00D2FF\',\r\n                            stroke: \'black\',\r\n                            strokeWidth: 4,\r\n                            visible: true,\r\n                            draggable:true,\r\n                            visible:false,\r\n                          }"\r\n                        />\r\n                        <v-shape ref="ball"\r\n                          :config="{\r\n                            x:150,\r\n                            y:150,\r\n                            r:90,\r\n                            text:\'1\',\r\n                            fontSize:50,\r\n                            fill: \'aqua\',\r\n                            stroke: \'black\',\r\n                            textcolor:\'red\',\r\n                            strokeWidth: 5,\r\n                            draggable:true,  \r\n                            sel:false,      \r\n                            visible:false,\r\n                            sceneFunc: function (context, shape) {\r\n                              let fontSize=shape.getAttr(\'fontSize\');//40;\r\n                              context.beginPath();\r\n                              context.arc(0, 0, shape.getAttr(\'r\'), 0, 2 * Math.PI);\r\n                              context.fillStrokeShape(shape);\r\n                              let textcolor=shape.getAttr(\'textcolor\');\r\n                              context.fillStyle=textcolor;//\'white\';\r\n                              context.textBaseline = \'middle\'; \r\n                              context.textAlign = \'center\';\r\n                              context.font=`${fontSize}px verdana`;//verdana//Times New Roman\r\n                              context.fillText(`${shape.getAttr(\'text\')}`, 0,0);\r\n\r\n                            }\r\n                          }"\r\n                        />\r\n                        <v-shape ref="board" :config="{\r\n                          x:50,\r\n                          y:50,\r\n                          width:300,\r\n                          height:100,\r\n                          text:\'Thá»©c 101\',\r\n                          fontSize:60,\r\n                          fill: \'yellow\',\r\n                          stroke: \'red\',\r\n                          strokeWidth: 1,\r\n                          draggable:true, \r\n                          visible:false,       \r\n                          sceneFunc: function (context, shape) {\r\n                            let fontSize=shape.getAttr(\'fontSize\');\r\n                            context.beginPath();\r\n                            context.rect(0, 0, shape.getAttr(\'width\'), shape.getAttr(\'height\'));\r\n                            context.fillStrokeShape(shape);\r\n                            context.fillStyle=\'red\';\r\n                            context.textBaseline = \'middle\'; \r\n                            context.textAlign = \'center\';\r\n                            context.font=`${fontSize}px Times New Roman`;\r\n                            context.fillText(`${shape.getAttr(\'text\')}`, shape.getAttr(\'width\')/2,shape.getAttr(\'height\')/2);\r\n                          }\r\n                        }">\r\n                        </v-shape>\r\n                    </v-layer>\r\n                </v-stage>\r\n            </div>\r\n          </div>\r\n\r\n      </b-col>\r\n      <b-col sm="9">\r\n        {{msg}}{{hover}}\r\n        <div class="row no-gutters border-top p-1">\r\n          <div v-for="(x,i) in listData" :key="i" class="mb-1 mr-1 col-sm-2">\r\n            <div :class=" (i==hover) ? \'border border-primary\' : \'\' " style="position:relative" @mouseover=" hover=i " @mouseout=" hover=-1 " >\r\n              <img :src=" x.src " @click="onView(x.data)" class="img-thumbnail" >\r\n              <button @click="onDelData(i)" class="m-1" style="position:absolute; bottom:0; right: 0;">Del</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage=null;\r\nvar layer=null;\r\nexport default {\r\n  name: \'Tpl\',\r\n  components: {\r\n  },\r\n  computed: {\r\n  \ttest () {\r\n    \treturn \'hello\'\r\n    },\r\n  },\r\n  data(){\r\n    return{\r\n        msg:"hello",\r\n        configKonva: {\r\n          width: sceneWidth,\r\n          height: sceneHeight\r\n        },\r\n        configCircle: {\r\n          x: sceneWidth/2,\r\n          y: sceneHeight/2,\r\n          radius: 90,\r\n          fill: "yellow",\r\n          stroke: "black",\r\n          strokeWidth: 5,\r\n          draggable:true,\r\n          visible:false,\r\n        },\r\n        count:0,\r\n        Sel:[],\r\n        arPoint:[],\r\n        listData:[],\r\n        hover:-1,\r\n        selColor:\'\',\r\n\r\n        p:{},\r\n        arSel:[],\r\n        unLink:false,\r\n    }\r\n  },\r\n  mounted(){\r\n    this.$nextTick(function(){\r\n      layer=this.$refs.layer.getNode();\r\n      stage=this.$refs.stage.getNode();\r\n      window.addEventListener("resize", this.fitStageIntoParentContainer);\r\n      this.fitStageIntoParentContainer();\r\n    })\r\n  },\r\n  created(){\r\n  },\r\n  methods:{\r\n    onReset(){\r\n      this.arPoint.forEach((x,i)=>{\r\n        layer.find(`#${x.id}`)[0].destroy();\r\n      })\r\n      this.arPoint=[];\r\n      this.count=0;\r\n      this.draw();\r\n    },\r\n    onView(data){\r\n      this.arPoint.forEach((x,i)=>{\r\n        layer.find(`#${x.id}`)[0].destroy();\r\n      })\r\n      this.arPoint= JSON.parse(JSON.stringify(data.arPoint));\r\n      this.count=data.count;\r\n      this.arPoint.forEach((x,i)=>{\r\n        let ball=this.createBall(x.x,x.y,60,\'myball\',x.id.toString());\r\n        layer.add(ball);\r\n      })\r\n      this.draw();\r\n    },    \r\n    onDelData(i){\r\n      this.listData.splice(i,1);\r\n    },    \r\n    onSave(){\r\n      let src = stage.toDataURL();\r\n      let data={ "arPoint": this.arPoint, "count": this.count };\r\n      this.listData.push({src:src,data:JSON.parse(JSON.stringify(data))})//<--------------------cáº©n tháº­n Khi save data\r\n    },\r\n    onDel(){\r\n      let id=this.Sel[0];\r\n      layer.find(`#${id}`)[0].destroy();\r\n      let index=this.arPoint.findIndex(x=>x.id==id);\r\n      this.arPoint.splice(index,1);\r\n      this.draw();\r\n    },\r\n    insert(id1,id2){\r\n      let p1= layer.find(`#${id1}`)[0];\r\n      let x1= Math.floor(p1.x());\r\n      let y1= Math.floor(p1.y());\r\n      let p2= layer.find(`#${id2}`)[0];\r\n      let x2=Math.floor(p2.x());\r\n      let y2=Math.floor(p2.y());\r\n      let x= Math.floor((x1+x2)/2);//Math.abs(x1-x2)/2;\r\n      let y= Math.floor((y1+y2)/2);//Math.abs(y1-y2)/2;\r\n      let id=this.count;\r\n      this.count++;\r\n      let index1=this.arPoint.findIndex(x=>x.id==id1);\r\n      let index2=this.arPoint.findIndex(x=>x.id==id2);\r\n      let index=(index1 < index2) ? index1 : index2;\r\n      this.arPoint.splice(index+1,0,{id:id,x:x,y:y});\r\n      let ball=this.createBall(x,y,60,\'myball\',id.toString());\r\n      layer.add(ball);\r\n      this.draw();\r\n    },\r\n    onInsert(){\r\n      let id1=this.Sel[0];\r\n      let id2=this.Sel[1];\r\n      let index1=this.arPoint.findIndex(x=>x.id==id1);\r\n      let index2=this.arPoint.findIndex(x=>x.id==id2);\r\n      if(Math.abs( index1-index2)==1){\r\n        this.insert(id1,id2);\r\n      }else{\r\n        alert("can not insert");\r\n      }\r\n    },\r\n    draw(){\r\n      if(this.getListLine().length==0){\r\n        let line=this.createLine("myline");\r\n        layer.add(line);\r\n      }\r\n      let myline=this.getListLine()[0];\r\n      let lBall=this.getListBall();\r\n      let ar=[];\r\n      this.arPoint.forEach((x,i)=>{\r\n        let x1=x.x;\r\n        let y1=x.y;\r\n        ar.push(x1);\r\n        ar.push(y1);\r\n      })\r\n      myline.points(ar);\r\n      myline.moveToBottom();\r\n      this.msg={\r\n        arPoint:this.arPoint,\r\n        count:this.count,\r\n      }\r\n    },\r\n    createLine(name){\r\n      let line=this.$refs.line.getNode().clone();\r\n      line.visible(true);\r\n      line.name(name);\r\n      return line;\r\n    },\r\n    createBall(x,y,r,name,id){\r\n      let that=this;\r\n      let ball=this.$refs.ball.getNode().clone();\r\n      ball.visible(true);\r\n      ball.x(x);\r\n      ball.y(y);\r\n      ball.setAttr(\'r\',r);\r\n      ball.fill("yellow");\r\n      ball.stroke(\'black\');\r\n      ball.name(name);\r\n      ball.id(id);\r\n      ball.setAttr("text",id);\r\n      ball.on("click",function(e){\r\n        let color=e.target.fill();\r\n        let colorFill;\r\n        let colorText;\r\n        if(color==\'blue\'){\r\n          colorFill=\'yellow\';\r\n          colorText=\'red\';\r\n        }else{\r\n          colorFill=\'blue\';\r\n          colorText=\'white\';\r\n        }\r\n        e.target.fill(colorFill);\r\n        e.target.setAttr(\'textcolor\',colorText);\r\n        that.Sel=that.getSel();\r\n        that.draw();\r\n      });\r\n      ball.on(\'mouseover\',function(e){\r\n        // that.selColor=e.target.fill();\r\n        // e.target.fill(\'red\');\r\n      });\r\n      ball.on(\'mouseout\',function(e){\r\n        // e.target.fill(that.selColor);\r\n      });\r\n      ball.on("dragend",function(e){\r\n        let ball=e.target;\r\n        let id=ball.id();\r\n        let x=Math.floor(ball.x());\r\n        let y=Math.floor(ball.y());\r\n        let index=that.arPoint.findIndex(x=>x.id==id);\r\n        that.arPoint[index]={id:id,x:x,y:y};\r\n        that.draw();\r\n      });\r\n      ball.on("dragmove",function(e){\r\n        let ball=e.target;\r\n        let id=ball.id();\r\n        let x=Math.floor(ball.x());\r\n        let y=Math.floor(ball.y());\r\n        let index=that.arPoint.findIndex(x=>x.id==id);\r\n        that.arPoint[index]={id:id,x:x,y:y};\r\n        that.draw();\r\n      });\r\n      return ball;\r\n    },\r\n    getSel(){\r\n      let kq=[];\r\n      let l=layer.find(".myball");\r\n      l.forEach((x,i)=>{\r\n        if(x.fill()==\'blue\'){\r\n          kq.push( parseInt (x.id()))\r\n        }\r\n      })\r\n      return kq;\r\n    },\r\n    onStageClick(e){\r\n      let chk=e.target.name();\r\n      if(chk==\'myball\'){\r\n        return;\r\n      }\r\n      let p=this.myGetMouse();\r\n      let ball=this.createBall(p.x,p.y,60,"myball",this.count.toString());\r\n      this.arPoint.push({id:this.count,x:p.x,y:p.y});\r\n      this.count++;\r\n      layer.add(ball);\r\n      this.draw();\r\n    },\r\n    onStageMouseMove(e){\r\n    },\r\n    getListRect(){ return layer.find(".myrect") },\r\n    getListLine(){ return layer.find(".myline") },\r\n    getListBall(){ return layer.find(".myball") },\r\n    myGetMouse() {\r\n      let scale=stage.scale().x;\r\n      var mousePos = stage.getPointerPosition();\r\n      var x = mousePos.x;\r\n      var y = mousePos.y;\r\n      var xx = Math.round(x / scale);\r\n      var yy = Math.round(y / scale);\r\n      return { x: xx, y: yy };\r\n    },\r\n    fitStageIntoParentContainer() {\r\n      var container = document.querySelector(\'#stage-parent\');\r\n      var containerWidth = container.offsetWidth;\r\n      var scale = containerWidth / sceneWidth;\r\n      stage.width(sceneWidth * scale);\r\n      stage.height(sceneHeight * scale);\r\n      stage.scale({ x: scale, y: scale });\r\n      this.configKonva.width = sceneWidth * scale;\r\n      this.configKonva.height = sceneHeight * scale;\r\n    },\r\n  }\r\n}\r\n<\/script>\r\n<style scoped>\r\n</style>\r\n'}}]);
//# sourceMappingURL=4530.13b45266.js.map