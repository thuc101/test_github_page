"use strict";(self["webpackChunkvue_start_1"]=self["webpackChunkvue_start_1"]||[]).push([[491],{50491:function(t,e,n){n.r(e),n.d(e,{default:function(){return p}});var r=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"tpl"},[r("raw-loader",{attrs:{mytxt:n(38780).Z}}),r("h1",[t._v("This is Tabulator2")]),r("div",[r("div",{staticClass:"mb-1"},[r("button",{staticClass:"mr-1",on:{click:t.onTest}},[t._v("Test")])]),t._v(" "+t._s(t.msg)+" "),r("div",{ref:"table"})])],1)},a=[],o=n(60911),l=n(19755),i=n.n(l),d=n(12954),s=n(20144);s["default"].use(d.ZP,{classes:!0});var c={name:"Tpl",components:{},data(){return{msg:"thuc 101",tabulator:null,msg:"",tableData:[{id:1,name:"thuc 101"},{id:2,name:"thuc 102"},{id:3,name:"thuc 103"}]}},mounted(){let t=this;this.tabulator=new o.Ae(this.$refs.table,{reactiveData:!0,data:this.tableData,layout:"fitColumns",responsiveLayout:"hide",tooltips:!0,addRowPos:"top",history:!0,pagination:"local",paginationSize:2,paginationCounter:"rows",paginationInitialPage:1,paginationSizeSelector:[5,10,20,30,50],movableColumns:!0,initialSort:[{column:"name",dir:"asc"}],height:i()(window).innerHeight()-400,layout:"fitDataFill",index:"id",pageLoaded:function(t){alert(t)},columns:[{title:"STT",formatter:"rownum",headerHozAlign:"center",hozAlign:"center"},{title:"Cmd",headerHozAlign:"center",hozAlign:"center",headerSort:!1,width:110,formatter:function(e,n,r){r((function(){i()(e.getElement()).find("#del").on("click",e.getRow(),t.onDel),i()(e.getElement()).find("#save2").on("click",e.getRow(),t.onSave),i()(e.getElement()).find("#cancel").on("click",e.getData(),t.onCancel),1==e.getData().dirty&&i()(e.getElement()).find("#save2").text("Save (*)")}));let a=i()("<div>");return a.append(i()("<button>",{text:"Save",class:"mr-1"}).attr("id","save2")),0!=e.getRow().getIndex()?a.append(i()("<button>",{text:"Del"}).attr("id","del")):a.append(i()("<button>",{text:"Cancel"}).attr("id","cancel")),a[0]}},{title:"Name",field:"name",width:200,editor:"input",validator:["required"]}]}),this.tabulator.on("dataLoaded",(function(e){t.msg={data:e};let n=i()(t.$refs.table),r=i()("<span id='total' class='mr-1'>").text("[total]");0==n.find(".tabulator-footer-contents").find("span#total").length?n.find(".tabulator-footer-contents span.tabulator-paginator").prepend(r):n.find(".tabulator-footer-contents").find("span#total").text(`[${(new Date).getTime()}]`)})),this.tabulator.on("pageLoaded",(function(e){let n=i()(t.$refs.table);n.find(".tabulator-footer-contents").find("span#total").text(`[${(new Date).getTime()}]`)})),this.tabulator.on("cellEdited",(function(t){t.getRow().getIndex(),t.getRow();t.getData().dirty=!0}))},watch:{tableData:{handler:function(t){this.tabulator.replaceData(t)},deep:!0}},created(){},methods:{onDataLoaded(t){let e=[];t.forEach(((t,n)=>{e.push({x:t.id})}));let n=this.tabulator.getPage();this.msg={ar:e,curPage:n}},onTest(){let t=JSON.parse(JSON.stringify(this.tableData));this.tableData=[t[0],t[1]]},onSave(t){t.preventDefault();let e=t.data;if(1==this.rowValidate(e)){let t=e.getData();JSON.parse(JSON.stringify(t))}else this.toast("Dữ liệu không hợp lệ!")},onCancel(t){t.preventDefault(),this.setPage(this.getPage())},onDel(t){t.preventDefault();let e=t.data;e.getIndex()},onEdit(t){let e=t.data,n=e.getIndex(),r=e.getData();this.msg={cmd:"edit",id:n,data:r}}}},u=c,g=n(1001),h=(0,g.Z)(u,r,a,!1,null,null,null),p=h.exports},38780:function(t,e){e["Z"]='<template>\r\n  <div class="tpl">\r\n    <raw-loader :mytxt=" require(\'!raw-loader!./TabulatorVueJson2.vue\').default "></raw-loader>\r\n    <h1>This is Tabulator2</h1>\r\n    <div>\r\n      <div class="mb-1">\r\n        <button class="mr-1" @click="onTest" >Test</button>\r\n      </div>\r\n      {{msg}}\r\n      <div ref="table"></div>    \r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport {TabulatorFull as Tabulator} from \'tabulator-tables\';\r\nimport $ from "jquery";\r\n\r\nimport VeeValidate from "vee-validate";\r\nimport Vue from "vue";\r\nVue.use(VeeValidate, {\r\n  classes: true,\r\n});\r\n\r\n\r\n\r\nexport default {\r\n  name: \'Tpl\',\r\n  components: {\r\n  },\r\n  data(){\r\n    return {\r\n      msg:"thuc 101",\r\n      tabulator: null, //variable to hold your table\r\n      msg:"",\r\n      tableData: [\r\n        {id:1,name:"thuc 101"},\r\n        {id:2,name:"thuc 102"},\r\n        {id:3,name:"thuc 103"},\r\n      ], //data for table to display\r\n    }\r\n  },\r\n  mounted(){\r\n      let that=this;\r\n      this.tabulator = new Tabulator(this.$refs.table, {\r\n        // data: this.tableData, //link data to table\r\n        reactiveData:true, //enable data reactivity\r\n        // columns: [], //define table columns\r\n        data:this.tableData,           //load row data from array\r\n        layout:"fitColumns",      //fit columns to width of table\r\n        responsiveLayout:"hide",  //hide columns that dont fit on the table\r\n        tooltips:true,            //show tool tips on cells\r\n        addRowPos:"top",          //when adding a new row, add it to the top of the table\r\n        history:true,             //allow undo and redo actions on the table\r\n        pagination:"local",       //paginate the data\r\n        paginationSize:2,         //allow 7 rows per page of data\r\n        paginationCounter:"rows", //display count of paginated rows in footer\r\n\r\n        paginationInitialPage:1, //optional parameter to set the initial page to load    \r\n        paginationSizeSelector: [5, 10, 20, 30, 50],\r\n\r\n        movableColumns:true,      //allow column order to be changed\r\n        initialSort:[             //set the initial sort order of the data\r\n            {column:"name", dir:"asc"},\r\n        ],\r\n        //height:\'200px\',\r\n        height:$(window).innerHeight()-400,//\'200px\',//$(window).innerHeight()\r\n\r\n        //fitColumns:true,    \r\n        //layout:"fitData",  \r\n        layout:"fitDataFill",\r\n        //layout:"fitColumns",\r\n        index:"id",\r\n        pageLoaded: function (pageno) {\r\n          //$(that.$refs.table).find(".active").css({ "background-color": \'yellow\', "color": "red" });\r\n          alert(pageno);\r\n        },\r\n        columns: [                 //define the table columns\r\n          {\r\n            title: "STT",\r\n            formatter: "rownum",\r\n            headerHozAlign: "center",\r\n            hozAlign: "center",\r\n          },\r\n          {\r\n            title: "Cmd",\r\n            headerHozAlign: "center",\r\n            hozAlign: "center",\r\n            headerSort: false,\r\n            width: 110,\r\n            formatter: function (cell, formatterParams, onRendered) {\r\n              onRendered(function () {\r\n                //console.log(cell.getData().dirty);\r\n                $(cell.getElement()).find("#del").on("click", cell.getRow(), that.onDel);\r\n                $(cell.getElement()).find("#save2").on("click", cell.getRow(), that.onSave);\r\n                $(cell.getElement()).find("#cancel").on("click", cell.getData(), that.onCancel);\r\n                if (cell.getData().dirty == true) {\r\n                  $(cell.getElement()).find("#save2").text("Save (*)")\r\n                } else {\r\n                }\r\n              });\r\n              let $div = $("<div>");\r\n              $div.append(\r\n                $("<button>", { text: "Save", class: "mr-1" }).attr("id", "save2")\r\n              );\r\n              if (cell.getRow().getIndex() != 0) {\r\n                $div.append($("<button>", { text: "Del" }).attr("id", "del"));\r\n              } else {\r\n                $div.append(\r\n                  $("<button>", { text: "Cancel" }).attr("id", "cancel")\r\n                );\r\n              }\r\n              return $div[0];\r\n            },\r\n          },\r\n          {\r\n            title: "Name",\r\n            field: "name",\r\n            width: 200,\r\n            editor: "input",\r\n            validator: ["required"],\r\n          },\r\n        ],\r\n      });\r\n      this.tabulator.on("dataLoaded", function(data){\r\n        that.msg={data:data}\r\n        let $tabu=$(that.$refs.table);\r\n        let $span = $("<span id=\'total\' class=\'mr-1\'>").text("[total]");\r\n        if($tabu.find(".tabulator-footer-contents").find("span#total").length==0){\r\n          $tabu.find(".tabulator-footer-contents span.tabulator-paginator").prepend($span);\r\n        }else{\r\n          $tabu.find(".tabulator-footer-contents").find("span#total").text(`[${new Date().getTime()}]`);\r\n        }\r\n      });\r\n      this.tabulator.on("pageLoaded", function(pageno){\r\n        // alert(\'pageLoaded\');\r\n        // that.msg={evt: \'pageLoaded\',pageno:pageno};\r\n        let $tabu=$(that.$refs.table);\r\n        $tabu.find(".tabulator-footer-contents").find("span#total").text(`[${new Date().getTime()}]`);\r\n      }); \r\n      \r\n      this.tabulator.on("cellEdited", function (cell) {\r\n          let index = cell.getRow().getIndex();\r\n          let row = cell.getRow();\r\n          cell.getData().dirty = true;\r\n          /*Code update row here*/\r\n          //that.onUpdateRow(row);\r\n          /*Code update row here*/\r\n      });    \r\n  },\r\n  watch: {\r\n    tableData: {\r\n      handler: function (newData) {\r\n        this.tabulator.replaceData(newData)\r\n      },\r\n      deep: true\r\n    }\r\n  },  \r\n  created(){\r\n  },\r\n  methods:{\r\n    onDataLoaded(data){\r\n      let ar=[];\r\n      data.forEach((x,i)=>{\r\n        ar.push({x:x.id});\r\n      })\r\n      let curPage= this.tabulator.getPage();\r\n      this.msg={ar:ar,curPage:curPage};\r\n    },\r\n    onTest(){\r\n      let ar=JSON.parse(JSON.stringify(this.tableData));\r\n      this.tableData=[ar[0],ar[1]];\r\n    },\r\n\r\n\r\n    onSave(e) {\r\n      e.preventDefault();\r\n      let row = e.data;\r\n      if (\r\n        this.rowValidate(row) == true\r\n        // && row.getData().monid != 0\r\n        // && row.getData().banid != 0\r\n        //    && row.getData().solg > 0\r\n      ) {\r\n        let r1 = row.getData();\r\n        let r = JSON.parse(JSON.stringify(r1));\r\n        /*                                                                                  convert data date nếu cần */\r\n        // let Ngay = this.DateToYMD(r.Ngay);\r\n        // r.Ngay = Ngay;\r\n        /*                                                                                  convert data nếu cần */\r\n        /*\r\n        this.Save(r).then((res) => {\r\n          if (res.data.kq == "ok") {\r\n            this.toast(res.data.msg);\r\n            this.setPage(this.getPage());\r\n          } else {\r\n            this.toast(res.data.msg);\r\n          }\r\n        });\r\n        */\r\n      } else {\r\n        this.toast("Dữ liệu không hợp lệ!");\r\n        return;\r\n      }\r\n    },\r\n    onCancel(e) {\r\n      e.preventDefault();\r\n      this.setPage(this.getPage());\r\n    },\r\n\r\n    onDel(e) {\r\n      e.preventDefault();\r\n      let row = e.data;\r\n      let id = row.getIndex();\r\n      /*\r\n      this.Del(id).then((res) => {\r\n        //alert(JSON.stringify(res));\r\n        //{"data":{"kq":"ok","msg":"Delete bàn ok"},"status":200,"\r\n        if (res.data.kq == "ok") {\r\n          if (this.getData().length != 1) {\r\n            this.setPage(this.getPage());\r\n          } else {\r\n            if(this.getPage()!=1){\r\n              this.setPage(this.getPage() - 1);\r\n            }else{\r\n              this.setPage(this.getPage());\r\n            } \r\n          }\r\n        }\r\n        this.toast(res.data.msg);\r\n      });\r\n      */\r\n    },\r\n\r\n\r\n\r\n    // onDel(e){\r\n    //   let row = e.data;\r\n    //   let id = row.getIndex();\r\n    //   let data=row.getData();\r\n    //   this.msg={cmd:"del",id:id,data:data}\r\n    // },\r\n    onEdit(e){\r\n      let row = e.data;\r\n      let id = row.getIndex();\r\n      let data=row.getData();\r\n      this.msg={cmd:"edit",id:id,data:data}\r\n    },    \r\n  }\r\n}\r\n<\/script>\r\n<style lang="scss">\r\n  $textSize: 8.5px; //14px !default; //table text size\r\n  @import "~tabulator-tables/src/scss/tabulator.scss";\r\n  .tabulator-col-title {\r\n    text-align: center;\r\n  }\r\n  .tabulator .tabulator-footer .tabulator-page.active {\r\n    background-color: greenyellow !important;\r\n    color: blue !important;\r\n  }\r\n  .select2,\r\n  .select2-selection {\r\n    width: 100% !important;\r\n  }\r\n  .select2-container .select2-selection--single {\r\n    height: 27px;\r\n  }\r\n  .select2-container--default .select2-selection--single .select2-selection__rendered {\r\n    color: #444;\r\n    line-height: 26px;\r\n  }\r\n  .datepicker td,\r\n  th {\r\n    text-align: center;\r\n    padding: 0px 6px;\r\n    font-size: 10px;\r\n  }\r\n  .col-4 input {\r\n    margin-bottom: 1px;\r\n  }\r\n  .my-invalid .select2-container {\r\n    border: 1px solid red;\r\n    border-radius: 5px;\r\n  }\r\n  .form-group {\r\n    margin-bottom: 0.3rem;\r\n  }\r\n  .col-form-label {\r\n    padding-top: calc(0.375rem + 1px);\r\n    padding-bottom: calc(0.375rem + 1px);\r\n    margin-bottom: 0;\r\n    font-size: inherit;\r\n    line-height: 1.5;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .vs__dropdown-toggle {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    background: none;\r\n    border: var(--vs-border-width) var(--vs-border-style) var(--vs-border-color);\r\n    border-radius: var(--vs-border-radius);\r\n    display: flex;\r\n    padding: 0 0 0px;\r\n    white-space: normal;\r\n    /*border: 1px solid red;*/\r\n  }\r\n  .ko-hop-le-select2 {\r\n    border: 1px solid red;\r\n    border-radius: 10px;\r\n  }\r\n  .ko-hop-le{\r\n    border: 1px solid red;\r\n    background: orange;\r\n    border-radius: 10px;\r\n  }\r\n  </style>\r\n\r\n'}}]);
//# sourceMappingURL=491.05877727.js.map