{"version":3,"file":"js/6552.df7c2db1.js","mappings":"oKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,aAAa,CAACE,MAAM,CAAC,MAAQ,cAAsDF,EAAG,KAAK,CAACJ,EAAIO,GAAG,sBAAsBH,EAAG,QAAQ,CAACA,EAAG,QAAQ,CAACI,YAAY,eAAeF,MAAM,CAAC,GAAK,MAAM,CAACF,EAAG,MAAM,CAACI,YAAY,QAAQ,CAACJ,EAAG,SAAS,CAACI,YAAY,OAAOF,MAAM,CAAC,SAA4B,GAAhBN,EAAIS,IAAIC,QAA2BC,GAAG,CAAC,MAAQX,EAAIY,QAAQ,CAACZ,EAAIO,GAAG,SAASH,EAAG,SAAS,CAACI,YAAY,OAAOF,MAAM,CAAC,SAA4B,GAAhBN,EAAIS,IAAIC,QAA2BC,GAAG,CAAC,MAAQX,EAAIa,SAAS,CAACb,EAAIO,GAAGP,EAAIc,GAAKd,EAAIe,OAAmB,SAAT,WAAsBX,EAAG,SAAS,CAACI,YAAY,OAAOG,GAAG,CAAC,MAAQX,EAAIgB,UAAU,CAAChB,EAAIO,GAAG,WAAWH,EAAG,SAAS,CAACI,YAAY,OAAOG,GAAG,CAAC,MAAQX,EAAIiB,SAAS,CAACjB,EAAIO,GAAG,UAAUH,EAAG,SAAS,CAACI,YAAY,OAAOG,GAAG,CAAC,MAAQX,EAAIkB,SAAS,CAAClB,EAAIO,GAAG,YAAYH,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,iBAAiB,CAACF,EAAG,MAAM,CAACI,YAAY,SAASF,MAAM,CAAC,GAAK,cAAc,CAACF,EAAG,UAAU,CAACe,IAAI,QAAQb,MAAM,CAAC,OAASN,EAAIoB,aAAaT,GAAG,CAAC,MAAQX,EAAIqB,aAAa,UAAYrB,EAAIsB,mBAAmB,CAAClB,EAAG,UAAU,CAACe,IAAI,SAAS,CAACf,EAAG,WAAW,CAACE,MAAM,CAAC,OAASN,EAAIuB,gBAAgBnB,EAAG,SAAS,CAACe,IAAI,OAAOb,MAAM,CAAC,OAAS,CAC1oCkB,EAAG,IACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRC,KAAM,SACNC,OAAO,OACPC,YAAY,EAEZC,WAAU,EACVC,SAAQ,MACP5B,EAAG,SAAS,CAACe,IAAI,OAAOb,MAAM,CAAC,OAAS,CAC/C2B,OAAQ,CAAC,IAAI,IAAI,IAAI,KACrBJ,OAAQ,OACRC,YAAa,EACbI,QAAS,QACTC,SAAU,QACVJ,WAAU,EACVC,SAAS,MACN5B,EAAG,UAAU,CAACe,IAAI,OAAOb,MAAM,CAAC,OAAS,CAC1C8B,UAAW,SAASC,EAASC,GAC3B,IAAId,GAAG,GACHC,GAAG,GACPY,EAAQE,YACRF,EAAQG,OAAOhB,EAAE,GAAIC,EAAE,IACvBY,EAAQI,OAAOjB,EAAE,IAAKC,EAAE,IACxBY,EAAQK,iBAAiBlB,EAAE,IAAKC,EAAE,IAAKD,EAAE,IAAKC,EAAE,KAChDY,EAAQM,YACRN,EAAQO,gBAAgBN,IAE1BV,KAAM,UACNC,OAAQ,QACRC,YAAa,EACbE,SAAS,EACTD,WAAU,EACVC,SAAQ,MACL5B,EAAG,UAAU,CAACe,IAAI,OAAOb,MAAM,CAAC,OAAS,CAC5CkB,EAAE,IACFC,EAAE,IACFoB,EAAE,GACFC,KAAK,IACLC,SAAS,GACTnB,KAAM,OACNC,OAAQ,QACRmB,UAAU,MACVlB,YAAa,EACbC,WAAU,EACVkB,KAAI,EACJjB,SAAQ,EACRI,UAAW,SAAUC,EAASC,GAC5B,IAAIS,EAAST,EAAMY,QAAQ,YAC3Bb,EAAQE,YACRF,EAAQc,IAAI,EAAG,EAAGb,EAAMY,QAAQ,KAAM,EAAG,EAAIE,KAAKC,IAClDhB,EAAQO,gBAAgBN,GACxB,IAAIU,EAAUV,EAAMY,QAAQ,aAC5Bb,EAAQiB,UAAUN,EAClBX,EAAQkB,aAAe,SACvBlB,EAAQmB,UAAY,SACpBnB,EAAQoB,KAAKV,EAAW,aACxBV,EAAQqB,SAAU,GAAMpB,EAAMY,QAAQ,QAAW,EAAE,QAGlD9C,EAAG,UAAU,CAACe,IAAI,QAAQb,MAAM,CAAC,OAAS,CAC/CkB,EAAE,GACFC,EAAE,GACFC,MAAM,IACNC,OAAO,IACPmB,KAAK,WACLC,SAAS,GACTnB,KAAM,SACNC,OAAQ,MACRC,YAAa,EACbC,WAAU,EACVC,SAAQ,EACRI,UAAW,SAAUC,EAASC,GAC5B,IAAIS,EAAST,EAAMY,QAAQ,YAC3Bb,EAAQE,YACRF,EAAQsB,KAAK,EAAG,EAAGrB,EAAMY,QAAQ,SAAUZ,EAAMY,QAAQ,WACzDb,EAAQO,gBAAgBN,GACxBD,EAAQiB,UAAU,MAClBjB,EAAQkB,aAAe,SACvBlB,EAAQmB,UAAY,SACpBnB,EAAQoB,KAAKV,EAAW,qBACxBV,EAAQqB,SAAU,GAAMpB,EAAMY,QAAQ,QAAWZ,EAAMY,QAAQ,SAAS,EAAEZ,EAAMY,QAAQ,UAAU,SAEhG,IAAI,IAAI,OAAO9C,EAAG,QAAQ,CAACE,MAAM,CAAC,GAAK,MAAM,CAACN,EAAIO,GAAG,IAAIP,EAAIc,GAAGd,EAAI4D,KAAK5D,EAAIc,GAAGd,EAAI6D,OAAO,KAAKzD,EAAG,MAAM,CAACI,YAAY,iCAAiCR,EAAI8D,GAAI9D,EAAY,UAAE,SAASwB,EAAEuC,GAAG,OAAO3D,EAAG,MAAM,CAAC4D,IAAID,EAAEvD,YAAY,sBAAsB,CAACJ,EAAG,MAAM,CAAC6D,MAAOF,GAAG/D,EAAI6D,MAAS,wBAA0B,GAAGK,YAAY,CAAC,SAAW,YAAYvD,GAAG,CAAC,UAAY,SAASwD,GAAQnE,EAAI6D,MAAME,GAAG,SAAW,SAASI,GAAQnE,EAAI6D,OAAO,KAAK,CAACzD,EAAG,MAAM,CAACI,YAAY,gBAAgBF,MAAM,CAAC,IAAMkB,EAAE4C,KAAKzD,GAAG,CAAC,MAAQ,SAASwD,GAAQ,OAAOnE,EAAIqE,OAAO7C,EAAE8C,UAAUlE,EAAG,SAAS,CAACI,YAAY,MAAM0D,YAAY,CAAC,SAAW,WAAW,OAAS,IAAI,MAAQ,KAAKvD,GAAG,CAAC,MAAQ,SAASwD,GAAQ,OAAOnE,EAAIuE,UAAUR,MAAM,CAAC/D,EAAIO,GAAG,gBAAe,MAAM,IAAI,IACpvBiE,EAAkB,GCuDlBC,G,SAAa,MACbC,EAAc,IACdC,EAAJ,KACI,EAAK,KACT,GACAC,KAAAA,MACAC,WAAAA,GAEAC,SAAAA,CACAC,OACA,gBAGAT,OACA,OACAV,IAAAA,QACAxC,YAAAA,CACAM,MAAAA,EACAC,OAAAA,GAEAJ,aAAAA,CACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAuD,OAAAA,GACApD,KAAAA,SACAC,OAAAA,QACAC,YAAAA,EACAC,WAAAA,EACAC,SAAAA,GAEAiD,MAAAA,EACAC,EAAAA,GACAC,QAAAA,GACA1E,IAAAA,GACA2E,MAAAA,GACArE,QAAAA,EACAsE,SAAAA,GACAxB,OAAAA,IAGAyB,UACA,2BACAC,EAAAA,KAAAA,MAAAA,MAAAA,UACAZ,EAAAA,KAAAA,MAAAA,MAAAA,UACAa,OAAAA,iBAAAA,SAAAA,KAAAA,6BACA,uCAGAC,YAEAC,QAAAA,CACAnB,UAAAA,GACA,2BAEAF,OAAAA,GACA,0CAEAnD,SACA,oBACA,2DACA,oBAAAkD,IAAAA,EAAAE,KAAAA,KAAAA,MAAAA,KAAAA,UAAAA,OAEAqB,KAAAA,GACA,aACA,mBACA,uBACA,mBACA,8BACA,2DACAJ,EAAAA,IAAAA,MAEA,4BACA,gCACAA,EAAAA,IAAAA,MAEA,aAEAtE,SACA,yJACA,cAEA2E,QACA,aACA,8BACAL,EAAAA,KAAAA,WAAAA,GAAAA,aAEA,gBACA,4BACAA,EAAAA,KAAAA,WAAAA,GAAAA,aAEA,eAEAvE,UACA,aACA,aAEAJ,QACA,kBACA,KACA,KACA,4BACA,cACAiF,EAAAA,KAAAA,GAEAT,EAAAA,KAAAA,MAIAS,EAAAA,SAAAA,CAAAA,EAAAA,KACAN,EAAAA,KAAAA,WAAAA,GAAAA,aAGA,aAEAA,EAAAA,KAAAA,IAAAA,KAAAA,GAAAA,UAEA,2CACA,yBACA,aAEAO,SAAAA,EAAAA,GACA,SACA,KACA,4BACA,6BACAC,GAAAA,EAEAC,EAAAA,KAAAA,MAGA,MACAT,EAAAA,KAAAA,WAAAA,GAAAA,UAEA,aACA,eACA,aAEAU,aAAAA,EAAAA,GACA,SAMA,OALA,4BACA,+BACAC,GAAAA,MAGA,GAEArF,SACA,kBACA,cACA,yBACA,QAEA,YADA,mBAGA,0BACA,gCACA0E,EAAAA,IAAAA,GACA,gBACA,wBACAY,EAAAA,SAAAA,CAAAA,EAAAA,KACA,oBAEA,uBACA,aAEAC,WACA,wBACAC,EAAAA,SAAAA,CAAAA,EAAAA,KACA,uBACA,mBACA,qBACA,qBACA,GAAA7E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KACA,GAAAD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KACAD,EAAAA,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACAA,EAAAA,mBAGA8E,OACA,gBACA,UAKAnB,QAAAA,KAAAA,QACAC,MAAAA,KAAAA,MACAH,MAAAA,KAAAA,QAGAsB,WAAAA,GACA,wCAGA,OAFAC,EAAAA,SAAAA,GACAA,EAAAA,KAAAA,GACA,GAEAC,SAAAA,GACA,IACA,EACA,EAFA,WAGA,YACAC,EAAAA,SACAC,EAAAA,MACAC,EAAAA,KAAAA,GACAA,EAAAA,QAAAA,YAAAA,KAGAC,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,WACA,oCAoDA,OAnDAD,EAAAA,SAAAA,GACAA,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,GACAA,EAAAA,QAAAA,IAAAA,GACAA,EAAAA,KAAAA,UACAA,EAAAA,OAAAA,SACAA,EAAAA,KAAAA,GACAA,EAAAA,GAAAA,GACAA,EAAAA,QAAAA,OAAAA,GACAA,EAAAA,GAAAA,SAAAA,SAAAA,GACA,IACA,EACA,EAFA,kBAeA,GAZA,WACAF,EAAAA,SACAC,EAAAA,QAEAD,EAAAA,OACAC,EAAAA,SAEAG,EAAAA,OAAAA,KAAAA,GACAA,EAAAA,OAAAA,QAAAA,YAAAA,GACAC,EAAAA,IAAAA,EAAAA,SAEAA,EAAAA,QAAAA,EACA,iBACA,eACA,WACA,yBACAA,EAAAA,QAAAA,GAMAA,EAAAA,UAGAH,EAAAA,GAAAA,WAAAA,SAAAA,OAEAA,EAAAA,GAAAA,YAAAA,SAAAA,GACA,OACAI,GAAAA,EAAAA,OAAAA,KACAxF,EAAAA,KAAAA,MAAAA,EAAAA,OAAAA,KACAC,EAAAA,KAAAA,MAAAA,EAAAA,OAAAA,MAEAsF,EAAAA,EAAAA,EACA,2CACAA,EAAAA,QAAAA,GAAAA,EACAA,EAAAA,UAEA,GAEAE,SACA,SACA,oBAMA,OALAC,EAAAA,SAAAA,CAAAA,EAAAA,KACA,kBACAC,EAAAA,KAAAA,SAAAA,EAAAA,UAGA,GAEA9F,aAAAA,GACA,sBACA,eACA,OAEA,wBACA,6DACA,mBAAA2F,GAAAA,KAAAA,MAAAxF,EAAAA,EAAAA,EAAAC,EAAAA,EAAAA,IACA,aACA8D,EAAAA,IAAAA,GACA,aAEAjE,iBAAAA,KAEA8F,cAAA,0BACAC,cAAA,0BACAC,cAAA,0BACAC,aACA,kBACA,6BACA,MACA,MACA,kBACA,kBACA,OAAA/F,EAAAA,EAAAC,EAAAA,IAEA+F,8BACA,8CACA,gBACA,MACA7C,EAAAA,MAAAA,EAAAA,GACAA,EAAAA,OAAAA,EAAAA,GACAA,EAAAA,MAAAA,CAAAnD,EAAAA,EAAAC,EAAAA,IACA,2BACA,+BChckR,I,UCQ9QgG,GAAY,OACd,EACA1H,EACAyE,GACA,EACA,KACA,WACA,MAIF,EAAeiD,EAAiB,S,oBCnBhC","sources":["webpack://vue_start_1/./src/views/Konva/KonvaVueDoThi.vue?dd76","webpack://vue_start_1/src/views/Konva/KonvaVueDoThi.vue","webpack://vue_start_1/./src/views/Konva/KonvaVueDoThi.vue?7af7","webpack://vue_start_1/./src/views/Konva/KonvaVueDoThi.vue?95f0","webpack://vue_start_1/./src/views/Konva/KonvaVueDoThi.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./KonvaVueDoThi.vue').default}}),_c('h1',[_vm._v(\"This is KonvaVue\")]),_c('b-row',[_c('b-col',{staticClass:\"border-right\",attrs:{\"sm\":\"3\"}},[_c('div',{staticClass:\"mb-1\"},[_c('button',{staticClass:\"mr-1\",attrs:{\"disabled\":(_vm.Sel.length==1) ? false : true},on:{\"click\":_vm.onDel}},[_vm._v(\"Del\")]),_c('button',{staticClass:\"mr-1\",attrs:{\"disabled\":(_vm.Sel.length==2) ? false : true},on:{\"click\":_vm.onLink}},[_vm._v(_vm._s((!_vm.unLink) ? 'Link' : 'UnLink'))]),_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onReset}},[_vm._v(\"Reset\")]),_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onLoad}},[_vm._v(\"Load\")]),_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onSave}},[_vm._v(\"Save\")])]),_c('div',{attrs:{\"id\":\"stage-parent\"}},[_c('div',{staticClass:\"border\",attrs:{\"id\":\"container\"}},[_c('v-stage',{ref:\"stage\",attrs:{\"config\":_vm.configKonva},on:{\"click\":_vm.onStageClick,\"mousemove\":_vm.onStageMouseMove}},[_c('v-layer',{ref:\"layer\"},[_c('v-circle',{attrs:{\"config\":_vm.configCircle}}),_c('v-rect',{ref:\"rect\",attrs:{\"config\":{\n                              x: 100,\n                              y: 100,\n                              width: 150,\n                              height: 150,\n                              fill: 'yellow',\n                              stroke:'blue',\n                              strokeWidth:5,\n                              //shadowBlur: 10,\n                              draggable:true,\n                              visible:false\n                          }}}),_c('v-line',{ref:\"line\",attrs:{\"config\":{\n                        points: [100,100,400,200],\n                        stroke: 'gray',\n                        strokeWidth: 5,\n                        lineCap: 'round',\n                        lineJoin: 'round',\n                        draggable:true,\n                        visible: false\n                      }}}),_c('v-shape',{ref:\"nice\",attrs:{\"config\":{\n                          sceneFunc: function(context, shape) {\n                            var x=-20;\n                            var y=-50;\n                            context.beginPath();\n                            context.moveTo(x+20, y+50);\n                            context.lineTo(x+220, y+80);\n                            context.quadraticCurveTo(x+150, y+100, x+260, y+170);\n                            context.closePath();\n                            context.fillStrokeShape(shape);\n                          },\n                          fill: '#00D2FF',\n                          stroke: 'black',\n                          strokeWidth: 4,\n                          visible: true,\n                          draggable:true,\n                          visible:false,\n                        }}}),_c('v-shape',{ref:\"ball\",attrs:{\"config\":{\n                          x:150,\n                          y:150,\n                          r:90,\n                          text:'1',\n                          fontSize:50,\n                          fill: 'aqua',\n                          stroke: 'black',\n                          textcolor:'red',\n                          strokeWidth: 5,\n                          draggable:true,  \n                          sel:false,      \n                          visible:false,\n                          sceneFunc: function (context, shape) {\n                            var fontSize=shape.getAttr('fontSize');//40;\n                            context.beginPath();\n                            context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\n                            context.fillStrokeShape(shape);\n                            var textcolor=shape.getAttr('textcolor');\n                            context.fillStyle=textcolor;//'white';\n                            context.textBaseline = 'middle'; \n                            context.textAlign = 'center';\n                            context.font=fontSize + \"px verdana\";//verdana//Times New Roman\n                            context.fillText((\"\" + (shape.getAttr('text'))), 0,0);\n\n                          }\n                        }}}),_c('v-shape',{ref:\"board\",attrs:{\"config\":{\n                        x:50,\n                        y:50,\n                        width:300,\n                        height:100,\n                        text:'Thức 101',\n                        fontSize:60,\n                        fill: 'yellow',\n                        stroke: 'red',\n                        strokeWidth: 1,\n                        draggable:true, \n                        visible:false,       \n                        sceneFunc: function (context, shape) {\n                          var fontSize=shape.getAttr('fontSize');\n                          context.beginPath();\n                          context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\n                          context.fillStrokeShape(shape);\n                          context.fillStyle='red';\n                          context.textBaseline = 'middle'; \n                          context.textAlign = 'center';\n                          context.font=fontSize + \"px Times New Roman\";\n                          context.fillText((\"\" + (shape.getAttr('text'))), shape.getAttr('width')/2,shape.getAttr('height')/2);\n                        }\n                      }}})],1)],1)],1)])]),_c('b-col',{attrs:{\"sm\":\"9\"}},[_vm._v(\" \"+_vm._s(_vm.msg)+_vm._s(_vm.hover)+\" \"),_c('div',{staticClass:\"row no-gutters border-top p-1\"},_vm._l((_vm.listData),function(x,i){return _c('div',{key:i,staticClass:\"mb-1 mr-1 col-sm-2\"},[_c('div',{class:(i==_vm.hover) ? 'border border-primary' : '',staticStyle:{\"position\":\"relative\"},on:{\"mouseover\":function($event){_vm.hover=i},\"mouseout\":function($event){_vm.hover=-1}}},[_c('img',{staticClass:\"img-thumbnail\",attrs:{\"src\":x.src},on:{\"click\":function($event){return _vm.onView(x.data)}}}),_c('button',{staticClass:\"m-1\",staticStyle:{\"position\":\"absolute\",\"bottom\":\"0\",\"right\":\"0\"},on:{\"click\":function($event){return _vm.onDelData(i)}}},[_vm._v(\"Del\")])])])}),0)])],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <raw-loader :mytxt=\" require('!raw-loader!./KonvaVueDoThi.vue').default \"></raw-loader> \r\n    <h1>This is KonvaVue</h1>\r\n    <b-row>\r\n      <b-col sm=\"3\" class=\"border-right\">\r\n        <div class=\"mb-1\">\r\n          <button class=\"mr-1\" @click=\"onDel\" :disabled=\" (Sel.length==1) ? false : true \" >Del</button>\r\n          <button class=\"mr-1\" @click=\"onLink\" :disabled=\" (Sel.length==2) ? false : true \" >{{(!unLink) ? 'Link' : 'UnLink'}}</button>\r\n          <button class=\"mr-1\" @click=\"onReset\" >Reset</button>\r\n          <button class=\"mr-1\" @click=\"onLoad\" >Load</button>\r\n          <button class=\"mr-1\" @click=\"onSave\" >Save</button>\r\n        </div>\r\n          \r\n          <div id=\"stage-parent\">\r\n            <div id=\"container\" class=\"border\">\r\n                <v-stage ref=\"stage\"\r\n                    @click=\"onStageClick\"\r\n                    @mousemove=\"onStageMouseMove\" \r\n                    :config=\"configKonva\" >\r\n                    <v-layer ref=\"layer\">\r\n                        <v-circle :config=\"configCircle\"></v-circle>\r\n                        <v-rect ref=\"rect\" \r\n                            :config=\"{\r\n                                x: 100,\r\n                                y: 100,\r\n                                width: 150,\r\n                                height: 150,\r\n                                fill: 'yellow',\r\n                                stroke:'blue',\r\n                                strokeWidth:5,\r\n                                //shadowBlur: 10,\r\n                                draggable:true,\r\n                                visible:false\r\n                            }\"\r\n                        />\r\n                        <v-line ref=\"line\" :config=\"{\r\n                          points: [100,100,400,200],\r\n                          stroke: 'gray',\r\n                          strokeWidth: 5,\r\n                          lineCap: 'round',\r\n                          lineJoin: 'round',\r\n                          draggable:true,\r\n                          visible: false\r\n                        }\"></v-line>\r\n                        <v-shape ref=\"nice\"\r\n                          :config=\"{\r\n                            sceneFunc: function(context, shape) {\r\n                              let x=-20;\r\n                              let y=-50;\r\n                              context.beginPath();\r\n                              context.moveTo(x+20, y+50);\r\n                              context.lineTo(x+220, y+80);\r\n                              context.quadraticCurveTo(x+150, y+100, x+260, y+170);\r\n                              context.closePath();\r\n                              context.fillStrokeShape(shape);\r\n                            },\r\n                            fill: '#00D2FF',\r\n                            stroke: 'black',\r\n                            strokeWidth: 4,\r\n                            visible: true,\r\n                            draggable:true,\r\n                            visible:false,\r\n                          }\"\r\n                        />\r\n                        <v-shape ref=\"ball\"\r\n                          :config=\"{\r\n                            x:150,\r\n                            y:150,\r\n                            r:90,\r\n                            text:'1',\r\n                            fontSize:50,\r\n                            fill: 'aqua',\r\n                            stroke: 'black',\r\n                            textcolor:'red',\r\n                            strokeWidth: 5,\r\n                            draggable:true,  \r\n                            sel:false,      \r\n                            visible:false,\r\n                            sceneFunc: function (context, shape) {\r\n                              let fontSize=shape.getAttr('fontSize');//40;\r\n                              context.beginPath();\r\n                              context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\r\n                              context.fillStrokeShape(shape);\r\n                              let textcolor=shape.getAttr('textcolor');\r\n                              context.fillStyle=textcolor;//'white';\r\n                              context.textBaseline = 'middle'; \r\n                              context.textAlign = 'center';\r\n                              context.font=`${fontSize}px verdana`;//verdana//Times New Roman\r\n                              context.fillText(`${shape.getAttr('text')}`, 0,0);\r\n\r\n                            }\r\n                          }\"\r\n                        />\r\n                        <v-shape ref=\"board\" :config=\"{\r\n                          x:50,\r\n                          y:50,\r\n                          width:300,\r\n                          height:100,\r\n                          text:'Thức 101',\r\n                          fontSize:60,\r\n                          fill: 'yellow',\r\n                          stroke: 'red',\r\n                          strokeWidth: 1,\r\n                          draggable:true, \r\n                          visible:false,       \r\n                          sceneFunc: function (context, shape) {\r\n                            let fontSize=shape.getAttr('fontSize');\r\n                            context.beginPath();\r\n                            context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\r\n                            context.fillStrokeShape(shape);\r\n                            context.fillStyle='red';\r\n                            context.textBaseline = 'middle'; \r\n                            context.textAlign = 'center';\r\n                            context.font=`${fontSize}px Times New Roman`;\r\n                            context.fillText(`${shape.getAttr('text')}`, shape.getAttr('width')/2,shape.getAttr('height')/2);\r\n                          }\r\n                        }\">\r\n                        </v-shape>\r\n                    </v-layer>\r\n                </v-stage>\r\n            </div>\r\n          </div>\r\n\r\n      </b-col>\r\n      <b-col sm=\"9\">\r\n        {{msg}}{{hover}}\r\n        <div class=\"row no-gutters border-top p-1\">\r\n          <div v-for=\"(x,i) in listData\" :key=\"i\" class=\"mb-1 mr-1 col-sm-2\">\r\n            <div :class=\" (i==hover) ? 'border border-primary' : '' \" style=\"position:relative\" @mouseover=\" hover=i \" @mouseout=\" hover=-1 \" >\r\n              <img :src=\" x.src \" @click=\"onView(x.data)\" class=\"img-thumbnail\" >\r\n              <button @click=\"onDelData(i)\" class=\"m-1\" style=\"position:absolute; bottom:0; right: 0;\">Del</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage=null;\r\nvar layer=null;\r\nexport default {\r\n  name: 'Tpl',\r\n  components: {\r\n  },\r\n  computed: {\r\n  \ttest () {\r\n    \treturn 'hello'\r\n    },\r\n  },\r\n  data(){\r\n    return{\r\n        msg:\"hello\",\r\n        configKonva: {\r\n          width: sceneWidth,\r\n          height: sceneHeight\r\n        },\r\n        configCircle: {\r\n          x: sceneWidth/2,\r\n          y: sceneHeight/2,\r\n          radius: 90,\r\n          fill: \"yellow\",\r\n          stroke: \"black\",\r\n          strokeWidth: 5,\r\n          draggable:true,\r\n          visible:false,\r\n        },\r\n        count:0,\r\n        p:{},\r\n        arPoint:[],\r\n        Sel:[],\r\n        arSel:[],\r\n        unLink:false,\r\n        listData:[],\r\n        hover:-1,\r\n    }\r\n  },\r\n  mounted(){\r\n    this.$nextTick(function(){\r\n      layer=this.$refs.layer.getNode();\r\n      stage=this.$refs.stage.getNode();\r\n      window.addEventListener(\"resize\", this.fitStageIntoParentContainer);\r\n      this.fitStageIntoParentContainer();\r\n    })\r\n  },\r\n  created(){\r\n  },\r\n  methods:{\r\n    onDelData(i){\r\n      this.listData.splice(i,1);\r\n    },\r\n    onView(data){\r\n      this.load( JSON.parse(JSON.stringify(data)));//<--------------------------------------cẩn thận Khi view data\r\n    },\r\n    onSave(){\r\n      let src = stage.toDataURL();\r\n      let data={ \"arPoint\": this.arPoint, \"arSel\": this.arSel, \"count\": this.count };\r\n      this.listData.push({src:src,data:JSON.parse(JSON.stringify(data))})//<--------------------cẩn thận Khi save data\r\n    },\r\n    load(data){\r\n      this.reset();\r\n      this.count=data.count;\r\n      this.arPoint=data.arPoint;\r\n      this.arSel=data.arSel;\r\n      this.arPoint.forEach((x,i)=>{\r\n        let ball=this.createBall(x.x,x.y,60,'myball',x.id.toString());\r\n        layer.add(ball);\r\n      })\r\n      this.arSel.forEach((x,i)=>{\r\n        let line=this.createLine('myline');\r\n        layer.add(line);\r\n      })\r\n      this.draw(); \r\n    },\r\n    onLoad(){\r\n      let data={ \"arPoint\": [ { \"id\": 0, \"x\": 577, \"y\": 129 }, { \"id\": 1, \"x\": 452, \"y\": 273 }, { \"id\": 2, \"x\": 721, \"y\": 304 }, { \"id\": 3, \"x\": 352, \"y\": 498 }, { \"id\": 4, \"x\": 552, \"y\": 516 } ], \"arSel\": [ [ 0, 1 ], [ 0, 2 ], [ 1, 3 ], [ 1, 4 ] ], \"count\": 5 };\r\n      this.load(data);\r\n    },\r\n    reset(){\r\n      this.count=0;\r\n      this.arPoint.forEach((x,i)=>{\r\n        layer.find('.myball')[0].destroy();\r\n      })\r\n      this.arPoint=[];\r\n      this.arSel.forEach((x,i)=>{\r\n        layer.find('.myline')[0].destroy();\r\n      })\r\n      this.arSel=[];\r\n    },\r\n    onReset(){\r\n      this.reset();\r\n      this.draw();\r\n    },\r\n    onDel(){\r\n      let id=this.Sel[0];\r\n      let arLink=[];\r\n      let arSel=[];\r\n      this.arSel.forEach((x,i)=>{\r\n        if( x.includes(id) ){\r\n          arLink.push(x);\r\n        }else{\r\n          arSel.push(x);\r\n        }\r\n      })\r\n      //del line\r\n      arLink.forEach((y,j)=>{\r\n        layer.find('.myline')[0].destroy();\r\n      });\r\n      //del line data\r\n      this.arSel=arSel;\r\n      //xoa point\r\n      layer.find(`#${id}`)[0].destroy();\r\n      //xoat point data\r\n      let index=this.arPoint.findIndex(x=>x.id==id);\r\n      this.arPoint.splice(index,1);\r\n      this.draw();\r\n    },\r\n    onUnlink(id1,id2){\r\n      let delLine=false;\r\n      let arRemain=[];\r\n      this.arSel.forEach((x,i)=>{\r\n        if(x.includes(id1) && x.includes(id2)){\r\n          delLine=true;\r\n        }else{\r\n          arRemain.push(x);\r\n        }\r\n      })\r\n      if(delLine==true){\r\n        layer.find('.myline')[0].destroy();\r\n      }\r\n      this.arSel=arRemain;\r\n      this.unLink=false;\r\n      this.draw();\r\n    },\r\n    chkPairExist(id1,id2){\r\n      let dup=false;\r\n      this.arSel.forEach((x,i)=>{\r\n        if(x.includes(id1) && x.includes(id2) ){\r\n          dup=true;\r\n        }\r\n      })\r\n      return dup;\r\n    },\r\n    onLink(){\r\n      let id1=this.Sel[0];\r\n      let id2=this.Sel[1];\r\n      let dup2=this.chkPairExist(id1,id2);\r\n      if(dup2==true){\r\n        this.onUnlink(id1,id2);\r\n        return;\r\n      }\r\n      this.arSel.push(this.Sel);\r\n      let line=this.createLine('myline');\r\n      layer.add(line);\r\n      this.drawLine();\r\n      let lBall=layer.find(\".myball\");\r\n      lBall.forEach((x,i)=>{\r\n        this.drawBall(x);\r\n      })\r\n      this.Sel=this.getSel();\r\n      this.draw();\r\n    },\r\n    drawLine(){\r\n      let lLine=layer.find(\".myline\");\r\n      lLine.forEach((x,i)=>{\r\n        let id1=this.arSel[i][0];\r\n        let id2=this.arSel[i][1];\r\n        let s1=layer.find(`#${id1}`)[0];\r\n        let s2=layer.find(`#${id2}`)[0];\r\n        let p1={x:s1.x(),y:s1.y()}\r\n        let p2={x:s2.x(),y:s2.y()}\r\n        x.points([p1.x,p1.y,p2.x,p2.y]);\r\n        x.moveToBottom();\r\n      })\r\n    },\r\n    draw(){\r\n      this.drawLine();\r\n      this.msg={\r\n        // p:this.p,\r\n        // Sel:this.Sel,\r\n        // lBall:layer.find(\".myball\").length,\r\n        // lLine:layer.find(\".myline\").length,\r\n        arPoint:this.arPoint,\r\n        arSel:this.arSel,\r\n        count:this.count,\r\n      }\r\n    },\r\n    createLine(name){\r\n      let line=this.$refs.line.getNode().clone();\r\n      line.visible(true);\r\n      line.name(name);\r\n      return line;\r\n    },\r\n    drawBall(ball){\r\n      let color=ball.fill();\r\n      let colorFill;\r\n      let colorText;\r\n      if(color=='blue'){\r\n        colorFill='yellow';\r\n        colorText='red';\r\n        ball.fill(colorFill);\r\n        ball.setAttr('textcolor',colorText);\r\n      }\r\n    },\r\n    createBall(x,y,r,name,id){\r\n      let that=this;\r\n      let ball=this.$refs.ball.getNode().clone();\r\n      ball.visible(true);\r\n      ball.x(x);\r\n      ball.y(y);\r\n      ball.setAttr('r',r);\r\n      ball.fill(\"yellow\");\r\n      ball.stroke('black');\r\n      ball.name(name);\r\n      ball.id(id);\r\n      ball.setAttr(\"text\",id);\r\n      ball.on(\"click\",function(e){\r\n        let color=e.target.fill();\r\n        let colorFill;\r\n        let colorText;\r\n        if(color=='blue'){\r\n          colorFill='yellow';\r\n          colorText='red';\r\n        }else{\r\n          colorFill='blue';\r\n          colorText='white';\r\n        }\r\n        e.target.fill(colorFill);\r\n        e.target.setAttr('textcolor',colorText);\r\n        that.Sel=that.getSel();\r\n\r\n        that.unLink=false;\r\n        if(that.Sel.length==2){\r\n          let idd1=that.Sel[0];\r\n          let idd2=that.Sel[1];\r\n          if(that.chkPairExist(idd1,idd2)==true){\r\n            that.unLink=true;\r\n          }\r\n        }\r\n\r\n\r\n\r\n        that.draw();\r\n\r\n      });\r\n      ball.on(\"dragend\",function(e){\r\n      });\r\n      ball.on(\"dragmove\",function(e){\r\n        let p={\r\n          id:e.target.id(),\r\n          x: Math.floor (e.target.x()),\r\n          y: Math.floor (e.target.y())\r\n        }\r\n        that.p=p;\r\n        let index=that.arPoint.findIndex(x=>x.id==p.id);\r\n        that.arPoint[index]=p;\r\n        that.draw();\r\n      });\r\n      return ball;\r\n    },\r\n    getSel(){\r\n      let kq=[];\r\n      let l=layer.find(\".myball\");\r\n      l.forEach((x,i)=>{\r\n        if(x.fill()=='blue'){\r\n          kq.push( parseInt (x.id()))\r\n        }\r\n      })\r\n      return kq;\r\n    },\r\n    onStageClick(e){\r\n      let chk=e.target.name();\r\n      if(chk=='myball'){\r\n        return;\r\n      }\r\n      let p=this.myGetMouse();\r\n      let ball=this.createBall(p.x,p.y,60,\"myball\",this.count.toString());\r\n      this.arPoint.push({id:this.count,x:p.x,y:p.y});\r\n      this.count++;\r\n      layer.add(ball);\r\n      this.draw();\r\n    },\r\n    onStageMouseMove(e){\r\n    },\r\n    getListRect(){ return layer.find(\".myrect\") },\r\n    getListLine(){ return layer.find(\".myline\") },\r\n    getListBall(){ return layer.find(\".myball\") },\r\n    myGetMouse() {\r\n      let scale=stage.scale().x;\r\n      var mousePos = stage.getPointerPosition();\r\n      var x = mousePos.x;\r\n      var y = mousePos.y;\r\n      var xx = Math.round(x / scale);\r\n      var yy = Math.round(y / scale);\r\n      return { x: xx, y: yy };\r\n    },\r\n    fitStageIntoParentContainer() {\r\n      var container = document.querySelector('#stage-parent');\r\n      var containerWidth = container.offsetWidth;\r\n      var scale = containerWidth / sceneWidth;\r\n      stage.width(sceneWidth * scale);\r\n      stage.height(sceneHeight * scale);\r\n      stage.scale({ x: scale, y: scale });\r\n      this.configKonva.width = sceneWidth * scale;\r\n      this.configKonva.height = sceneHeight * scale;\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n\r\ndiv.relative {\r\n  position: relative;\r\n  border: 3px solid #73AD21;\r\n} \r\n\r\ndiv.absolute {\r\n  position: absolute;\r\n  top: 80px;\r\n  right: 0;\r\n  border: 3px solid #73AD21;\r\n}\r\n\r\n\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./KonvaVueDoThi.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./KonvaVueDoThi.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./KonvaVueDoThi.vue?vue&type=template&id=a1f9b218&scoped=true&\"\nimport script from \"./KonvaVueDoThi.vue?vue&type=script&lang=js&\"\nexport * from \"./KonvaVueDoThi.vue?vue&type=script&lang=js&\"\nimport style0 from \"./KonvaVueDoThi.vue?vue&type=style&index=0&id=a1f9b218&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a1f9b218\",\n  null\n  \n)\n\nexport default component.exports","export default \"<template>\\r\\n  <div>\\r\\n    <raw-loader :mytxt=\\\" require('!raw-loader!./KonvaVueDoThi.vue').default \\\"></raw-loader> \\r\\n    <h1>This is KonvaVue</h1>\\r\\n    <b-row>\\r\\n      <b-col sm=\\\"3\\\" class=\\\"border-right\\\">\\r\\n        <div class=\\\"mb-1\\\">\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onDel\\\" :disabled=\\\" (Sel.length==1) ? false : true \\\" >Del</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onLink\\\" :disabled=\\\" (Sel.length==2) ? false : true \\\" >{{(!unLink) ? 'Link' : 'UnLink'}}</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onReset\\\" >Reset</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onLoad\\\" >Load</button>\\r\\n          <button class=\\\"mr-1\\\" @click=\\\"onSave\\\" >Save</button>\\r\\n        </div>\\r\\n          \\r\\n          <div id=\\\"stage-parent\\\">\\r\\n            <div id=\\\"container\\\" class=\\\"border\\\">\\r\\n                <v-stage ref=\\\"stage\\\"\\r\\n                    @click=\\\"onStageClick\\\"\\r\\n                    @mousemove=\\\"onStageMouseMove\\\" \\r\\n                    :config=\\\"configKonva\\\" >\\r\\n                    <v-layer ref=\\\"layer\\\">\\r\\n                        <v-circle :config=\\\"configCircle\\\"></v-circle>\\r\\n                        <v-rect ref=\\\"rect\\\" \\r\\n                            :config=\\\"{\\r\\n                                x: 100,\\r\\n                                y: 100,\\r\\n                                width: 150,\\r\\n                                height: 150,\\r\\n                                fill: 'yellow',\\r\\n                                stroke:'blue',\\r\\n                                strokeWidth:5,\\r\\n                                //shadowBlur: 10,\\r\\n                                draggable:true,\\r\\n                                visible:false\\r\\n                            }\\\"\\r\\n                        />\\r\\n                        <v-line ref=\\\"line\\\" :config=\\\"{\\r\\n                          points: [100,100,400,200],\\r\\n                          stroke: 'gray',\\r\\n                          strokeWidth: 5,\\r\\n                          lineCap: 'round',\\r\\n                          lineJoin: 'round',\\r\\n                          draggable:true,\\r\\n                          visible: false\\r\\n                        }\\\"></v-line>\\r\\n                        <v-shape ref=\\\"nice\\\"\\r\\n                          :config=\\\"{\\r\\n                            sceneFunc: function(context, shape) {\\r\\n                              let x=-20;\\r\\n                              let y=-50;\\r\\n                              context.beginPath();\\r\\n                              context.moveTo(x+20, y+50);\\r\\n                              context.lineTo(x+220, y+80);\\r\\n                              context.quadraticCurveTo(x+150, y+100, x+260, y+170);\\r\\n                              context.closePath();\\r\\n                              context.fillStrokeShape(shape);\\r\\n                            },\\r\\n                            fill: '#00D2FF',\\r\\n                            stroke: 'black',\\r\\n                            strokeWidth: 4,\\r\\n                            visible: true,\\r\\n                            draggable:true,\\r\\n                            visible:false,\\r\\n                          }\\\"\\r\\n                        />\\r\\n                        <v-shape ref=\\\"ball\\\"\\r\\n                          :config=\\\"{\\r\\n                            x:150,\\r\\n                            y:150,\\r\\n                            r:90,\\r\\n                            text:'1',\\r\\n                            fontSize:50,\\r\\n                            fill: 'aqua',\\r\\n                            stroke: 'black',\\r\\n                            textcolor:'red',\\r\\n                            strokeWidth: 5,\\r\\n                            draggable:true,  \\r\\n                            sel:false,      \\r\\n                            visible:false,\\r\\n                            sceneFunc: function (context, shape) {\\r\\n                              let fontSize=shape.getAttr('fontSize');//40;\\r\\n                              context.beginPath();\\r\\n                              context.arc(0, 0, shape.getAttr('r'), 0, 2 * Math.PI);\\r\\n                              context.fillStrokeShape(shape);\\r\\n                              let textcolor=shape.getAttr('textcolor');\\r\\n                              context.fillStyle=textcolor;//'white';\\r\\n                              context.textBaseline = 'middle'; \\r\\n                              context.textAlign = 'center';\\r\\n                              context.font=`${fontSize}px verdana`;//verdana//Times New Roman\\r\\n                              context.fillText(`${shape.getAttr('text')}`, 0,0);\\r\\n\\r\\n                            }\\r\\n                          }\\\"\\r\\n                        />\\r\\n                        <v-shape ref=\\\"board\\\" :config=\\\"{\\r\\n                          x:50,\\r\\n                          y:50,\\r\\n                          width:300,\\r\\n                          height:100,\\r\\n                          text:'Thức 101',\\r\\n                          fontSize:60,\\r\\n                          fill: 'yellow',\\r\\n                          stroke: 'red',\\r\\n                          strokeWidth: 1,\\r\\n                          draggable:true, \\r\\n                          visible:false,       \\r\\n                          sceneFunc: function (context, shape) {\\r\\n                            let fontSize=shape.getAttr('fontSize');\\r\\n                            context.beginPath();\\r\\n                            context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\\r\\n                            context.fillStrokeShape(shape);\\r\\n                            context.fillStyle='red';\\r\\n                            context.textBaseline = 'middle'; \\r\\n                            context.textAlign = 'center';\\r\\n                            context.font=`${fontSize}px Times New Roman`;\\r\\n                            context.fillText(`${shape.getAttr('text')}`, shape.getAttr('width')/2,shape.getAttr('height')/2);\\r\\n                          }\\r\\n                        }\\\">\\r\\n                        </v-shape>\\r\\n                    </v-layer>\\r\\n                </v-stage>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n      </b-col>\\r\\n      <b-col sm=\\\"9\\\">\\r\\n        {{msg}}{{hover}}\\r\\n        <div class=\\\"row no-gutters border-top p-1\\\">\\r\\n          <div v-for=\\\"(x,i) in listData\\\" :key=\\\"i\\\" class=\\\"mb-1 mr-1 col-sm-2\\\">\\r\\n            <div :class=\\\" (i==hover) ? 'border border-primary' : '' \\\" style=\\\"position:relative\\\" @mouseover=\\\" hover=i \\\" @mouseout=\\\" hover=-1 \\\" >\\r\\n              <img :src=\\\" x.src \\\" @click=\\\"onView(x.data)\\\" class=\\\"img-thumbnail\\\" >\\r\\n              <button @click=\\\"onDelData(i)\\\" class=\\\"m-1\\\" style=\\\"position:absolute; bottom:0; right: 0;\\\">Del</button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </b-col>\\r\\n    </b-row>\\r\\n  </div>\\r\\n</template>\\r\\n<script>\\r\\nvar sceneWidth = 1500;\\r\\nvar sceneHeight = 1000;\\r\\nvar stage=null;\\r\\nvar layer=null;\\r\\nexport default {\\r\\n  name: 'Tpl',\\r\\n  components: {\\r\\n  },\\r\\n  computed: {\\r\\n  \\ttest () {\\r\\n    \\treturn 'hello'\\r\\n    },\\r\\n  },\\r\\n  data(){\\r\\n    return{\\r\\n        msg:\\\"hello\\\",\\r\\n        configKonva: {\\r\\n          width: sceneWidth,\\r\\n          height: sceneHeight\\r\\n        },\\r\\n        configCircle: {\\r\\n          x: sceneWidth/2,\\r\\n          y: sceneHeight/2,\\r\\n          radius: 90,\\r\\n          fill: \\\"yellow\\\",\\r\\n          stroke: \\\"black\\\",\\r\\n          strokeWidth: 5,\\r\\n          draggable:true,\\r\\n          visible:false,\\r\\n        },\\r\\n        count:0,\\r\\n        p:{},\\r\\n        arPoint:[],\\r\\n        Sel:[],\\r\\n        arSel:[],\\r\\n        unLink:false,\\r\\n        listData:[],\\r\\n        hover:-1,\\r\\n    }\\r\\n  },\\r\\n  mounted(){\\r\\n    this.$nextTick(function(){\\r\\n      layer=this.$refs.layer.getNode();\\r\\n      stage=this.$refs.stage.getNode();\\r\\n      window.addEventListener(\\\"resize\\\", this.fitStageIntoParentContainer);\\r\\n      this.fitStageIntoParentContainer();\\r\\n    })\\r\\n  },\\r\\n  created(){\\r\\n  },\\r\\n  methods:{\\r\\n    onDelData(i){\\r\\n      this.listData.splice(i,1);\\r\\n    },\\r\\n    onView(data){\\r\\n      this.load( JSON.parse(JSON.stringify(data)));//<--------------------------------------cẩn thận Khi view data\\r\\n    },\\r\\n    onSave(){\\r\\n      let src = stage.toDataURL();\\r\\n      let data={ \\\"arPoint\\\": this.arPoint, \\\"arSel\\\": this.arSel, \\\"count\\\": this.count };\\r\\n      this.listData.push({src:src,data:JSON.parse(JSON.stringify(data))})//<--------------------cẩn thận Khi save data\\r\\n    },\\r\\n    load(data){\\r\\n      this.reset();\\r\\n      this.count=data.count;\\r\\n      this.arPoint=data.arPoint;\\r\\n      this.arSel=data.arSel;\\r\\n      this.arPoint.forEach((x,i)=>{\\r\\n        let ball=this.createBall(x.x,x.y,60,'myball',x.id.toString());\\r\\n        layer.add(ball);\\r\\n      })\\r\\n      this.arSel.forEach((x,i)=>{\\r\\n        let line=this.createLine('myline');\\r\\n        layer.add(line);\\r\\n      })\\r\\n      this.draw(); \\r\\n    },\\r\\n    onLoad(){\\r\\n      let data={ \\\"arPoint\\\": [ { \\\"id\\\": 0, \\\"x\\\": 577, \\\"y\\\": 129 }, { \\\"id\\\": 1, \\\"x\\\": 452, \\\"y\\\": 273 }, { \\\"id\\\": 2, \\\"x\\\": 721, \\\"y\\\": 304 }, { \\\"id\\\": 3, \\\"x\\\": 352, \\\"y\\\": 498 }, { \\\"id\\\": 4, \\\"x\\\": 552, \\\"y\\\": 516 } ], \\\"arSel\\\": [ [ 0, 1 ], [ 0, 2 ], [ 1, 3 ], [ 1, 4 ] ], \\\"count\\\": 5 };\\r\\n      this.load(data);\\r\\n    },\\r\\n    reset(){\\r\\n      this.count=0;\\r\\n      this.arPoint.forEach((x,i)=>{\\r\\n        layer.find('.myball')[0].destroy();\\r\\n      })\\r\\n      this.arPoint=[];\\r\\n      this.arSel.forEach((x,i)=>{\\r\\n        layer.find('.myline')[0].destroy();\\r\\n      })\\r\\n      this.arSel=[];\\r\\n    },\\r\\n    onReset(){\\r\\n      this.reset();\\r\\n      this.draw();\\r\\n    },\\r\\n    onDel(){\\r\\n      let id=this.Sel[0];\\r\\n      let arLink=[];\\r\\n      let arSel=[];\\r\\n      this.arSel.forEach((x,i)=>{\\r\\n        if( x.includes(id) ){\\r\\n          arLink.push(x);\\r\\n        }else{\\r\\n          arSel.push(x);\\r\\n        }\\r\\n      })\\r\\n      //del line\\r\\n      arLink.forEach((y,j)=>{\\r\\n        layer.find('.myline')[0].destroy();\\r\\n      });\\r\\n      //del line data\\r\\n      this.arSel=arSel;\\r\\n      //xoa point\\r\\n      layer.find(`#${id}`)[0].destroy();\\r\\n      //xoat point data\\r\\n      let index=this.arPoint.findIndex(x=>x.id==id);\\r\\n      this.arPoint.splice(index,1);\\r\\n      this.draw();\\r\\n    },\\r\\n    onUnlink(id1,id2){\\r\\n      let delLine=false;\\r\\n      let arRemain=[];\\r\\n      this.arSel.forEach((x,i)=>{\\r\\n        if(x.includes(id1) && x.includes(id2)){\\r\\n          delLine=true;\\r\\n        }else{\\r\\n          arRemain.push(x);\\r\\n        }\\r\\n      })\\r\\n      if(delLine==true){\\r\\n        layer.find('.myline')[0].destroy();\\r\\n      }\\r\\n      this.arSel=arRemain;\\r\\n      this.unLink=false;\\r\\n      this.draw();\\r\\n    },\\r\\n    chkPairExist(id1,id2){\\r\\n      let dup=false;\\r\\n      this.arSel.forEach((x,i)=>{\\r\\n        if(x.includes(id1) && x.includes(id2) ){\\r\\n          dup=true;\\r\\n        }\\r\\n      })\\r\\n      return dup;\\r\\n    },\\r\\n    onLink(){\\r\\n      let id1=this.Sel[0];\\r\\n      let id2=this.Sel[1];\\r\\n      let dup2=this.chkPairExist(id1,id2);\\r\\n      if(dup2==true){\\r\\n        this.onUnlink(id1,id2);\\r\\n        return;\\r\\n      }\\r\\n      this.arSel.push(this.Sel);\\r\\n      let line=this.createLine('myline');\\r\\n      layer.add(line);\\r\\n      this.drawLine();\\r\\n      let lBall=layer.find(\\\".myball\\\");\\r\\n      lBall.forEach((x,i)=>{\\r\\n        this.drawBall(x);\\r\\n      })\\r\\n      this.Sel=this.getSel();\\r\\n      this.draw();\\r\\n    },\\r\\n    drawLine(){\\r\\n      let lLine=layer.find(\\\".myline\\\");\\r\\n      lLine.forEach((x,i)=>{\\r\\n        let id1=this.arSel[i][0];\\r\\n        let id2=this.arSel[i][1];\\r\\n        let s1=layer.find(`#${id1}`)[0];\\r\\n        let s2=layer.find(`#${id2}`)[0];\\r\\n        let p1={x:s1.x(),y:s1.y()}\\r\\n        let p2={x:s2.x(),y:s2.y()}\\r\\n        x.points([p1.x,p1.y,p2.x,p2.y]);\\r\\n        x.moveToBottom();\\r\\n      })\\r\\n    },\\r\\n    draw(){\\r\\n      this.drawLine();\\r\\n      this.msg={\\r\\n        // p:this.p,\\r\\n        // Sel:this.Sel,\\r\\n        // lBall:layer.find(\\\".myball\\\").length,\\r\\n        // lLine:layer.find(\\\".myline\\\").length,\\r\\n        arPoint:this.arPoint,\\r\\n        arSel:this.arSel,\\r\\n        count:this.count,\\r\\n      }\\r\\n    },\\r\\n    createLine(name){\\r\\n      let line=this.$refs.line.getNode().clone();\\r\\n      line.visible(true);\\r\\n      line.name(name);\\r\\n      return line;\\r\\n    },\\r\\n    drawBall(ball){\\r\\n      let color=ball.fill();\\r\\n      let colorFill;\\r\\n      let colorText;\\r\\n      if(color=='blue'){\\r\\n        colorFill='yellow';\\r\\n        colorText='red';\\r\\n        ball.fill(colorFill);\\r\\n        ball.setAttr('textcolor',colorText);\\r\\n      }\\r\\n    },\\r\\n    createBall(x,y,r,name,id){\\r\\n      let that=this;\\r\\n      let ball=this.$refs.ball.getNode().clone();\\r\\n      ball.visible(true);\\r\\n      ball.x(x);\\r\\n      ball.y(y);\\r\\n      ball.setAttr('r',r);\\r\\n      ball.fill(\\\"yellow\\\");\\r\\n      ball.stroke('black');\\r\\n      ball.name(name);\\r\\n      ball.id(id);\\r\\n      ball.setAttr(\\\"text\\\",id);\\r\\n      ball.on(\\\"click\\\",function(e){\\r\\n        let color=e.target.fill();\\r\\n        let colorFill;\\r\\n        let colorText;\\r\\n        if(color=='blue'){\\r\\n          colorFill='yellow';\\r\\n          colorText='red';\\r\\n        }else{\\r\\n          colorFill='blue';\\r\\n          colorText='white';\\r\\n        }\\r\\n        e.target.fill(colorFill);\\r\\n        e.target.setAttr('textcolor',colorText);\\r\\n        that.Sel=that.getSel();\\r\\n\\r\\n        that.unLink=false;\\r\\n        if(that.Sel.length==2){\\r\\n          let idd1=that.Sel[0];\\r\\n          let idd2=that.Sel[1];\\r\\n          if(that.chkPairExist(idd1,idd2)==true){\\r\\n            that.unLink=true;\\r\\n          }\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        that.draw();\\r\\n\\r\\n      });\\r\\n      ball.on(\\\"dragend\\\",function(e){\\r\\n      });\\r\\n      ball.on(\\\"dragmove\\\",function(e){\\r\\n        let p={\\r\\n          id:e.target.id(),\\r\\n          x: Math.floor (e.target.x()),\\r\\n          y: Math.floor (e.target.y())\\r\\n        }\\r\\n        that.p=p;\\r\\n        let index=that.arPoint.findIndex(x=>x.id==p.id);\\r\\n        that.arPoint[index]=p;\\r\\n        that.draw();\\r\\n      });\\r\\n      return ball;\\r\\n    },\\r\\n    getSel(){\\r\\n      let kq=[];\\r\\n      let l=layer.find(\\\".myball\\\");\\r\\n      l.forEach((x,i)=>{\\r\\n        if(x.fill()=='blue'){\\r\\n          kq.push( parseInt (x.id()))\\r\\n        }\\r\\n      })\\r\\n      return kq;\\r\\n    },\\r\\n    onStageClick(e){\\r\\n      let chk=e.target.name();\\r\\n      if(chk=='myball'){\\r\\n        return;\\r\\n      }\\r\\n      let p=this.myGetMouse();\\r\\n      let ball=this.createBall(p.x,p.y,60,\\\"myball\\\",this.count.toString());\\r\\n      this.arPoint.push({id:this.count,x:p.x,y:p.y});\\r\\n      this.count++;\\r\\n      layer.add(ball);\\r\\n      this.draw();\\r\\n    },\\r\\n    onStageMouseMove(e){\\r\\n    },\\r\\n    getListRect(){ return layer.find(\\\".myrect\\\") },\\r\\n    getListLine(){ return layer.find(\\\".myline\\\") },\\r\\n    getListBall(){ return layer.find(\\\".myball\\\") },\\r\\n    myGetMouse() {\\r\\n      let scale=stage.scale().x;\\r\\n      var mousePos = stage.getPointerPosition();\\r\\n      var x = mousePos.x;\\r\\n      var y = mousePos.y;\\r\\n      var xx = Math.round(x / scale);\\r\\n      var yy = Math.round(y / scale);\\r\\n      return { x: xx, y: yy };\\r\\n    },\\r\\n    fitStageIntoParentContainer() {\\r\\n      var container = document.querySelector('#stage-parent');\\r\\n      var containerWidth = container.offsetWidth;\\r\\n      var scale = containerWidth / sceneWidth;\\r\\n      stage.width(sceneWidth * scale);\\r\\n      stage.height(sceneHeight * scale);\\r\\n      stage.scale({ x: scale, y: scale });\\r\\n      this.configKonva.width = sceneWidth * scale;\\r\\n      this.configKonva.height = sceneHeight * scale;\\r\\n    },\\r\\n  }\\r\\n}\\r\\n</script>\\r\\n<style scoped>\\r\\n\\r\\ndiv.relative {\\r\\n  position: relative;\\r\\n  border: 3px solid #73AD21;\\r\\n} \\r\\n\\r\\ndiv.absolute {\\r\\n  position: absolute;\\r\\n  top: 80px;\\r\\n  right: 0;\\r\\n  border: 3px solid #73AD21;\\r\\n}\\r\\n\\r\\n\\r\\n</style>\\r\\n\";"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","_v","staticClass","Sel","length","on","onDel","onLink","_s","unLink","onReset","onLoad","onSave","ref","configKonva","onStageClick","onStageMouseMove","configCircle","x","y","width","height","fill","stroke","strokeWidth","draggable","visible","points","lineCap","lineJoin","sceneFunc","context","shape","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fillStrokeShape","r","text","fontSize","textcolor","sel","getAttr","arc","Math","PI","fillStyle","textBaseline","textAlign","font","fillText","rect","msg","hover","_l","i","key","class","staticStyle","$event","src","onView","data","onDelData","staticRenderFns","sceneWidth","sceneHeight","stage","name","components","computed","test","radius","count","p","arPoint","arSel","listData","mounted","layer","window","created","methods","load","reset","arLink","onUnlink","delLine","arRemain","chkPairExist","dup","lBall","drawLine","lLine","draw","createLine","line","drawBall","colorFill","colorText","ball","createBall","e","that","id","getSel","l","kq","getListRect","getListLine","getListBall","myGetMouse","fitStageIntoParentContainer","component"],"sourceRoot":""}